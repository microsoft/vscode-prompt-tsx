/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and GitHub. All rights reserved.
 *--------------------------------------------------------------------------------------------*/

import { assertNever } from '../util/assert';
import type { OutputMode, toMode } from './mode';

/**
 * A chat message emitted by this library. This can be mapped to other APIs
 * easily using {@link toMode}.
 *
 * Please note:
 * - Enumerations and union types are non-exhaustive. More types may be added
 *   in the future.
 * - Data in this representation is very permissible and converting to API
 *   representations may be lossy.
 */
export type ChatMessage =
	| AssistantChatMessage
	| SystemChatMessage
	| UserChatMessage
	| ToolChatMessage;

/**
 * The role of a message in an OpenAI completions request.
 */
export enum ChatRole {
	System,
	User,
	Assistant,
	Tool,
}

export namespace ChatRole {
	export function display(role: ChatRole): string {
		switch (role) {
			case ChatRole.System:
				return 'system';
			case ChatRole.User:
				return 'user';
			case ChatRole.Assistant:
				return 'assistant';
			case ChatRole.Tool:
				return 'tool';
			default:
				assertNever(role, `unknown chat role ${role}}`);
		}
	}
}

export interface BaseChatMessage {
	role: ChatRole;
	content: ChatCompletionContentPart[];
	/**
	 * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	 */
	name?: string;
}

export interface SystemChatMessage extends BaseChatMessage {
	role: ChatRole.System;
}

export interface UserChatMessage extends BaseChatMessage {
	role: ChatRole.User;
}

export type ChatCompletionContentPart =
	| ChatCompletionContentPartImage
	| ChatCompletionContentPartText
	| ChatCompletionContentPartOpaque
	| ChatCompletionContentPartCacheCheckpoint;

export enum ChatCompletionContentPartKind {
	Image,
	Text,
	Opaque,
	CacheCheckpoint,
}

/** An image completion */
export interface ChatCompletionContentPartImage {
	imageUrl: ImageURLReference;
	type: ChatCompletionContentPartKind.Image;
}


export interface ChatCompletionContentPartCacheCheckpoint {
	type: ChatCompletionContentPartKind.CacheCheckpoint;
	/**
	 * Optional implementation-specific type of the checkpoint.
	 */
	cacheType?: string;
}


export interface ImageURLReference {
	/**
	 * Either a URL of the image or the base64 encoded image data.
	 */
	url: string;

	/**
	 * Specifies the detail level of the image. Learn more in the
	 * [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).
	 */
	detail?: 'low' | 'high';
}

export interface ChatCompletionContentPartText {
	/**
	 * The text content.
	 */
	text: string;

	/**
	 * The type of the content part.
	 */
	type: ChatCompletionContentPartKind.Text;
}

export interface ChatCompletionContentPartOpaque {
	/**
	 * A JSON-stringifiable value
	 */
	value: unknown;

	/**
	 * Constant-value token usage of this content part. If undefined, it will
	 * be assumed 0.
	 */
	tokenUsage?: number;

	/**
	 * A bitset of output modes where this content part will be omitted.
	 * E.g. `scope: OutputMode.Anthropic | OutputMode.VSCode`. Not all outputs
	 * will support opaque parts everywhere.
	 */
	scope?: number;

	/**
	 * The type of the content part.
	 */
	type: ChatCompletionContentPartKind.Opaque;
}

export namespace ChatCompletionContentPartOpaque {
	export function usableIn(part: ChatCompletionContentPartOpaque, mode: OutputMode) {
		return !part.scope || (part.scope & mode) !== 0;
	}
}

export interface ChatMessageToolCall {
	/**
	 * The ID of the tool call.
	 */
	id: string;

	/**
	 * The function that the model called.
	 */
	function: ChatMessageFunction;

	/**
	 * The type of the tool. Currently, only `function` is supported.
	 */
	type: 'function';
}

export interface AssistantChatMessage extends BaseChatMessage {
	role: ChatRole.Assistant;
	/**
	 * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	 */
	name?: string;

	/**
	 * The tool calls generated by the model.
	 */
	toolCalls?: ChatMessageToolCall[];
}

export interface ToolChatMessage extends BaseChatMessage {
	role: ChatRole.Tool;

	/**
	 * Tool call that this message is responding to.
	 */
	toolCallId: string;
}

/**
 * The function that the model called.
 */
export interface ChatMessageFunction {
	/**
	 * The arguments to call the function with, as generated by the model in JSON
	 * format.
	 */
	arguments: string;

	/**
	 * The name of the function to call.
	 */
	name: string;
}
