export const tracerSrc = "\"use strict\";\n(() => {\n  // node_modules/preact/dist/preact.module.js\n  var n;\n  var l;\n  var u;\n  var t;\n  var i;\n  var o;\n  var r;\n  var f;\n  var e;\n  var c;\n  var s;\n  var a;\n  var h = {};\n  var v = [];\n  var p = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n  var y = Array.isArray;\n  function d(n2, l3) {\n    for (var u3 in l3) n2[u3] = l3[u3];\n    return n2;\n  }\n  function w(n2) {\n    n2 && n2.parentNode && n2.parentNode.removeChild(n2);\n  }\n  function _(l3, u3, t3) {\n    var i3, o3, r3, f3 = {};\n    for (r3 in u3) \"key\" == r3 ? i3 = u3[r3] : \"ref\" == r3 ? o3 = u3[r3] : f3[r3] = u3[r3];\n    if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : t3), \"function\" == typeof l3 && null != l3.defaultProps) for (r3 in l3.defaultProps) void 0 === f3[r3] && (f3[r3] = l3.defaultProps[r3]);\n    return g(l3, f3, i3, o3, null);\n  }\n  function g(n2, t3, i3, o3, r3) {\n    var f3 = { type: n2, props: t3, key: i3, ref: o3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r3 ? ++u : r3, __i: -1, __u: 0 };\n    return null == r3 && null != l.vnode && l.vnode(f3), f3;\n  }\n  function b(n2) {\n    return n2.children;\n  }\n  function k(n2, l3) {\n    this.props = n2, this.context = l3;\n  }\n  function x(n2, l3) {\n    if (null == l3) return n2.__ ? x(n2.__, n2.__i + 1) : null;\n    for (var u3; l3 < n2.__k.length; l3++) if (null != (u3 = n2.__k[l3]) && null != u3.__e) return u3.__e;\n    return \"function\" == typeof n2.type ? x(n2) : null;\n  }\n  function C(n2) {\n    var l3, u3;\n    if (null != (n2 = n2.__) && null != n2.__c) {\n      for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++) if (null != (u3 = n2.__k[l3]) && null != u3.__e) {\n        n2.__e = n2.__c.base = u3.__e;\n        break;\n      }\n      return C(n2);\n    }\n  }\n  function M(n2) {\n    (!n2.__d && (n2.__d = true) && i.push(n2) && !P.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(P);\n  }\n  function P() {\n    var n2, u3, t3, o3, r3, e3, c3, s3;\n    for (i.sort(f); n2 = i.shift(); ) n2.__d && (u3 = i.length, o3 = void 0, e3 = (r3 = (t3 = n2).__v).__e, c3 = [], s3 = [], t3.__P && ((o3 = d({}, r3)).__v = r3.__v + 1, l.vnode && l.vnode(o3), O(t3.__P, o3, r3, t3.__n, t3.__P.namespaceURI, 32 & r3.__u ? [e3] : null, c3, null == e3 ? x(r3) : e3, !!(32 & r3.__u), s3), o3.__v = r3.__v, o3.__.__k[o3.__i] = o3, j(c3, o3, s3), o3.__e != e3 && C(o3)), i.length > u3 && i.sort(f));\n    P.__r = 0;\n  }\n  function S(n2, l3, u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, p3, y3, d3, w3, _2 = t3 && t3.__k || v, g2 = l3.length;\n    for (u3.__d = e3, $(u3, l3, _2), e3 = u3.__d, a3 = 0; a3 < g2; a3++) null != (y3 = u3.__k[a3]) && (p3 = -1 === y3.__i ? h : _2[y3.__i] || h, y3.__i = a3, O(n2, y3, p3, i3, o3, r3, f3, e3, c3, s3), d3 = y3.__e, y3.ref && p3.ref != y3.ref && (p3.ref && N(p3.ref, null, y3), s3.push(y3.ref, y3.__c || d3, y3)), null == w3 && null != d3 && (w3 = d3), 65536 & y3.__u || p3.__k === y3.__k ? e3 = I(y3, e3, n2) : \"function\" == typeof y3.type && void 0 !== y3.__d ? e3 = y3.__d : d3 && (e3 = d3.nextSibling), y3.__d = void 0, y3.__u &= -196609);\n    u3.__d = e3, u3.__e = w3;\n  }\n  function $(n2, l3, u3) {\n    var t3, i3, o3, r3, f3, e3 = l3.length, c3 = u3.length, s3 = c3, a3 = 0;\n    for (n2.__k = [], t3 = 0; t3 < e3; t3++) null != (i3 = l3[t3]) && \"boolean\" != typeof i3 && \"function\" != typeof i3 ? (r3 = t3 + a3, (i3 = n2.__k[t3] = \"string\" == typeof i3 || \"number\" == typeof i3 || \"bigint\" == typeof i3 || i3.constructor == String ? g(null, i3, null, null, null) : y(i3) ? g(b, { children: i3 }, null, null, null) : void 0 === i3.constructor && i3.__b > 0 ? g(i3.type, i3.props, i3.key, i3.ref ? i3.ref : null, i3.__v) : i3).__ = n2, i3.__b = n2.__b + 1, o3 = null, -1 !== (f3 = i3.__i = L(i3, u3, r3, s3)) && (s3--, (o3 = u3[f3]) && (o3.__u |= 131072)), null == o3 || null === o3.__v ? (-1 == f3 && a3--, \"function\" != typeof i3.type && (i3.__u |= 65536)) : f3 !== r3 && (f3 == r3 - 1 ? a3-- : f3 == r3 + 1 ? a3++ : (f3 > r3 ? a3-- : a3++, i3.__u |= 65536))) : i3 = n2.__k[t3] = null;\n    if (s3) for (t3 = 0; t3 < c3; t3++) null != (o3 = u3[t3]) && 0 == (131072 & o3.__u) && (o3.__e == n2.__d && (n2.__d = x(o3)), V(o3, o3));\n  }\n  function I(n2, l3, u3) {\n    var t3, i3;\n    if (\"function\" == typeof n2.type) {\n      for (t3 = n2.__k, i3 = 0; t3 && i3 < t3.length; i3++) t3[i3] && (t3[i3].__ = n2, l3 = I(t3[i3], l3, u3));\n      return l3;\n    }\n    n2.__e != l3 && (l3 && n2.type && !u3.contains(l3) && (l3 = x(n2)), u3.insertBefore(n2.__e, l3 || null), l3 = n2.__e);\n    do {\n      l3 = l3 && l3.nextSibling;\n    } while (null != l3 && 8 === l3.nodeType);\n    return l3;\n  }\n  function L(n2, l3, u3, t3) {\n    var i3 = n2.key, o3 = n2.type, r3 = u3 - 1, f3 = u3 + 1, e3 = l3[u3];\n    if (null === e3 || e3 && i3 == e3.key && o3 === e3.type && 0 == (131072 & e3.__u)) return u3;\n    if (t3 > (null != e3 && 0 == (131072 & e3.__u) ? 1 : 0)) for (; r3 >= 0 || f3 < l3.length; ) {\n      if (r3 >= 0) {\n        if ((e3 = l3[r3]) && 0 == (131072 & e3.__u) && i3 == e3.key && o3 === e3.type) return r3;\n        r3--;\n      }\n      if (f3 < l3.length) {\n        if ((e3 = l3[f3]) && 0 == (131072 & e3.__u) && i3 == e3.key && o3 === e3.type) return f3;\n        f3++;\n      }\n    }\n    return -1;\n  }\n  function T(n2, l3, u3) {\n    \"-\" === l3[0] ? n2.setProperty(l3, null == u3 ? \"\" : u3) : n2[l3] = null == u3 ? \"\" : \"number\" != typeof u3 || p.test(l3) ? u3 : u3 + \"px\";\n  }\n  function A(n2, l3, u3, t3, i3) {\n    var o3;\n    n: if (\"style\" === l3) if (\"string\" == typeof u3) n2.style.cssText = u3;\n    else {\n      if (\"string\" == typeof t3 && (n2.style.cssText = t3 = \"\"), t3) for (l3 in t3) u3 && l3 in u3 || T(n2.style, l3, \"\");\n      if (u3) for (l3 in u3) t3 && u3[l3] === t3[l3] || T(n2.style, l3, u3[l3]);\n    }\n    else if (\"o\" === l3[0] && \"n\" === l3[1]) o3 = l3 !== (l3 = l3.replace(/(PointerCapture)$|Capture$/i, \"$1\")), l3 = l3.toLowerCase() in n2 || \"onFocusOut\" === l3 || \"onFocusIn\" === l3 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + o3] = u3, u3 ? t3 ? u3.u = t3.u : (u3.u = e, n2.addEventListener(l3, o3 ? s : c, o3)) : n2.removeEventListener(l3, o3 ? s : c, o3);\n    else {\n      if (\"http://www.w3.org/2000/svg\" == i3) l3 = l3.replace(/xlink(H|:h)/, \"h\").replace(/sName$/, \"s\");\n      else if (\"width\" != l3 && \"height\" != l3 && \"href\" != l3 && \"list\" != l3 && \"form\" != l3 && \"tabIndex\" != l3 && \"download\" != l3 && \"rowSpan\" != l3 && \"colSpan\" != l3 && \"role\" != l3 && \"popover\" != l3 && l3 in n2) try {\n        n2[l3] = null == u3 ? \"\" : u3;\n        break n;\n      } catch (n3) {\n      }\n      \"function\" == typeof u3 || (null == u3 || false === u3 && \"-\" !== l3[4] ? n2.removeAttribute(l3) : n2.setAttribute(l3, \"popover\" == l3 && 1 == u3 ? \"\" : u3));\n    }\n  }\n  function F(n2) {\n    return function(u3) {\n      if (this.l) {\n        var t3 = this.l[u3.type + n2];\n        if (null == u3.t) u3.t = e++;\n        else if (u3.t < t3.u) return;\n        return t3(l.event ? l.event(u3) : u3);\n      }\n    };\n  }\n  function O(n2, u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, h3, v3, p3, w3, _2, g2, m2, x2, C3, M2, P2, $2, I2, H, L2, T3 = u3.type;\n    if (void 0 !== u3.constructor) return null;\n    128 & t3.__u && (c3 = !!(32 & t3.__u), r3 = [e3 = u3.__e = t3.__e]), (a3 = l.__b) && a3(u3);\n    n: if (\"function\" == typeof T3) try {\n      if (m2 = u3.props, x2 = \"prototype\" in T3 && T3.prototype.render, C3 = (a3 = T3.contextType) && i3[a3.__c], M2 = a3 ? C3 ? C3.props.value : a3.__ : i3, t3.__c ? g2 = (h3 = u3.__c = t3.__c).__ = h3.__E : (x2 ? u3.__c = h3 = new T3(m2, M2) : (u3.__c = h3 = new k(m2, M2), h3.constructor = T3, h3.render = q), C3 && C3.sub(h3), h3.props = m2, h3.state || (h3.state = {}), h3.context = M2, h3.__n = i3, v3 = h3.__d = true, h3.__h = [], h3._sb = []), x2 && null == h3.__s && (h3.__s = h3.state), x2 && null != T3.getDerivedStateFromProps && (h3.__s == h3.state && (h3.__s = d({}, h3.__s)), d(h3.__s, T3.getDerivedStateFromProps(m2, h3.__s))), p3 = h3.props, w3 = h3.state, h3.__v = u3, v3) x2 && null == T3.getDerivedStateFromProps && null != h3.componentWillMount && h3.componentWillMount(), x2 && null != h3.componentDidMount && h3.__h.push(h3.componentDidMount);\n      else {\n        if (x2 && null == T3.getDerivedStateFromProps && m2 !== p3 && null != h3.componentWillReceiveProps && h3.componentWillReceiveProps(m2, M2), !h3.__e && (null != h3.shouldComponentUpdate && false === h3.shouldComponentUpdate(m2, h3.__s, M2) || u3.__v === t3.__v)) {\n          for (u3.__v !== t3.__v && (h3.props = m2, h3.state = h3.__s, h3.__d = false), u3.__e = t3.__e, u3.__k = t3.__k, u3.__k.some(function(n3) {\n            n3 && (n3.__ = u3);\n          }), P2 = 0; P2 < h3._sb.length; P2++) h3.__h.push(h3._sb[P2]);\n          h3._sb = [], h3.__h.length && f3.push(h3);\n          break n;\n        }\n        null != h3.componentWillUpdate && h3.componentWillUpdate(m2, h3.__s, M2), x2 && null != h3.componentDidUpdate && h3.__h.push(function() {\n          h3.componentDidUpdate(p3, w3, _2);\n        });\n      }\n      if (h3.context = M2, h3.props = m2, h3.__P = n2, h3.__e = false, $2 = l.__r, I2 = 0, x2) {\n        for (h3.state = h3.__s, h3.__d = false, $2 && $2(u3), a3 = h3.render(h3.props, h3.state, h3.context), H = 0; H < h3._sb.length; H++) h3.__h.push(h3._sb[H]);\n        h3._sb = [];\n      } else do {\n        h3.__d = false, $2 && $2(u3), a3 = h3.render(h3.props, h3.state, h3.context), h3.state = h3.__s;\n      } while (h3.__d && ++I2 < 25);\n      h3.state = h3.__s, null != h3.getChildContext && (i3 = d(d({}, i3), h3.getChildContext())), x2 && !v3 && null != h3.getSnapshotBeforeUpdate && (_2 = h3.getSnapshotBeforeUpdate(p3, w3)), S(n2, y(L2 = null != a3 && a3.type === b && null == a3.key ? a3.props.children : a3) ? L2 : [L2], u3, t3, i3, o3, r3, f3, e3, c3, s3), h3.base = u3.__e, u3.__u &= -161, h3.__h.length && f3.push(h3), g2 && (h3.__E = h3.__ = null);\n    } catch (n3) {\n      if (u3.__v = null, c3 || null != r3) {\n        for (u3.__u |= c3 ? 160 : 32; e3 && 8 === e3.nodeType && e3.nextSibling; ) e3 = e3.nextSibling;\n        r3[r3.indexOf(e3)] = null, u3.__e = e3;\n      } else u3.__e = t3.__e, u3.__k = t3.__k;\n      l.__e(n3, u3, t3);\n    }\n    else null == r3 && u3.__v === t3.__v ? (u3.__k = t3.__k, u3.__e = t3.__e) : u3.__e = z(t3.__e, u3, t3, i3, o3, r3, f3, c3, s3);\n    (a3 = l.diffed) && a3(u3);\n  }\n  function j(n2, u3, t3) {\n    u3.__d = void 0;\n    for (var i3 = 0; i3 < t3.length; i3++) N(t3[i3], t3[++i3], t3[++i3]);\n    l.__c && l.__c(u3, n2), n2.some(function(u4) {\n      try {\n        n2 = u4.__h, u4.__h = [], n2.some(function(n3) {\n          n3.call(u4);\n        });\n      } catch (n3) {\n        l.__e(n3, u4.__v);\n      }\n    });\n  }\n  function z(u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, v3, p3, d3, _2, g2, m2, b2 = i3.props, k3 = t3.props, C3 = t3.type;\n    if (\"svg\" === C3 ? r3 = \"http://www.w3.org/2000/svg\" : \"math\" === C3 ? r3 = \"http://www.w3.org/1998/Math/MathML\" : r3 || (r3 = \"http://www.w3.org/1999/xhtml\"), null != f3) {\n      for (a3 = 0; a3 < f3.length; a3++) if ((_2 = f3[a3]) && \"setAttribute\" in _2 == !!C3 && (C3 ? _2.localName === C3 : 3 === _2.nodeType)) {\n        u3 = _2, f3[a3] = null;\n        break;\n      }\n    }\n    if (null == u3) {\n      if (null === C3) return document.createTextNode(k3);\n      u3 = document.createElementNS(r3, C3, k3.is && k3), c3 && (l.__m && l.__m(t3, f3), c3 = false), f3 = null;\n    }\n    if (null === C3) b2 === k3 || c3 && u3.data === k3 || (u3.data = k3);\n    else {\n      if (f3 = f3 && n.call(u3.childNodes), b2 = i3.props || h, !c3 && null != f3) for (b2 = {}, a3 = 0; a3 < u3.attributes.length; a3++) b2[(_2 = u3.attributes[a3]).name] = _2.value;\n      for (a3 in b2) if (_2 = b2[a3], \"children\" == a3) ;\n      else if (\"dangerouslySetInnerHTML\" == a3) p3 = _2;\n      else if (!(a3 in k3)) {\n        if (\"value\" == a3 && \"defaultValue\" in k3 || \"checked\" == a3 && \"defaultChecked\" in k3) continue;\n        A(u3, a3, null, _2, r3);\n      }\n      for (a3 in k3) _2 = k3[a3], \"children\" == a3 ? d3 = _2 : \"dangerouslySetInnerHTML\" == a3 ? v3 = _2 : \"value\" == a3 ? g2 = _2 : \"checked\" == a3 ? m2 = _2 : c3 && \"function\" != typeof _2 || b2[a3] === _2 || A(u3, a3, _2, b2[a3], r3);\n      if (v3) c3 || p3 && (v3.__html === p3.__html || v3.__html === u3.innerHTML) || (u3.innerHTML = v3.__html), t3.__k = [];\n      else if (p3 && (u3.innerHTML = \"\"), S(u3, y(d3) ? d3 : [d3], t3, i3, o3, \"foreignObject\" === C3 ? \"http://www.w3.org/1999/xhtml\" : r3, f3, e3, f3 ? f3[0] : i3.__k && x(i3, 0), c3, s3), null != f3) for (a3 = f3.length; a3--; ) w(f3[a3]);\n      c3 || (a3 = \"value\", \"progress\" === C3 && null == g2 ? u3.removeAttribute(\"value\") : void 0 !== g2 && (g2 !== u3[a3] || \"progress\" === C3 && !g2 || \"option\" === C3 && g2 !== b2[a3]) && A(u3, a3, g2, b2[a3], r3), a3 = \"checked\", void 0 !== m2 && m2 !== u3[a3] && A(u3, a3, m2, b2[a3], r3));\n    }\n    return u3;\n  }\n  function N(n2, u3, t3) {\n    try {\n      if (\"function\" == typeof n2) {\n        var i3 = \"function\" == typeof n2.__u;\n        i3 && n2.__u(), i3 && null == u3 || (n2.__u = n2(u3));\n      } else n2.current = u3;\n    } catch (n3) {\n      l.__e(n3, t3);\n    }\n  }\n  function V(n2, u3, t3) {\n    var i3, o3;\n    if (l.unmount && l.unmount(n2), (i3 = n2.ref) && (i3.current && i3.current !== n2.__e || N(i3, null, u3)), null != (i3 = n2.__c)) {\n      if (i3.componentWillUnmount) try {\n        i3.componentWillUnmount();\n      } catch (n3) {\n        l.__e(n3, u3);\n      }\n      i3.base = i3.__P = null;\n    }\n    if (i3 = n2.__k) for (o3 = 0; o3 < i3.length; o3++) i3[o3] && V(i3[o3], u3, t3 || \"function\" != typeof n2.type);\n    t3 || w(n2.__e), n2.__c = n2.__ = n2.__e = n2.__d = void 0;\n  }\n  function q(n2, l3, u3) {\n    return this.constructor(n2, u3);\n  }\n  function B(u3, t3, i3) {\n    var o3, r3, f3, e3;\n    l.__ && l.__(u3, t3), r3 = (o3 = \"function\" == typeof i3) ? null : i3 && i3.__k || t3.__k, f3 = [], e3 = [], O(t3, u3 = (!o3 && i3 || t3).__k = _(b, null, [u3]), r3 || h, h, t3.namespaceURI, !o3 && i3 ? [i3] : r3 ? null : t3.firstChild ? n.call(t3.childNodes) : null, f3, !o3 && i3 ? i3 : r3 ? r3.__e : t3.firstChild, o3, e3), j(f3, u3, e3);\n  }\n  n = v.slice, l = { __e: function(n2, l3, u3, t3) {\n    for (var i3, o3, r3; l3 = l3.__; ) if ((i3 = l3.__c) && !i3.__) try {\n      if ((o3 = i3.constructor) && null != o3.getDerivedStateFromError && (i3.setState(o3.getDerivedStateFromError(n2)), r3 = i3.__d), null != i3.componentDidCatch && (i3.componentDidCatch(n2, t3 || {}), r3 = i3.__d), r3) return i3.__E = i3;\n    } catch (l4) {\n      n2 = l4;\n    }\n    throw n2;\n  } }, u = 0, t = function(n2) {\n    return null != n2 && null == n2.constructor;\n  }, k.prototype.setState = function(n2, l3) {\n    var u3;\n    u3 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = d({}, this.state), \"function\" == typeof n2 && (n2 = n2(d({}, u3), this.props)), n2 && d(u3, n2), null != n2 && this.__v && (l3 && this._sb.push(l3), M(this));\n  }, k.prototype.forceUpdate = function(n2) {\n    this.__v && (this.__e = true, n2 && this.__h.push(n2), M(this));\n  }, k.prototype.render = b, i = [], r = \"function\" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n2, l3) {\n    return n2.__v.__b - l3.__v.__b;\n  }, P.__r = 0, e = 0, c = F(false), s = F(true), a = 0;\n\n  // node_modules/preact/hooks/dist/hooks.module.js\n  var t2;\n  var r2;\n  var u2;\n  var i2;\n  var o2 = 0;\n  var f2 = [];\n  var c2 = l;\n  var e2 = c2.__b;\n  var a2 = c2.__r;\n  var v2 = c2.diffed;\n  var l2 = c2.__c;\n  var m = c2.unmount;\n  var s2 = c2.__;\n  function d2(n2, t3) {\n    c2.__h && c2.__h(r2, n2, o2 || t3), o2 = 0;\n    var u3 = r2.__H || (r2.__H = { __: [], __h: [] });\n    return n2 >= u3.__.length && u3.__.push({}), u3.__[n2];\n  }\n  function h2(n2) {\n    return o2 = 1, p2(D, n2);\n  }\n  function p2(n2, u3, i3) {\n    var o3 = d2(t2++, 2);\n    if (o3.t = n2, !o3.__c && (o3.__ = [i3 ? i3(u3) : D(void 0, u3), function(n3) {\n      var t3 = o3.__N ? o3.__N[0] : o3.__[0], r3 = o3.t(t3, n3);\n      t3 !== r3 && (o3.__N = [r3, o3.__[1]], o3.__c.setState({}));\n    }], o3.__c = r2, !r2.u)) {\n      var f3 = function(n3, t3, r3) {\n        if (!o3.__c.__H) return true;\n        var u4 = o3.__c.__H.__.filter(function(n4) {\n          return !!n4.__c;\n        });\n        if (u4.every(function(n4) {\n          return !n4.__N;\n        })) return !c3 || c3.call(this, n3, t3, r3);\n        var i4 = false;\n        return u4.forEach(function(n4) {\n          if (n4.__N) {\n            var t4 = n4.__[0];\n            n4.__ = n4.__N, n4.__N = void 0, t4 !== n4.__[0] && (i4 = true);\n          }\n        }), !(!i4 && o3.__c.props === n3) && (!c3 || c3.call(this, n3, t3, r3));\n      };\n      r2.u = true;\n      var c3 = r2.shouldComponentUpdate, e3 = r2.componentWillUpdate;\n      r2.componentWillUpdate = function(n3, t3, r3) {\n        if (this.__e) {\n          var u4 = c3;\n          c3 = void 0, f3(n3, t3, r3), c3 = u4;\n        }\n        e3 && e3.call(this, n3, t3, r3);\n      }, r2.shouldComponentUpdate = f3;\n    }\n    return o3.__N || o3.__;\n  }\n  function y2(n2, u3) {\n    var i3 = d2(t2++, 3);\n    !c2.__s && C2(i3.__H, u3) && (i3.__ = n2, i3.i = u3, r2.__H.__h.push(i3));\n  }\n  function A2(n2) {\n    return o2 = 5, T2(function() {\n      return { current: n2 };\n    }, []);\n  }\n  function T2(n2, r3) {\n    var u3 = d2(t2++, 7);\n    return C2(u3.__H, r3) && (u3.__ = n2(), u3.__H = r3, u3.__h = n2), u3.__;\n  }\n  function j2() {\n    for (var n2; n2 = f2.shift(); ) if (n2.__P && n2.__H) try {\n      n2.__H.__h.forEach(z2), n2.__H.__h.forEach(B2), n2.__H.__h = [];\n    } catch (t3) {\n      n2.__H.__h = [], c2.__e(t3, n2.__v);\n    }\n  }\n  c2.__b = function(n2) {\n    r2 = null, e2 && e2(n2);\n  }, c2.__ = function(n2, t3) {\n    n2 && t3.__k && t3.__k.__m && (n2.__m = t3.__k.__m), s2 && s2(n2, t3);\n  }, c2.__r = function(n2) {\n    a2 && a2(n2), t2 = 0;\n    var i3 = (r2 = n2.__c).__H;\n    i3 && (u2 === r2 ? (i3.__h = [], r2.__h = [], i3.__.forEach(function(n3) {\n      n3.__N && (n3.__ = n3.__N), n3.i = n3.__N = void 0;\n    })) : (i3.__h.forEach(z2), i3.__h.forEach(B2), i3.__h = [], t2 = 0)), u2 = r2;\n  }, c2.diffed = function(n2) {\n    v2 && v2(n2);\n    var t3 = n2.__c;\n    t3 && t3.__H && (t3.__H.__h.length && (1 !== f2.push(t3) && i2 === c2.requestAnimationFrame || ((i2 = c2.requestAnimationFrame) || w2)(j2)), t3.__H.__.forEach(function(n3) {\n      n3.i && (n3.__H = n3.i), n3.i = void 0;\n    })), u2 = r2 = null;\n  }, c2.__c = function(n2, t3) {\n    t3.some(function(n3) {\n      try {\n        n3.__h.forEach(z2), n3.__h = n3.__h.filter(function(n4) {\n          return !n4.__ || B2(n4);\n        });\n      } catch (r3) {\n        t3.some(function(n4) {\n          n4.__h && (n4.__h = []);\n        }), t3 = [], c2.__e(r3, n3.__v);\n      }\n    }), l2 && l2(n2, t3);\n  }, c2.unmount = function(n2) {\n    m && m(n2);\n    var t3, r3 = n2.__c;\n    r3 && r3.__H && (r3.__H.__.forEach(function(n3) {\n      try {\n        z2(n3);\n      } catch (n4) {\n        t3 = n4;\n      }\n    }), r3.__H = void 0, t3 && c2.__e(t3, r3.__v));\n  };\n  var k2 = \"function\" == typeof requestAnimationFrame;\n  function w2(n2) {\n    var t3, r3 = function() {\n      clearTimeout(u3), k2 && cancelAnimationFrame(t3), setTimeout(n2);\n    }, u3 = setTimeout(r3, 100);\n    k2 && (t3 = requestAnimationFrame(r3));\n  }\n  function z2(n2) {\n    var t3 = r2, u3 = n2.__c;\n    \"function\" == typeof u3 && (n2.__c = void 0, u3()), r2 = t3;\n  }\n  function B2(n2) {\n    var t3 = r2;\n    n2.__c = n2.__(), r2 = t3;\n  }\n  function C2(n2, t3) {\n    return !n2 || n2.length !== t3.length || t3.some(function(t4, r3) {\n      return t4 !== n2[r3];\n    });\n  }\n  function D(n2, t3) {\n    return \"function\" == typeof t3 ? t3(n2) : t3;\n  }\n\n  // src/tracer/hooks.ts\n  function useDebouncedCallback(callback, delay) {\n    const timeoutIdRef = A2(void 0);\n    const debouncedCallback = (...args) => {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n      timeoutIdRef.current = window.setTimeout(() => {\n        callback(...args);\n      }, delay);\n    };\n    y2(() => {\n      return () => {\n        if (timeoutIdRef.current) {\n          clearTimeout(timeoutIdRef.current);\n        }\n      };\n    }, []);\n    return debouncedCallback;\n  }\n\n  // src/tracer/node.tsx\n  var RANGE_COLORS = [\n    { bg: \"#c1e7ff\", fg: \"#000\" },\n    { bg: \"#abd2ec\", fg: \"#000\" },\n    { bg: \"#94bed9\", fg: \"#000\" },\n    { bg: \"#7faac6\", fg: \"#000\" },\n    { bg: \"#6996b3\", fg: \"#fff\" },\n    { bg: \"#5383a1\", fg: \"#fff\" },\n    { bg: \"#3d708f\", fg: \"#fff\" },\n    { bg: \"#255e7e\", fg: \"#fff\" }\n  ];\n  var Children = ({ scoreBy, nodes, epoch }) => {\n    if (nodes.length === 0) {\n      return null;\n    }\n    let nextScoreBy = scoreBy;\n    if (scoreBy.field !== \"tokens\") {\n      let max = nodes[0][scoreBy.field];\n      let min = nodes[0][scoreBy.field];\n      for (let i3 = 1; i3 < nodes.length; i3++) {\n        max = Math.max(max, nodes[i3][scoreBy.field]);\n        min = Math.max(min, nodes[i3][scoreBy.field]);\n      }\n      nextScoreBy = { field: scoreBy.field, max, min };\n    }\n    return /* @__PURE__ */ _(\"div\", { className: \"node-children\" }, nodes.map((child, index) => child.type === 2 /* TextChunk */ ? /* @__PURE__ */ _(TextNode, { scoreBy: nextScoreBy, key: index, node: child }) : /* @__PURE__ */ _(WrapperNode, { scoreBy: nextScoreBy, key: index, node: child, epoch })));\n  };\n  var LNNodeStats = ({ node }) => /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Used Tokens: \", node.tokens, \" / \", \"Priority: \", node.priority === Number.MAX_SAFE_INTEGER ? \"MAX\" : node.priority);\n  var LMNode = ({ scoreBy, node, children, ...attrs }) => {\n    let step = 0;\n    if (scoreBy.max !== scoreBy.min) {\n      const pct = (node[scoreBy.field] - scoreBy.min) / (scoreBy.max - scoreBy.min);\n      step = Math.round((RANGE_COLORS.length - 1) * pct);\n    }\n    return /* @__PURE__ */ _(\"div\", { ...attrs, className: `node ${attrs.className || \"\"}`, style: { backgroundColor: RANGE_COLORS[step].bg, color: RANGE_COLORS[step].fg } }, children);\n  };\n  var TextNode = ({ scoreBy, node }) => {\n    return /* @__PURE__ */ _(LMNode, { node, scoreBy, tabIndex: 0, className: \"node-text\" }, /* @__PURE__ */ _(LNNodeStats, { node }), /* @__PURE__ */ _(\"div\", { className: \"node-content\" }, node.value));\n  };\n  var WrapperNode = ({ scoreBy, node, epoch }) => {\n    const [collapsed, setCollapsed] = h2(false);\n    const epochIndex = EPOCHS.findIndex((e3) => e3.elements.some((e4) => e4.id === node.id));\n    if (epochIndex === void 0) {\n      throw new Error(`epoch not found for ${node.id}`);\n    }\n    const myEpoch = EPOCHS[epochIndex];\n    const thisEpoch = EPOCHS.at(epoch);\n    const tokenBudget = myEpoch.elements.find((e3) => e3.id === node.id).tokenBudget;\n    const tag = node.type === 1 /* ChatMessage */ ? node.name || node.role.slice(0, 1).toUpperCase() + node.role.slice(1) + \"Message\" : node.name;\n    if (epoch < epochIndex) {\n      return null;\n    }\n    return /* @__PURE__ */ _(LMNode, { node, scoreBy, className: epochIndex === epoch ? \"new-in-epoch\" : void 0 }, /* @__PURE__ */ _(LNNodeStats, { node }), /* @__PURE__ */ _(\"div\", { className: \"node-content node-toggler\", onClick: () => setCollapsed((v3) => !v3) }, /* @__PURE__ */ _(\"span\", null, thisEpoch?.inNode === node.id ? \"\\u{1F3C3} \" : \"\", `<${tag}>`), /* @__PURE__ */ _(\"span\", { className: \"indicator\" }, collapsed ? \"[+]\" : \"[-]\")), epoch === epochIndex && /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Token Budget: \", tokenBudget), thisEpoch?.inNode === node.id && /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Rendering flexGrow=\", thisEpoch.flexValue, /* @__PURE__ */ _(\"br\", null), /* @__PURE__ */ _(\"br\", null), \"Splitting \", thisEpoch.reservedTokens ? `${thisEpoch.tokenBudget} - ${thisEpoch.reservedTokens} (reserved) = ${thisEpoch.tokenBudget - thisEpoch.reservedTokens}` : thisEpoch.tokenBudget, \" tokens among \", thisEpoch.elements.length, \" elements\"), !collapsed && /* @__PURE__ */ _(Children, { nodes: node.children, scoreBy, epoch }));\n  };\n  var Root = ({ scoreBy, node, epoch }) => {\n    let score;\n    if (scoreBy === \"tokens\") {\n      score = { field: \"tokens\", max: node.tokens, min: 0 };\n    } else {\n      score = { field: \"priority\", max: node.priority, min: node.priority };\n    }\n    return /* @__PURE__ */ _(WrapperNode, { scoreBy: score, node, epoch });\n  };\n\n  // src/tracer/index.tsx\n  var SliderWithInputControl = ({ label, value, onChange, min, max }) => {\n    const handleSliderChange = (event) => {\n      onChange(event.target.valueAsNumber);\n    };\n    const id = `number-slider-${Math.random()}`;\n    return /* @__PURE__ */ _(\"div\", { className: \"controls-slider\" }, /* @__PURE__ */ _(\"label\", { htmlFor: id }, label), /* @__PURE__ */ _(\n      \"input\",\n      {\n        id,\n        type: \"range\",\n        min,\n        max,\n        value,\n        onInput: handleSliderChange\n      }\n    ), /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"number\",\n        min,\n        value,\n        onInput: handleSliderChange,\n        onChange: handleSliderChange\n      }\n    ));\n  };\n  var ScoreByControl = ({ scoreBy, onScoreByChange }) => {\n    const handleScoreByChange = (event) => {\n      const newScoreBy = event.target.value;\n      onScoreByChange(newScoreBy);\n    };\n    return /* @__PURE__ */ _(\"div\", { className: \"controls-scoreby\" }, \"Visualize by\", /* @__PURE__ */ _(\"label\", null, /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"radio\",\n        name: \"scoreBy\",\n        value: \"tokens\",\n        checked: scoreBy === \"tokens\",\n        onChange: handleScoreByChange\n      }\n    ), \"Tokens\"), /* @__PURE__ */ _(\"label\", null, /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"radio\",\n        name: \"scoreBy\",\n        value: \"priority\",\n        checked: scoreBy === \"priority\",\n        onChange: handleScoreByChange\n      }\n    ), \"Priority\"));\n  };\n  var App = () => {\n    const [tokens, setTokens] = h2(DEFAULT_TOKENS);\n    const [epoch, setEpoch] = h2(EPOCHS.length);\n    const [model, setModel] = h2(DEFAULT_MODEL);\n    const [scoreBy, setScoreBy] = h2(\"tokens\");\n    const [activeTab, setActiveTab] = h2(\"epoch\");\n    const regenModel = useDebouncedCallback(async (tokens2) => {\n      if (tokens2 === DEFAULT_TOKENS) {\n        return DEFAULT_MODEL;\n      }\n      const response = await fetch(`${SERVER_ADDRESS}regen?n=${tokens2}`);\n      const newModel = await response.json();\n      setModel(newModel);\n    }, 100);\n    const handleTokensChange = (newTokens) => {\n      setTokens(newTokens);\n      regenModel(newTokens);\n      setEpoch(EPOCHS.length);\n    };\n    return /* @__PURE__ */ _(\"div\", { className: \"app\" }, /* @__PURE__ */ _(\"div\", { className: \"controls\" }, /* @__PURE__ */ _(\"div\", { className: \"tabs\" }, /* @__PURE__ */ _(\"div\", { className: `tab ${activeTab === \"epoch\" ? \"active\" : \"\"}`, onClick: () => setActiveTab(\"epoch\") }, \"View Order\"), /* @__PURE__ */ _(\"div\", { className: `tab ${activeTab === \"tokens\" ? \"active\" : \"\"}`, onClick: () => setActiveTab(\"tokens\") }, \"Change Token Budget\")), /* @__PURE__ */ _(\"div\", { className: `tab-content ${activeTab === \"epoch\" ? \"active\" : \"\"}` }, /* @__PURE__ */ _(SliderWithInputControl, { label: \"Render Epoch\", value: epoch, onChange: setEpoch, min: 0, max: EPOCHS.length }), /* @__PURE__ */ _(\"p\", null, \"Changing the render epoch lets you see the order in which elements are rendered and how the token budget is allocated.\")), /* @__PURE__ */ _(\"div\", { className: `tab-content ${activeTab === \"tokens\" ? \"active\" : \"\"}` }, /* @__PURE__ */ _(SliderWithInputControl, { label: \"Token Budget\", value: tokens, onChange: handleTokensChange, min: 0, max: DEFAULT_TOKENS * 2 }), /* @__PURE__ */ _(\"p\", null, \"Token changes here will prune elements and re-render 'pure' ones, but the entire prompt is not being re-rendered\")), /* @__PURE__ */ _(\"div\", { className: \"controls-stats\" }, /* @__PURE__ */ _(\"span\", null, \"Used \", model.container.tokens, \"/\", model.budget, \" tokens\"), /* @__PURE__ */ _(\"span\", null, \"Removed \", model.removed, \" nodes\"), /* @__PURE__ */ _(ScoreByControl, { scoreBy, onScoreByChange: setScoreBy }))), /* @__PURE__ */ _(Root, { node: model.container, scoreBy, epoch }));\n  };\n  B(/* @__PURE__ */ _(App, null), document.body);\n})();\n//# sourceMappingURL=data:application/json;base64,\n";
export const tracerCss = "/* src/tracer/index.css */\nbody {\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe WPC\",\n    \"Segoe UI\",\n    system-ui,\n    \"Ubuntu\",\n    \"Droid Sans\",\n    sans-serif;\n  background: #fff;\n}\n.render-pass {\n  border-left: 2px solid #ccc;\n  &:hover {\n    border-left-color: #000;\n  }\n}\n.literals li {\n  white-space: pre;\n  font-family: monospace;\n}\n.render-flex,\n.render-element {\n  padding-left: 10px;\n}\n.app {\n  padding: 20px;\n}\n.node {\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  margin: 10px;\n  padding: 10px;\n  border-radius: 4px;\n  width: 200px;\n  &.new-in-epoch {\n    box-shadow: 0 0 3px 2px #ff0000;\n  }\n}\n.node-content {\n  font-weight: bold;\n}\n.node-children {\n  margin-left: 20px;\n  border-left: 2px dashed rgba(255, 255, 255, 0.5);\n  padding-left: 10px;\n}\n.node-toggler {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  .indicator {\n    font-size: 0.7em;\n  }\n}\n.node-text {\n  width: 400px;\n  &:focus,\n  &:focus-within {\n    outline: 1px solid orange;\n    .node-content {\n      white-space: normal;\n    }\n  }\n  .node-content {\n    font-weight: normal;\n    font-size: 0.8em;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n}\n.node-stats {\n  font-family: monospace;\n  font-size: 0.8em;\n}\n.controls {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  p {\n    font-size: 0.9em;\n    max-width: 500px;\n    margin-top: 0;\n  }\n}\n.controls-slider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.controls-stats {\n  display: flex;\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n  margin-top: 0;\n}\n.controls-scoreby {\n  display: flex;\n  gap: 10px;\n}\n.tabs {\n  display: flex;\n  border-bottom: 1px solid #ccc;\n  margin-bottom: 10px;\n}\n.tab {\n  padding: 10px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  border-bottom: none;\n}\n.tab.active {\n  border-color: #ccc;\n  border-bottom: 1px solid #fff;\n  background-color: #f9f9f9;\n}\n.tab-content {\n  display: none;\n}\n.tab-content.active {\n  display: block;\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3RyYWNlci9pbmRleC5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImJvZHkge1xyXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBXUEMnLCAnU2Vnb2UgVUknLCBzeXN0ZW0tdWksICdVYnVudHUnLCAnRHJvaWQgU2FucycsIHNhbnMtc2VyaWY7XHJcbiAgYmFja2dyb3VuZDogI2ZmZjtcclxufVxyXG5cclxuLyoqIE9sZCBmbGV4IGRpc3BsYXkgKi9cclxuLnJlbmRlci1wYXNzIHtcclxuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNjY2M7XHJcblxyXG4gICY6aG92ZXIge1xyXG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICMwMDA7XHJcbiAgfVxyXG59XHJcblxyXG4ubGl0ZXJhbHMgbGkge1xyXG4gIHdoaXRlLXNwYWNlOiBwcmU7XHJcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcclxufVxyXG5cclxuLnJlbmRlci1mbGV4LCAucmVuZGVyLWVsZW1lbnQge1xyXG4gIHBhZGRpbmctbGVmdDogMTBweDtcclxufVxyXG5cclxuLyoqIFRTWCBDb21wb25lbnRzICovXHJcblxyXG4uYXBwIHtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG59XHJcblxyXG4ubm9kZSB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xyXG4gIG1hcmdpbjogMTBweDtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICB3aWR0aDogMjAwcHg7XHJcblxyXG4gICYubmV3LWluLWVwb2NoIHtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAzcHggMnB4ICNmZjAwMDA7XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS1jb250ZW50IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLm5vZGUtY2hpbGRyZW4ge1xyXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gIGJvcmRlci1sZWZ0OiAycHggZGFzaGVkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbn1cclxuXHJcbi5ub2RlLXRvZ2dsZXIge1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAuaW5kaWNhdG9yIHtcclxuICAgIGZvbnQtc2l6ZTogMC43ZW07XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS10ZXh0IHtcclxuICB3aWR0aDogNDAwcHg7XHJcblxyXG4gICY6Zm9jdXMsICY6Zm9jdXMtd2l0aGluIHtcclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCBvcmFuZ2U7XHJcblxyXG4gICAgLm5vZGUtY29udGVudCB7XHJcbiAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAubm9kZS1jb250ZW50IHtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBmb250LXNpemU6IDAuOGVtO1xyXG5cclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS1zdGF0cyB7XHJcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcclxuICBmb250LXNpemU6IDAuOGVtO1xyXG59XHJcblxyXG4uY29udHJvbHMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBnYXA6IDEwcHg7XHJcblxyXG4gIHAge1xyXG4gICAgZm9udC1zaXplOiAwLjllbTtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gIH1cclxufVxyXG5cclxuLmNvbnRyb2xzLXNsaWRlciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGdhcDogMTBweDtcclxufVxyXG5cclxuLmNvbnRyb2xzLXN0YXRzIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGdhcDogMjBweDtcclxuICBsaXN0LXN0eWxlOiBub25lO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgbWFyZ2luLXRvcDogMDtcclxufVxyXG5cclxuLmNvbnRyb2xzLXNjb3JlYnkge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZ2FwOiAxMHB4O1xyXG59XHJcblxyXG5cclxuLnRhYnMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLnRhYiB7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcclxufVxyXG5cclxuLnRhYi5hY3RpdmUge1xyXG4gIGJvcmRlci1jb2xvcjogI2NjYztcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZmZjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xyXG59XHJcblxyXG4udGFiLWNvbnRlbnQge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi50YWItY29udGVudC5hY3RpdmUge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQTtBQUNFO0FBQUEsSUFBYSxhQUFhO0FBQUEsSUFBRSxrQkFBa0I7QUFBQSxJQUFFLFdBQVc7QUFBQSxJQUFFLFVBQVU7QUFBQSxJQUFFLFNBQVM7QUFBQSxJQUFFLFFBQVE7QUFBQSxJQUFFLFlBQVk7QUFBQSxJQUFFO0FBQzVHLGNBQVk7QUFDZDtBQUdBLENBQUM7QUFDQyxlQUFhLElBQUksTUFBTTtBQUV2QixHQUFDO0FBQ0MsdUJBQW1CO0FBQ3JCO0FBQ0Y7QUFFQSxDQUFDLFNBQVM7QUFDUixlQUFhO0FBQ2IsZUFBYTtBQUNmO0FBRUEsQ0FBQztBQUFhLENBQUM7QUFDYixnQkFBYztBQUNoQjtBQUlBLENBQUM7QUFDQyxXQUFTO0FBQ1g7QUFFQSxDQUFDO0FBQ0MsVUFBUSxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUN0QyxVQUFRO0FBQ1IsV0FBUztBQUNULGlCQUFlO0FBQ2YsU0FBTztBQUVQLEdBQUMsQ0FBQztBQUNBLGdCQUFZLEVBQUUsRUFBRSxJQUFJLElBQUk7QUFDMUI7QUFDRjtBQUVBLENBQUM7QUFDQyxlQUFhO0FBQ2Y7QUFFQSxDQUFDO0FBQ0MsZUFBYTtBQUNiLGVBQWEsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDNUMsZ0JBQWM7QUFDaEI7QUFFQSxDQUFDO0FBQ0MsVUFBUTtBQUNSLFdBQVM7QUFDVCxlQUFhO0FBQ2IsbUJBQWlCO0FBRWpCLEdBQUM7QUFDQyxlQUFXO0FBQ2I7QUFDRjtBQUVBLENBQUM7QUFDQyxTQUFPO0FBRVAsR0FBQztBQUFBLEVBQVEsQ0FBQztBQUNSLGFBQVMsSUFBSSxNQUFNO0FBRW5CLEtBM0JIO0FBNEJLLG1CQUFhO0FBQ2Y7QUFDRjtBQUVBLEdBaENEO0FBaUNHLGlCQUFhO0FBQ2IsZUFBVztBQUVYLGlCQUFhO0FBQ2IsbUJBQWU7QUFDZixjQUFVO0FBQ1o7QUFDRjtBQUVBLENBQUM7QUFDQyxlQUFhO0FBQ2IsYUFBVztBQUNiO0FBRUEsQ0FBQztBQUNDLFdBQVM7QUFDVCxrQkFBZ0I7QUFDaEIsT0FBSztBQUVMO0FBQ0UsZUFBVztBQUNYLGVBQVc7QUFDWCxnQkFBWTtBQUNkO0FBQ0Y7QUFFQSxDQUFDO0FBQ0MsV0FBUztBQUNULGVBQWE7QUFDYixPQUFLO0FBQ1A7QUFFQSxDQUFDO0FBQ0MsV0FBUztBQUNULE9BQUs7QUFDTCxjQUFZO0FBQ1osV0FBUztBQUNULGNBQVk7QUFDZDtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1QsT0FBSztBQUNQO0FBR0EsQ0FBQztBQUNDLFdBQVM7QUFDVCxpQkFBZSxJQUFJLE1BQU07QUFDekIsaUJBQWU7QUFDakI7QUFFQSxDQUFDO0FBQ0MsV0FBUztBQUNULFVBQVE7QUFDUixVQUFRLElBQUksTUFBTTtBQUNsQixpQkFBZTtBQUNqQjtBQUVBLENBUEMsR0FPRyxDQUFDO0FBQ0gsZ0JBQWM7QUFDZCxpQkFBZSxJQUFJLE1BQU07QUFDekIsb0JBQWtCO0FBQ3BCO0FBRUEsQ0FBQztBQUNDLFdBQVM7QUFDWDtBQUVBLENBSkMsV0FJVyxDQVZQO0FBV0gsV0FBUztBQUNYOyIsCiAgIm5hbWVzIjogW10KfQo= */\n";