export const tracerSrc = "\"use strict\";\n(() => {\n  // node_modules/preact/dist/preact.module.js\n  var n;\n  var l;\n  var u;\n  var t;\n  var i;\n  var o;\n  var r;\n  var f;\n  var e;\n  var c;\n  var s;\n  var a;\n  var h = {};\n  var v = [];\n  var p = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n  var y = Array.isArray;\n  function d(n2, l3) {\n    for (var u3 in l3) n2[u3] = l3[u3];\n    return n2;\n  }\n  function w(n2) {\n    n2 && n2.parentNode && n2.parentNode.removeChild(n2);\n  }\n  function _(l3, u3, t3) {\n    var i3, o3, r3, f3 = {};\n    for (r3 in u3) \"key\" == r3 ? i3 = u3[r3] : \"ref\" == r3 ? o3 = u3[r3] : f3[r3] = u3[r3];\n    if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : t3), \"function\" == typeof l3 && null != l3.defaultProps) for (r3 in l3.defaultProps) void 0 === f3[r3] && (f3[r3] = l3.defaultProps[r3]);\n    return g(l3, f3, i3, o3, null);\n  }\n  function g(n2, t3, i3, o3, r3) {\n    var f3 = { type: n2, props: t3, key: i3, ref: o3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r3 ? ++u : r3, __i: -1, __u: 0 };\n    return null == r3 && null != l.vnode && l.vnode(f3), f3;\n  }\n  function b(n2) {\n    return n2.children;\n  }\n  function k(n2, l3) {\n    this.props = n2, this.context = l3;\n  }\n  function x(n2, l3) {\n    if (null == l3) return n2.__ ? x(n2.__, n2.__i + 1) : null;\n    for (var u3; l3 < n2.__k.length; l3++) if (null != (u3 = n2.__k[l3]) && null != u3.__e) return u3.__e;\n    return \"function\" == typeof n2.type ? x(n2) : null;\n  }\n  function C(n2) {\n    var l3, u3;\n    if (null != (n2 = n2.__) && null != n2.__c) {\n      for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++) if (null != (u3 = n2.__k[l3]) && null != u3.__e) {\n        n2.__e = n2.__c.base = u3.__e;\n        break;\n      }\n      return C(n2);\n    }\n  }\n  function M(n2) {\n    (!n2.__d && (n2.__d = true) && i.push(n2) && !P.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(P);\n  }\n  function P() {\n    var n2, u3, t3, o3, r3, e3, c3, s3;\n    for (i.sort(f); n2 = i.shift(); ) n2.__d && (u3 = i.length, o3 = void 0, e3 = (r3 = (t3 = n2).__v).__e, c3 = [], s3 = [], t3.__P && ((o3 = d({}, r3)).__v = r3.__v + 1, l.vnode && l.vnode(o3), O(t3.__P, o3, r3, t3.__n, t3.__P.namespaceURI, 32 & r3.__u ? [e3] : null, c3, null == e3 ? x(r3) : e3, !!(32 & r3.__u), s3), o3.__v = r3.__v, o3.__.__k[o3.__i] = o3, j(c3, o3, s3), o3.__e != e3 && C(o3)), i.length > u3 && i.sort(f));\n    P.__r = 0;\n  }\n  function S(n2, l3, u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, p3, y3, d3, w3, _2 = t3 && t3.__k || v, g2 = l3.length;\n    for (u3.__d = e3, $(u3, l3, _2), e3 = u3.__d, a3 = 0; a3 < g2; a3++) null != (y3 = u3.__k[a3]) && (p3 = -1 === y3.__i ? h : _2[y3.__i] || h, y3.__i = a3, O(n2, y3, p3, i3, o3, r3, f3, e3, c3, s3), d3 = y3.__e, y3.ref && p3.ref != y3.ref && (p3.ref && N(p3.ref, null, y3), s3.push(y3.ref, y3.__c || d3, y3)), null == w3 && null != d3 && (w3 = d3), 65536 & y3.__u || p3.__k === y3.__k ? e3 = I(y3, e3, n2) : \"function\" == typeof y3.type && void 0 !== y3.__d ? e3 = y3.__d : d3 && (e3 = d3.nextSibling), y3.__d = void 0, y3.__u &= -196609);\n    u3.__d = e3, u3.__e = w3;\n  }\n  function $(n2, l3, u3) {\n    var t3, i3, o3, r3, f3, e3 = l3.length, c3 = u3.length, s3 = c3, a3 = 0;\n    for (n2.__k = [], t3 = 0; t3 < e3; t3++) null != (i3 = l3[t3]) && \"boolean\" != typeof i3 && \"function\" != typeof i3 ? (r3 = t3 + a3, (i3 = n2.__k[t3] = \"string\" == typeof i3 || \"number\" == typeof i3 || \"bigint\" == typeof i3 || i3.constructor == String ? g(null, i3, null, null, null) : y(i3) ? g(b, { children: i3 }, null, null, null) : void 0 === i3.constructor && i3.__b > 0 ? g(i3.type, i3.props, i3.key, i3.ref ? i3.ref : null, i3.__v) : i3).__ = n2, i3.__b = n2.__b + 1, o3 = null, -1 !== (f3 = i3.__i = L(i3, u3, r3, s3)) && (s3--, (o3 = u3[f3]) && (o3.__u |= 131072)), null == o3 || null === o3.__v ? (-1 == f3 && a3--, \"function\" != typeof i3.type && (i3.__u |= 65536)) : f3 !== r3 && (f3 == r3 - 1 ? a3-- : f3 == r3 + 1 ? a3++ : (f3 > r3 ? a3-- : a3++, i3.__u |= 65536))) : i3 = n2.__k[t3] = null;\n    if (s3) for (t3 = 0; t3 < c3; t3++) null != (o3 = u3[t3]) && 0 == (131072 & o3.__u) && (o3.__e == n2.__d && (n2.__d = x(o3)), V(o3, o3));\n  }\n  function I(n2, l3, u3) {\n    var t3, i3;\n    if (\"function\" == typeof n2.type) {\n      for (t3 = n2.__k, i3 = 0; t3 && i3 < t3.length; i3++) t3[i3] && (t3[i3].__ = n2, l3 = I(t3[i3], l3, u3));\n      return l3;\n    }\n    n2.__e != l3 && (l3 && n2.type && !u3.contains(l3) && (l3 = x(n2)), u3.insertBefore(n2.__e, l3 || null), l3 = n2.__e);\n    do {\n      l3 = l3 && l3.nextSibling;\n    } while (null != l3 && 8 === l3.nodeType);\n    return l3;\n  }\n  function L(n2, l3, u3, t3) {\n    var i3 = n2.key, o3 = n2.type, r3 = u3 - 1, f3 = u3 + 1, e3 = l3[u3];\n    if (null === e3 || e3 && i3 == e3.key && o3 === e3.type && 0 == (131072 & e3.__u)) return u3;\n    if (t3 > (null != e3 && 0 == (131072 & e3.__u) ? 1 : 0)) for (; r3 >= 0 || f3 < l3.length; ) {\n      if (r3 >= 0) {\n        if ((e3 = l3[r3]) && 0 == (131072 & e3.__u) && i3 == e3.key && o3 === e3.type) return r3;\n        r3--;\n      }\n      if (f3 < l3.length) {\n        if ((e3 = l3[f3]) && 0 == (131072 & e3.__u) && i3 == e3.key && o3 === e3.type) return f3;\n        f3++;\n      }\n    }\n    return -1;\n  }\n  function T(n2, l3, u3) {\n    \"-\" === l3[0] ? n2.setProperty(l3, null == u3 ? \"\" : u3) : n2[l3] = null == u3 ? \"\" : \"number\" != typeof u3 || p.test(l3) ? u3 : u3 + \"px\";\n  }\n  function A(n2, l3, u3, t3, i3) {\n    var o3;\n    n: if (\"style\" === l3) if (\"string\" == typeof u3) n2.style.cssText = u3;\n    else {\n      if (\"string\" == typeof t3 && (n2.style.cssText = t3 = \"\"), t3) for (l3 in t3) u3 && l3 in u3 || T(n2.style, l3, \"\");\n      if (u3) for (l3 in u3) t3 && u3[l3] === t3[l3] || T(n2.style, l3, u3[l3]);\n    }\n    else if (\"o\" === l3[0] && \"n\" === l3[1]) o3 = l3 !== (l3 = l3.replace(/(PointerCapture)$|Capture$/i, \"$1\")), l3 = l3.toLowerCase() in n2 || \"onFocusOut\" === l3 || \"onFocusIn\" === l3 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + o3] = u3, u3 ? t3 ? u3.u = t3.u : (u3.u = e, n2.addEventListener(l3, o3 ? s : c, o3)) : n2.removeEventListener(l3, o3 ? s : c, o3);\n    else {\n      if (\"http://www.w3.org/2000/svg\" == i3) l3 = l3.replace(/xlink(H|:h)/, \"h\").replace(/sName$/, \"s\");\n      else if (\"width\" != l3 && \"height\" != l3 && \"href\" != l3 && \"list\" != l3 && \"form\" != l3 && \"tabIndex\" != l3 && \"download\" != l3 && \"rowSpan\" != l3 && \"colSpan\" != l3 && \"role\" != l3 && \"popover\" != l3 && l3 in n2) try {\n        n2[l3] = null == u3 ? \"\" : u3;\n        break n;\n      } catch (n3) {\n      }\n      \"function\" == typeof u3 || (null == u3 || false === u3 && \"-\" !== l3[4] ? n2.removeAttribute(l3) : n2.setAttribute(l3, \"popover\" == l3 && 1 == u3 ? \"\" : u3));\n    }\n  }\n  function F(n2) {\n    return function(u3) {\n      if (this.l) {\n        var t3 = this.l[u3.type + n2];\n        if (null == u3.t) u3.t = e++;\n        else if (u3.t < t3.u) return;\n        return t3(l.event ? l.event(u3) : u3);\n      }\n    };\n  }\n  function O(n2, u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, h3, v3, p3, w3, _2, g2, m2, x2, C3, M2, P2, $2, I2, H, L2, T3 = u3.type;\n    if (void 0 !== u3.constructor) return null;\n    128 & t3.__u && (c3 = !!(32 & t3.__u), r3 = [e3 = u3.__e = t3.__e]), (a3 = l.__b) && a3(u3);\n    n: if (\"function\" == typeof T3) try {\n      if (m2 = u3.props, x2 = \"prototype\" in T3 && T3.prototype.render, C3 = (a3 = T3.contextType) && i3[a3.__c], M2 = a3 ? C3 ? C3.props.value : a3.__ : i3, t3.__c ? g2 = (h3 = u3.__c = t3.__c).__ = h3.__E : (x2 ? u3.__c = h3 = new T3(m2, M2) : (u3.__c = h3 = new k(m2, M2), h3.constructor = T3, h3.render = q), C3 && C3.sub(h3), h3.props = m2, h3.state || (h3.state = {}), h3.context = M2, h3.__n = i3, v3 = h3.__d = true, h3.__h = [], h3._sb = []), x2 && null == h3.__s && (h3.__s = h3.state), x2 && null != T3.getDerivedStateFromProps && (h3.__s == h3.state && (h3.__s = d({}, h3.__s)), d(h3.__s, T3.getDerivedStateFromProps(m2, h3.__s))), p3 = h3.props, w3 = h3.state, h3.__v = u3, v3) x2 && null == T3.getDerivedStateFromProps && null != h3.componentWillMount && h3.componentWillMount(), x2 && null != h3.componentDidMount && h3.__h.push(h3.componentDidMount);\n      else {\n        if (x2 && null == T3.getDerivedStateFromProps && m2 !== p3 && null != h3.componentWillReceiveProps && h3.componentWillReceiveProps(m2, M2), !h3.__e && (null != h3.shouldComponentUpdate && false === h3.shouldComponentUpdate(m2, h3.__s, M2) || u3.__v === t3.__v)) {\n          for (u3.__v !== t3.__v && (h3.props = m2, h3.state = h3.__s, h3.__d = false), u3.__e = t3.__e, u3.__k = t3.__k, u3.__k.some(function(n3) {\n            n3 && (n3.__ = u3);\n          }), P2 = 0; P2 < h3._sb.length; P2++) h3.__h.push(h3._sb[P2]);\n          h3._sb = [], h3.__h.length && f3.push(h3);\n          break n;\n        }\n        null != h3.componentWillUpdate && h3.componentWillUpdate(m2, h3.__s, M2), x2 && null != h3.componentDidUpdate && h3.__h.push(function() {\n          h3.componentDidUpdate(p3, w3, _2);\n        });\n      }\n      if (h3.context = M2, h3.props = m2, h3.__P = n2, h3.__e = false, $2 = l.__r, I2 = 0, x2) {\n        for (h3.state = h3.__s, h3.__d = false, $2 && $2(u3), a3 = h3.render(h3.props, h3.state, h3.context), H = 0; H < h3._sb.length; H++) h3.__h.push(h3._sb[H]);\n        h3._sb = [];\n      } else do {\n        h3.__d = false, $2 && $2(u3), a3 = h3.render(h3.props, h3.state, h3.context), h3.state = h3.__s;\n      } while (h3.__d && ++I2 < 25);\n      h3.state = h3.__s, null != h3.getChildContext && (i3 = d(d({}, i3), h3.getChildContext())), x2 && !v3 && null != h3.getSnapshotBeforeUpdate && (_2 = h3.getSnapshotBeforeUpdate(p3, w3)), S(n2, y(L2 = null != a3 && a3.type === b && null == a3.key ? a3.props.children : a3) ? L2 : [L2], u3, t3, i3, o3, r3, f3, e3, c3, s3), h3.base = u3.__e, u3.__u &= -161, h3.__h.length && f3.push(h3), g2 && (h3.__E = h3.__ = null);\n    } catch (n3) {\n      if (u3.__v = null, c3 || null != r3) {\n        for (u3.__u |= c3 ? 160 : 32; e3 && 8 === e3.nodeType && e3.nextSibling; ) e3 = e3.nextSibling;\n        r3[r3.indexOf(e3)] = null, u3.__e = e3;\n      } else u3.__e = t3.__e, u3.__k = t3.__k;\n      l.__e(n3, u3, t3);\n    }\n    else null == r3 && u3.__v === t3.__v ? (u3.__k = t3.__k, u3.__e = t3.__e) : u3.__e = z(t3.__e, u3, t3, i3, o3, r3, f3, c3, s3);\n    (a3 = l.diffed) && a3(u3);\n  }\n  function j(n2, u3, t3) {\n    u3.__d = void 0;\n    for (var i3 = 0; i3 < t3.length; i3++) N(t3[i3], t3[++i3], t3[++i3]);\n    l.__c && l.__c(u3, n2), n2.some(function(u4) {\n      try {\n        n2 = u4.__h, u4.__h = [], n2.some(function(n3) {\n          n3.call(u4);\n        });\n      } catch (n3) {\n        l.__e(n3, u4.__v);\n      }\n    });\n  }\n  function z(u3, t3, i3, o3, r3, f3, e3, c3, s3) {\n    var a3, v3, p3, d3, _2, g2, m2, b2 = i3.props, k3 = t3.props, C3 = t3.type;\n    if (\"svg\" === C3 ? r3 = \"http://www.w3.org/2000/svg\" : \"math\" === C3 ? r3 = \"http://www.w3.org/1998/Math/MathML\" : r3 || (r3 = \"http://www.w3.org/1999/xhtml\"), null != f3) {\n      for (a3 = 0; a3 < f3.length; a3++) if ((_2 = f3[a3]) && \"setAttribute\" in _2 == !!C3 && (C3 ? _2.localName === C3 : 3 === _2.nodeType)) {\n        u3 = _2, f3[a3] = null;\n        break;\n      }\n    }\n    if (null == u3) {\n      if (null === C3) return document.createTextNode(k3);\n      u3 = document.createElementNS(r3, C3, k3.is && k3), c3 && (l.__m && l.__m(t3, f3), c3 = false), f3 = null;\n    }\n    if (null === C3) b2 === k3 || c3 && u3.data === k3 || (u3.data = k3);\n    else {\n      if (f3 = f3 && n.call(u3.childNodes), b2 = i3.props || h, !c3 && null != f3) for (b2 = {}, a3 = 0; a3 < u3.attributes.length; a3++) b2[(_2 = u3.attributes[a3]).name] = _2.value;\n      for (a3 in b2) if (_2 = b2[a3], \"children\" == a3) ;\n      else if (\"dangerouslySetInnerHTML\" == a3) p3 = _2;\n      else if (!(a3 in k3)) {\n        if (\"value\" == a3 && \"defaultValue\" in k3 || \"checked\" == a3 && \"defaultChecked\" in k3) continue;\n        A(u3, a3, null, _2, r3);\n      }\n      for (a3 in k3) _2 = k3[a3], \"children\" == a3 ? d3 = _2 : \"dangerouslySetInnerHTML\" == a3 ? v3 = _2 : \"value\" == a3 ? g2 = _2 : \"checked\" == a3 ? m2 = _2 : c3 && \"function\" != typeof _2 || b2[a3] === _2 || A(u3, a3, _2, b2[a3], r3);\n      if (v3) c3 || p3 && (v3.__html === p3.__html || v3.__html === u3.innerHTML) || (u3.innerHTML = v3.__html), t3.__k = [];\n      else if (p3 && (u3.innerHTML = \"\"), S(u3, y(d3) ? d3 : [d3], t3, i3, o3, \"foreignObject\" === C3 ? \"http://www.w3.org/1999/xhtml\" : r3, f3, e3, f3 ? f3[0] : i3.__k && x(i3, 0), c3, s3), null != f3) for (a3 = f3.length; a3--; ) w(f3[a3]);\n      c3 || (a3 = \"value\", \"progress\" === C3 && null == g2 ? u3.removeAttribute(\"value\") : void 0 !== g2 && (g2 !== u3[a3] || \"progress\" === C3 && !g2 || \"option\" === C3 && g2 !== b2[a3]) && A(u3, a3, g2, b2[a3], r3), a3 = \"checked\", void 0 !== m2 && m2 !== u3[a3] && A(u3, a3, m2, b2[a3], r3));\n    }\n    return u3;\n  }\n  function N(n2, u3, t3) {\n    try {\n      if (\"function\" == typeof n2) {\n        var i3 = \"function\" == typeof n2.__u;\n        i3 && n2.__u(), i3 && null == u3 || (n2.__u = n2(u3));\n      } else n2.current = u3;\n    } catch (n3) {\n      l.__e(n3, t3);\n    }\n  }\n  function V(n2, u3, t3) {\n    var i3, o3;\n    if (l.unmount && l.unmount(n2), (i3 = n2.ref) && (i3.current && i3.current !== n2.__e || N(i3, null, u3)), null != (i3 = n2.__c)) {\n      if (i3.componentWillUnmount) try {\n        i3.componentWillUnmount();\n      } catch (n3) {\n        l.__e(n3, u3);\n      }\n      i3.base = i3.__P = null;\n    }\n    if (i3 = n2.__k) for (o3 = 0; o3 < i3.length; o3++) i3[o3] && V(i3[o3], u3, t3 || \"function\" != typeof n2.type);\n    t3 || w(n2.__e), n2.__c = n2.__ = n2.__e = n2.__d = void 0;\n  }\n  function q(n2, l3, u3) {\n    return this.constructor(n2, u3);\n  }\n  function B(u3, t3, i3) {\n    var o3, r3, f3, e3;\n    l.__ && l.__(u3, t3), r3 = (o3 = \"function\" == typeof i3) ? null : i3 && i3.__k || t3.__k, f3 = [], e3 = [], O(t3, u3 = (!o3 && i3 || t3).__k = _(b, null, [u3]), r3 || h, h, t3.namespaceURI, !o3 && i3 ? [i3] : r3 ? null : t3.firstChild ? n.call(t3.childNodes) : null, f3, !o3 && i3 ? i3 : r3 ? r3.__e : t3.firstChild, o3, e3), j(f3, u3, e3);\n  }\n  n = v.slice, l = { __e: function(n2, l3, u3, t3) {\n    for (var i3, o3, r3; l3 = l3.__; ) if ((i3 = l3.__c) && !i3.__) try {\n      if ((o3 = i3.constructor) && null != o3.getDerivedStateFromError && (i3.setState(o3.getDerivedStateFromError(n2)), r3 = i3.__d), null != i3.componentDidCatch && (i3.componentDidCatch(n2, t3 || {}), r3 = i3.__d), r3) return i3.__E = i3;\n    } catch (l4) {\n      n2 = l4;\n    }\n    throw n2;\n  } }, u = 0, t = function(n2) {\n    return null != n2 && null == n2.constructor;\n  }, k.prototype.setState = function(n2, l3) {\n    var u3;\n    u3 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = d({}, this.state), \"function\" == typeof n2 && (n2 = n2(d({}, u3), this.props)), n2 && d(u3, n2), null != n2 && this.__v && (l3 && this._sb.push(l3), M(this));\n  }, k.prototype.forceUpdate = function(n2) {\n    this.__v && (this.__e = true, n2 && this.__h.push(n2), M(this));\n  }, k.prototype.render = b, i = [], r = \"function\" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n2, l3) {\n    return n2.__v.__b - l3.__v.__b;\n  }, P.__r = 0, e = 0, c = F(false), s = F(true), a = 0;\n\n  // node_modules/preact/hooks/dist/hooks.module.js\n  var t2;\n  var r2;\n  var u2;\n  var i2;\n  var o2 = 0;\n  var f2 = [];\n  var c2 = l;\n  var e2 = c2.__b;\n  var a2 = c2.__r;\n  var v2 = c2.diffed;\n  var l2 = c2.__c;\n  var m = c2.unmount;\n  var s2 = c2.__;\n  function d2(n2, t3) {\n    c2.__h && c2.__h(r2, n2, o2 || t3), o2 = 0;\n    var u3 = r2.__H || (r2.__H = { __: [], __h: [] });\n    return n2 >= u3.__.length && u3.__.push({}), u3.__[n2];\n  }\n  function h2(n2) {\n    return o2 = 1, p2(D, n2);\n  }\n  function p2(n2, u3, i3) {\n    var o3 = d2(t2++, 2);\n    if (o3.t = n2, !o3.__c && (o3.__ = [i3 ? i3(u3) : D(void 0, u3), function(n3) {\n      var t3 = o3.__N ? o3.__N[0] : o3.__[0], r3 = o3.t(t3, n3);\n      t3 !== r3 && (o3.__N = [r3, o3.__[1]], o3.__c.setState({}));\n    }], o3.__c = r2, !r2.u)) {\n      var f3 = function(n3, t3, r3) {\n        if (!o3.__c.__H) return true;\n        var u4 = o3.__c.__H.__.filter(function(n4) {\n          return !!n4.__c;\n        });\n        if (u4.every(function(n4) {\n          return !n4.__N;\n        })) return !c3 || c3.call(this, n3, t3, r3);\n        var i4 = false;\n        return u4.forEach(function(n4) {\n          if (n4.__N) {\n            var t4 = n4.__[0];\n            n4.__ = n4.__N, n4.__N = void 0, t4 !== n4.__[0] && (i4 = true);\n          }\n        }), !(!i4 && o3.__c.props === n3) && (!c3 || c3.call(this, n3, t3, r3));\n      };\n      r2.u = true;\n      var c3 = r2.shouldComponentUpdate, e3 = r2.componentWillUpdate;\n      r2.componentWillUpdate = function(n3, t3, r3) {\n        if (this.__e) {\n          var u4 = c3;\n          c3 = void 0, f3(n3, t3, r3), c3 = u4;\n        }\n        e3 && e3.call(this, n3, t3, r3);\n      }, r2.shouldComponentUpdate = f3;\n    }\n    return o3.__N || o3.__;\n  }\n  function y2(n2, u3) {\n    var i3 = d2(t2++, 3);\n    !c2.__s && C2(i3.__H, u3) && (i3.__ = n2, i3.i = u3, r2.__H.__h.push(i3));\n  }\n  function A2(n2) {\n    return o2 = 5, T2(function() {\n      return { current: n2 };\n    }, []);\n  }\n  function T2(n2, r3) {\n    var u3 = d2(t2++, 7);\n    return C2(u3.__H, r3) && (u3.__ = n2(), u3.__H = r3, u3.__h = n2), u3.__;\n  }\n  function j2() {\n    for (var n2; n2 = f2.shift(); ) if (n2.__P && n2.__H) try {\n      n2.__H.__h.forEach(z2), n2.__H.__h.forEach(B2), n2.__H.__h = [];\n    } catch (t3) {\n      n2.__H.__h = [], c2.__e(t3, n2.__v);\n    }\n  }\n  c2.__b = function(n2) {\n    r2 = null, e2 && e2(n2);\n  }, c2.__ = function(n2, t3) {\n    n2 && t3.__k && t3.__k.__m && (n2.__m = t3.__k.__m), s2 && s2(n2, t3);\n  }, c2.__r = function(n2) {\n    a2 && a2(n2), t2 = 0;\n    var i3 = (r2 = n2.__c).__H;\n    i3 && (u2 === r2 ? (i3.__h = [], r2.__h = [], i3.__.forEach(function(n3) {\n      n3.__N && (n3.__ = n3.__N), n3.i = n3.__N = void 0;\n    })) : (i3.__h.forEach(z2), i3.__h.forEach(B2), i3.__h = [], t2 = 0)), u2 = r2;\n  }, c2.diffed = function(n2) {\n    v2 && v2(n2);\n    var t3 = n2.__c;\n    t3 && t3.__H && (t3.__H.__h.length && (1 !== f2.push(t3) && i2 === c2.requestAnimationFrame || ((i2 = c2.requestAnimationFrame) || w2)(j2)), t3.__H.__.forEach(function(n3) {\n      n3.i && (n3.__H = n3.i), n3.i = void 0;\n    })), u2 = r2 = null;\n  }, c2.__c = function(n2, t3) {\n    t3.some(function(n3) {\n      try {\n        n3.__h.forEach(z2), n3.__h = n3.__h.filter(function(n4) {\n          return !n4.__ || B2(n4);\n        });\n      } catch (r3) {\n        t3.some(function(n4) {\n          n4.__h && (n4.__h = []);\n        }), t3 = [], c2.__e(r3, n3.__v);\n      }\n    }), l2 && l2(n2, t3);\n  }, c2.unmount = function(n2) {\n    m && m(n2);\n    var t3, r3 = n2.__c;\n    r3 && r3.__H && (r3.__H.__.forEach(function(n3) {\n      try {\n        z2(n3);\n      } catch (n4) {\n        t3 = n4;\n      }\n    }), r3.__H = void 0, t3 && c2.__e(t3, r3.__v));\n  };\n  var k2 = \"function\" == typeof requestAnimationFrame;\n  function w2(n2) {\n    var t3, r3 = function() {\n      clearTimeout(u3), k2 && cancelAnimationFrame(t3), setTimeout(n2);\n    }, u3 = setTimeout(r3, 100);\n    k2 && (t3 = requestAnimationFrame(r3));\n  }\n  function z2(n2) {\n    var t3 = r2, u3 = n2.__c;\n    \"function\" == typeof u3 && (n2.__c = void 0, u3()), r2 = t3;\n  }\n  function B2(n2) {\n    var t3 = r2;\n    n2.__c = n2.__(), r2 = t3;\n  }\n  function C2(n2, t3) {\n    return !n2 || n2.length !== t3.length || t3.some(function(t4, r3) {\n      return t4 !== n2[r3];\n    });\n  }\n  function D(n2, t3) {\n    return \"function\" == typeof t3 ? t3(n2) : t3;\n  }\n\n  // src/tracer/hooks.ts\n  function useDebouncedCallback(callback, delay) {\n    const timeoutIdRef = A2(void 0);\n    const debouncedCallback = (...args) => {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n      timeoutIdRef.current = window.setTimeout(() => {\n        callback(...args);\n      }, delay);\n    };\n    y2(() => {\n      return () => {\n        if (timeoutIdRef.current) {\n          clearTimeout(timeoutIdRef.current);\n        }\n      };\n    }, []);\n    return debouncedCallback;\n  }\n\n  // src/tracer/i18n.tsx\n  var numberFormat = new Intl.NumberFormat(\"en-US\");\n  var Integer = ({ value }) => /* @__PURE__ */ _(b, null, numberFormat.format(value));\n\n  // src/tracer/node.tsx\n  var RANGE_COLORS = [\n    { bg: \"#c1e7ff\", fg: \"#000\" },\n    { bg: \"#abd2ec\", fg: \"#000\" },\n    { bg: \"#94bed9\", fg: \"#000\" },\n    { bg: \"#7faac6\", fg: \"#000\" },\n    { bg: \"#6996b3\", fg: \"#fff\" },\n    { bg: \"#5383a1\", fg: \"#fff\" },\n    { bg: \"#3d708f\", fg: \"#fff\" },\n    { bg: \"#255e7e\", fg: \"#fff\" }\n  ];\n  var Children = ({ scoreBy, nodes, epoch }) => {\n    if (nodes.length === 0) {\n      return null;\n    }\n    let nextScoreBy = scoreBy;\n    if (scoreBy.field !== \"tokens\") {\n      let max = nodes[0][scoreBy.field];\n      let min = nodes[0][scoreBy.field];\n      for (let i3 = 1; i3 < nodes.length; i3++) {\n        max = Math.max(max, nodes[i3][scoreBy.field]);\n        min = Math.max(min, nodes[i3][scoreBy.field]);\n      }\n      nextScoreBy = { field: scoreBy.field, max, min };\n    }\n    return /* @__PURE__ */ _(\"div\", { className: \"node-children\" }, nodes.map((child, index) => child.type === 2 /* TextChunk */ ? /* @__PURE__ */ _(TextNode, { scoreBy: nextScoreBy, key: index, node: child }) : /* @__PURE__ */ _(WrapperNode, { scoreBy: nextScoreBy, key: index, node: child, epoch })));\n  };\n  var LNNodeStats = ({ node }) => /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Used Tokens: \", /* @__PURE__ */ _(Integer, { value: node.tokens }), \" / \", \"Priority: \", node.priority === Number.MAX_SAFE_INTEGER ? \"MAX\" : /* @__PURE__ */ _(Integer, { value: node.priority }));\n  var LMNode = ({ scoreBy, node, children, ...attrs }) => {\n    let step = 0;\n    if (scoreBy.max !== scoreBy.min) {\n      const pct = (node[scoreBy.field] - scoreBy.min) / (scoreBy.max - scoreBy.min);\n      step = Math.round((RANGE_COLORS.length - 1) * pct);\n    }\n    return /* @__PURE__ */ _(\"div\", { ...attrs, className: `node ${attrs.className || \"\"}`, style: { backgroundColor: RANGE_COLORS[step].bg, color: RANGE_COLORS[step].fg } }, children);\n  };\n  var TextNode = ({ scoreBy, node }) => {\n    return /* @__PURE__ */ _(LMNode, { node, scoreBy, tabIndex: 0, className: \"node-text\" }, /* @__PURE__ */ _(LNNodeStats, { node }), /* @__PURE__ */ _(\"div\", { className: \"node-content\" }, node.value));\n  };\n  var WrapperNode = ({ scoreBy, node, epoch }) => {\n    const [collapsed, setCollapsed] = h2(false);\n    const epochIndex = EPOCHS.findIndex((e3) => e3.elements.some((e4) => e4.id === node.id));\n    if (epochIndex === void 0) {\n      throw new Error(`epoch not found for ${node.id}`);\n    }\n    const myEpoch = EPOCHS[epochIndex];\n    const thisEpoch = EPOCHS.at(epoch);\n    const tokenBudget = myEpoch.elements.find((e3) => e3.id === node.id).tokenBudget;\n    const tag = node.type === 1 /* ChatMessage */ ? node.name || node.role.slice(0, 1).toUpperCase() + node.role.slice(1) + \"Message\" : node.name;\n    const className = epochIndex === epoch ? \"new-in-epoch\" : epoch < epochIndex ? \"before-epoch\" : \"\";\n    return /* @__PURE__ */ _(LMNode, { node, scoreBy, className }, /* @__PURE__ */ _(LNNodeStats, { node }), /* @__PURE__ */ _(\"div\", { className: \"node-content node-toggler\", onClick: () => setCollapsed((v3) => !v3) }, /* @__PURE__ */ _(\"span\", null, thisEpoch?.inNode === node.id ? \"\\u{1F3C3} \" : \"\", `<${tag}>`), /* @__PURE__ */ _(\"span\", { className: \"indicator\" }, collapsed ? \"[+]\" : \"[-]\")), epoch === epochIndex && /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Token Budget: \", /* @__PURE__ */ _(Integer, { value: tokenBudget })), thisEpoch?.inNode === node.id && /* @__PURE__ */ _(\"div\", { className: \"node-stats\" }, \"Rendering flexGrow=\", thisEpoch.flexValue, /* @__PURE__ */ _(\"br\", null), /* @__PURE__ */ _(\"br\", null), \"Splitting \", thisEpoch.reservedTokens ? `${thisEpoch.tokenBudget} - ${thisEpoch.reservedTokens} (reserved) = ` : \"\", /* @__PURE__ */ _(Integer, { value: thisEpoch.tokenBudget }), \" tokens among \", thisEpoch.elements.length, \" elements\"), !collapsed && /* @__PURE__ */ _(Children, { nodes: node.children, scoreBy, epoch }));\n  };\n  var Root = ({ scoreBy, node, epoch }) => {\n    let score;\n    if (scoreBy === \"tokens\") {\n      score = { field: \"tokens\", max: node.tokens, min: 0 };\n    } else {\n      score = { field: \"priority\", max: node.priority, min: node.priority };\n    }\n    return /* @__PURE__ */ _(WrapperNode, { scoreBy: score, node, epoch });\n  };\n\n  // src/tracer/index.tsx\n  var SliderWithInputControl = ({ label, value, onChange, min, max }) => {\n    const handleSliderChange = (event) => {\n      onChange(event.target.valueAsNumber);\n    };\n    const id = `number-slider-${Math.random()}`;\n    return /* @__PURE__ */ _(\"div\", { className: \"controls-slider\" }, /* @__PURE__ */ _(\"label\", { htmlFor: id }, label), /* @__PURE__ */ _(\n      \"input\",\n      {\n        id,\n        type: \"range\",\n        min,\n        max,\n        value,\n        onInput: handleSliderChange\n      }\n    ), /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"number\",\n        min,\n        value,\n        onInput: handleSliderChange,\n        onChange: handleSliderChange\n      }\n    ));\n  };\n  var ScoreByControl = ({ scoreBy, onScoreByChange }) => {\n    const handleScoreByChange = (event) => {\n      const newScoreBy = event.target.value;\n      onScoreByChange(newScoreBy);\n    };\n    return /* @__PURE__ */ _(\"div\", { className: \"controls-scoreby\" }, \"Visualize by\", /* @__PURE__ */ _(\"label\", null, /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"radio\",\n        name: \"scoreBy\",\n        value: \"tokens\",\n        checked: scoreBy === \"tokens\",\n        onChange: handleScoreByChange\n      }\n    ), \"Tokens\"), /* @__PURE__ */ _(\"label\", null, /* @__PURE__ */ _(\n      \"input\",\n      {\n        type: \"radio\",\n        name: \"scoreBy\",\n        value: \"priority\",\n        checked: scoreBy === \"priority\",\n        onChange: handleScoreByChange\n      }\n    ), \"Priority\"));\n  };\n  var App = () => {\n    const [tokens, setTokens] = h2(DEFAULT_TOKENS);\n    const [epoch, setEpoch] = h2(EPOCHS.length);\n    const [model, setModel] = h2(DEFAULT_MODEL);\n    const [scoreBy, setScoreBy] = h2(\"tokens\");\n    const [activeTab, setActiveTab] = h2(\"epoch\");\n    const regenModel = useDebouncedCallback(async (tokens2) => {\n      if (tokens2 === DEFAULT_TOKENS) {\n        return DEFAULT_MODEL;\n      }\n      const response = await fetch(`${SERVER_ADDRESS}regen?n=${tokens2}`);\n      const newModel = await response.json();\n      setModel(newModel);\n    }, 100);\n    const handleTokensChange = (newTokens) => {\n      setTokens(newTokens);\n      regenModel(newTokens);\n      setEpoch(EPOCHS.length);\n    };\n    return /* @__PURE__ */ _(\"div\", { className: \"app\" }, /* @__PURE__ */ _(\"div\", { className: \"controls\" }, /* @__PURE__ */ _(\"div\", { className: \"tabs\" }, /* @__PURE__ */ _(\"div\", { className: `tab ${activeTab === \"epoch\" ? \"active\" : \"\"}`, onClick: () => setActiveTab(\"epoch\") }, \"View Order\"), /* @__PURE__ */ _(\"div\", { className: `tab ${activeTab === \"tokens\" ? \"active\" : \"\"}`, onClick: () => setActiveTab(\"tokens\") }, \"Change Token Budget\")), /* @__PURE__ */ _(\"div\", { className: `tab-content ${activeTab === \"epoch\" ? \"active\" : \"\"}` }, /* @__PURE__ */ _(SliderWithInputControl, { label: \"Render Epoch\", value: epoch, onChange: setEpoch, min: 0, max: EPOCHS.length })), /* @__PURE__ */ _(\"div\", { className: `tab-content ${activeTab === \"tokens\" ? \"active\" : \"\"}` }, /* @__PURE__ */ _(SliderWithInputControl, { label: \"Token Budget\", value: tokens, onChange: handleTokensChange, min: 0, max: DEFAULT_TOKENS * 2 }))), /* @__PURE__ */ _(\"div\", { className: \"control-description\" }, activeTab === \"tokens\" ? /* @__PURE__ */ _(\"p\", null, \"Token changes here will prune elements and re-render 'pure' ones, but the entire prompt is not being re-rendered\") : /* @__PURE__ */ _(\"p\", null, \"Changing the render epoch lets you see the order in which elements are rendered and how the token budget is allocated.\"), /* @__PURE__ */ _(\"div\", { className: \"controls-stats\" }, /* @__PURE__ */ _(\"span\", null, \"Used \", /* @__PURE__ */ _(Integer, { value: model.container.tokens }), \"/\", /* @__PURE__ */ _(Integer, { value: model.budget }), \" tokens\"), /* @__PURE__ */ _(\"span\", null, \"Removed \", /* @__PURE__ */ _(Integer, { value: model.removed }), \" nodes\"), /* @__PURE__ */ _(ScoreByControl, { scoreBy, onScoreByChange: setScoreBy }))), /* @__PURE__ */ _(Root, { node: model.container, scoreBy, epoch }));\n  };\n  B(/* @__PURE__ */ _(App, null), document.body);\n})();\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvY29uc3RhbnRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL3V0aWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvb3B0aW9ucy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9jcmVhdGUtZWxlbWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9jb21wb25lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvZGlmZi9wcm9wcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9jcmVhdGUtY29udGV4dC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9kaWZmL2NoaWxkcmVuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2RpZmYvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvcmVuZGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2Nsb25lLWVsZW1lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvZGlmZi9jYXRjaC1lcnJvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJlYWN0L2hvb2tzL3NyYy9pbmRleC5qcyIsICIuLi9zcmMvdHJhY2VyL2hvb2tzLnRzIiwgIi4uL3NyYy90cmFjZXIvaTE4bi50c3giLCAiLi4vc3JjL3RyYWNlci9ub2RlLnRzeCIsICIuLi9zcmMvdHJhY2VyL2luZGV4LnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqIE5vcm1hbCBoeWRyYXRpb24gdGhhdCBhdHRhY2hlcyB0byBhIERPTSB0cmVlIGJ1dCBkb2VzIG5vdCBkaWZmIGl0LiAqL1xuZXhwb3J0IGNvbnN0IE1PREVfSFlEUkFURSA9IDEgPDwgNTtcbi8qKiBTaWduaWZpZXMgdGhpcyBWTm9kZSBzdXNwZW5kZWQgb24gdGhlIHByZXZpb3VzIHJlbmRlciAqL1xuZXhwb3J0IGNvbnN0IE1PREVfU1VTUEVOREVEID0gMSA8PCA3O1xuLyoqIEluZGljYXRlcyB0aGF0IHRoaXMgbm9kZSBuZWVkcyB0byBiZSBpbnNlcnRlZCB3aGlsZSBwYXRjaGluZyBjaGlsZHJlbiAqL1xuZXhwb3J0IGNvbnN0IElOU0VSVF9WTk9ERSA9IDEgPDwgMTY7XG4vKiogSW5kaWNhdGVzIGEgVk5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB3aXRoIGFub3RoZXIgVk5vZGUgaW4gdGhlIGRpZmYgKi9cbmV4cG9ydCBjb25zdCBNQVRDSEVEID0gMSA8PCAxNztcblxuLyoqIFJlc2V0IGFsbCBtb2RlIGZsYWdzICovXG5leHBvcnQgY29uc3QgUkVTRVRfTU9ERSA9IH4oTU9ERV9IWURSQVRFIHwgTU9ERV9TVVNQRU5ERUQpO1xuXG5leHBvcnQgY29uc3QgRU1QVFlfT0JKID0gLyoqIEB0eXBlIHthbnl9ICovICh7fSk7XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSID0gW107XG5leHBvcnQgY29uc3QgSVNfTk9OX0RJTUVOU0lPTkFMID1cblx0L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtcbiIsICJpbXBvcnQgeyBFTVBUWV9BUlIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBBc3NpZ24gcHJvcGVydGllcyBmcm9tIGBwcm9wc2AgdG8gYG9iamBcbiAqIEB0ZW1wbGF0ZSBPLCBQIFRoZSBvYmogYW5kIHByb3BzIHR5cGVzXG4gKiBAcGFyYW0ge099IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0b1xuICogQHBhcmFtIHtQfSBwcm9wcyBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJucyB7TyAmIFB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNoYW5nZSB0aGUgdHlwZSBvZiBgb2JqYCB0byBiZSBgTyAmIFBgXG5cdGZvciAobGV0IGkgaW4gcHJvcHMpIG9ialtpXSA9IHByb3BzW2ldO1xuXHRyZXR1cm4gLyoqIEB0eXBlIHtPICYgUH0gKi8gKG9iaik7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgY2hpbGQgbm9kZSBmcm9tIGl0cyBwYXJlbnQgaWYgYXR0YWNoZWQuIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvclxuICogSUUxMSB3aGljaCBkb2Vzbid0IHN1cHBvcnQgYEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSgpYC4gVXNpbmcgdGhpcyBmdW5jdGlvblxuICogaXMgc21hbGxlciB0aGFuIGluY2x1ZGluZyBhIGRlZGljYXRlZCBwb2x5ZmlsbC5cbiAqIEBwYXJhbSB7cHJlYWN0LkNvbnRhaW5lck5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcblx0aWYgKG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlKSBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5cbmV4cG9ydCBjb25zdCBzbGljZSA9IEVNUFRZX0FSUi5zbGljZTtcbiIsICJpbXBvcnQgeyBfY2F0Y2hFcnJvciB9IGZyb20gJy4vZGlmZi9jYXRjaC1lcnJvcic7XG5cbi8qKlxuICogVGhlIGBvcHRpb25gIG9iamVjdCBjYW4gcG90ZW50aWFsbHkgY29udGFpbiBjYWxsYmFjayBmdW5jdGlvbnNcbiAqIHRoYXQgYXJlIGNhbGxlZCBkdXJpbmcgdmFyaW91cyBzdGFnZXMgb2Ygb3VyIHJlbmRlcmVyLiBUaGlzIGlzIHRoZVxuICogZm91bmRhdGlvbiBvbiB3aGljaCBhbGwgb3VyIGFkZG9ucyBsaWtlIGBwcmVhY3QvZGVidWdgLCBgcHJlYWN0L2NvbXBhdGAsXG4gKiBhbmQgYHByZWFjdC9ob29rc2AgYXJlIGJhc2VkIG9uLiBTZWUgdGhlIGBPcHRpb25zYCB0eXBlIGluIGBpbnRlcm5hbC5kLnRzYFxuICogZm9yIGEgZnVsbCBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb24gaG9va3MgKG1vc3QgZWRpdG9ycy9JREVzIGFsbG93IHlvdSB0b1xuICogY3RybCtjbGljayBvciBjbWQrY2xpY2sgb24gbWFjIHRoZSB0eXBlIGRlZmluaXRpb24gYmVsb3cpLlxuICogQHR5cGUge09wdGlvbnN9XG4gKi9cbmNvbnN0IG9wdGlvbnMgPSB7XG5cdF9jYXRjaEVycm9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBvcHRpb25zO1xuIiwgImltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbmxldCB2bm9kZUlkID0gMDtcblxuLyoqXG4gKiBDcmVhdGUgYW4gdmlydHVhbCBub2RlICh1c2VkIGZvciBKU1gpXG4gKiBAcGFyYW0ge1ZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudCBjb25zdHJ1Y3RvciBmb3IgdGhpc1xuICogdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm9wc10gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4nKS5Db21wb25lbnRDaGlsZHJlbj59IFtjaGlsZHJlbl0gVGhlIGNoaWxkcmVuIG9mIHRoZVxuICogdmlydHVhbCBub2RlXG4gKiBAcmV0dXJucyB7Vk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRpO1xuXHRmb3IgKGkgaW4gcHJvcHMpIHtcblx0XHRpZiAoaSA9PSAna2V5Jykga2V5ID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBpZiAoaSA9PSAncmVmJykgcmVmID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9XG5cdFx0XHRhcmd1bWVudHMubGVuZ3RoID4gMyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGNoaWxkcmVuO1xuXHR9XG5cblx0Ly8gSWYgYSBDb21wb25lbnQgVk5vZGUsIGNoZWNrIGZvciBhbmQgYXBwbHkgZGVmYXVsdFByb3BzXG5cdC8vIE5vdGU6IHR5cGUgbWF5IGJlIHVuZGVmaW5lZCBpbiBkZXZlbG9wbWVudCwgbXVzdCBuZXZlciBlcnJvciBoZXJlLlxuXHRpZiAodHlwZW9mIHR5cGUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlLmRlZmF1bHRQcm9wcyAhPSBudWxsKSB7XG5cdFx0Zm9yIChpIGluIHR5cGUuZGVmYXVsdFByb3BzKSB7XG5cdFx0XHRpZiAobm9ybWFsaXplZFByb3BzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gdHlwZS5kZWZhdWx0UHJvcHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5LCByZWYsIG51bGwpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIFZOb2RlICh1c2VkIGludGVybmFsbHkgYnkgUHJlYWN0KVxuICogQHBhcmFtIHtWTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIENvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBwcm9wcyBUaGUgcHJvcGVydGllcyBvZiB0aGlzIHZpcnR1YWwgbm9kZS5cbiAqIElmIHRoaXMgdmlydHVhbCBub2RlIHJlcHJlc2VudHMgYSB0ZXh0IG5vZGUsIHRoaXMgaXMgdGhlIHRleHQgb2YgdGhlIG5vZGUgKHN0cmluZyBvciBudW1iZXIpLlxuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBrZXkgVGhlIGtleSBmb3IgdGhpcyB2aXJ0dWFsIG5vZGUsIHVzZWQgd2hlblxuICogZGlmZmluZyBpdCBhZ2FpbnN0IGl0cyBjaGlsZHJlblxuICogQHBhcmFtIHtWTm9kZVtcInJlZlwiXX0gcmVmIFRoZSByZWYgcHJvcGVydHkgdGhhdCB3aWxsXG4gKiByZWNlaXZlIGEgcmVmZXJlbmNlIHRvIGl0cyBjcmVhdGVkIGNoaWxkXG4gKiBAcmV0dXJucyB7Vk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wcywga2V5LCByZWYsIG9yaWdpbmFsKSB7XG5cdC8vIFY4IHNlZW1zIHRvIGJlIGJldHRlciBhdCBkZXRlY3RpbmcgdHlwZSBzaGFwZXMgaWYgdGhlIG9iamVjdCBpcyBhbGxvY2F0ZWQgZnJvbSB0aGUgc2FtZSBjYWxsIHNpdGVcblx0Ly8gRG8gbm90IGlubGluZSBpbnRvIGNyZWF0ZUVsZW1lbnQgYW5kIGNvZXJjZVRvVk5vZGUhXG5cdC8qKiBAdHlwZSB7Vk5vZGV9ICovXG5cdGNvbnN0IHZub2RlID0ge1xuXHRcdHR5cGUsXG5cdFx0cHJvcHMsXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRfY2hpbGRyZW46IG51bGwsXG5cdFx0X3BhcmVudDogbnVsbCxcblx0XHRfZGVwdGg6IDAsXG5cdFx0X2RvbTogbnVsbCxcblx0XHQvLyBfbmV4dERvbSBtdXN0IGJlIGluaXRpYWxpemVkIHRvIHVuZGVmaW5lZCBiL2MgaXQgd2lsbCBldmVudHVhbGx5XG5cdFx0Ly8gYmUgc2V0IHRvIGRvbS5uZXh0U2libGluZyB3aGljaCBjYW4gcmV0dXJuIGBudWxsYCBhbmQgaXQgaXMgaW1wb3J0YW50XG5cdFx0Ly8gdG8gYmUgYWJsZSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIGFuIHVuaW5pdGlhbGl6ZWQgX25leHREb20gYW5kXG5cdFx0Ly8gYSBfbmV4dERvbSB0aGF0IGhhcyBiZWVuIHNldCB0byBgbnVsbGBcblx0XHRfbmV4dERvbTogdW5kZWZpbmVkLFxuXHRcdF9jb21wb25lbnQ6IG51bGwsXG5cdFx0Y29uc3RydWN0b3I6IHVuZGVmaW5lZCxcblx0XHRfb3JpZ2luYWw6IG9yaWdpbmFsID09IG51bGwgPyArK3Zub2RlSWQgOiBvcmlnaW5hbCxcblx0XHRfaW5kZXg6IC0xLFxuXHRcdF9mbGFnczogMFxuXHR9O1xuXG5cdC8vIE9ubHkgaW52b2tlIHRoZSB2bm9kZSBob29rIGlmIHRoaXMgd2FzICpub3QqIGEgZGlyZWN0IGNvcHk6XG5cdGlmIChvcmlnaW5hbCA9PSBudWxsICYmIG9wdGlvbnMudm5vZGUgIT0gbnVsbCkgb3B0aW9ucy52bm9kZSh2bm9kZSk7XG5cblx0cmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuXHRyZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudChwcm9wcykge1xuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0aGUgYXJndW1lbnQgaXMgYSB2YWxpZCBQcmVhY3QgVk5vZGUuXG4gKiBAcGFyYW0geyp9IHZub2RlXG4gKiBAcmV0dXJucyB7dm5vZGUgaXMgVk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkRWxlbWVudCA9IHZub2RlID0+XG5cdHZub2RlICE9IG51bGwgJiYgdm5vZGUuY29uc3RydWN0b3IgPT0gdW5kZWZpbmVkO1xuIiwgImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBkaWZmLCBjb21taXRSb290IH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuaW1wb3J0IHsgTU9ERV9IWURSQVRFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEJhc2UgQ29tcG9uZW50IGNsYXNzLiBQcm92aWRlcyBgc2V0U3RhdGUoKWAgYW5kIGBmb3JjZVVwZGF0ZSgpYCwgd2hpY2hcbiAqIHRyaWdnZXIgcmVuZGVyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgVGhlIGluaXRpYWwgY29tcG9uZW50IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgaW5pdGlhbCBjb250ZXh0IGZyb20gcGFyZW50IGNvbXBvbmVudHMnXG4gKiBnZXRDaGlsZENvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJhc2VDb21wb25lbnQocHJvcHMsIGNvbnRleHQpIHtcblx0dGhpcy5wcm9wcyA9IHByb3BzO1xuXHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xufVxuXG4vKipcbiAqIFVwZGF0ZSBjb21wb25lbnQgc3RhdGUgYW5kIHNjaGVkdWxlIGEgcmUtcmVuZGVyLlxuICogQHRoaXMge0NvbXBvbmVudH1cbiAqIEBwYXJhbSB7b2JqZWN0IHwgKChzOiBvYmplY3QsIHA6IG9iamVjdCkgPT4gb2JqZWN0KX0gdXBkYXRlIEEgaGFzaCBvZiBzdGF0ZVxuICogcHJvcGVydGllcyB0byB1cGRhdGUgd2l0aCBuZXcgdmFsdWVzIG9yIGEgZnVuY3Rpb24gdGhhdCBnaXZlbiB0aGUgY3VycmVudFxuICogc3RhdGUgYW5kIHByb3BzIHJldHVybnMgYSBuZXcgcGFydGlhbCBzdGF0ZVxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uY2UgY29tcG9uZW50IHN0YXRlIGlzXG4gKiB1cGRhdGVkXG4gKi9cbkJhc2VDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHVwZGF0ZSwgY2FsbGJhY2spIHtcblx0Ly8gb25seSBjbG9uZSBzdGF0ZSB3aGVuIGNvcHlpbmcgdG8gbmV4dFN0YXRlIHRoZSBmaXJzdCB0aW1lLlxuXHRsZXQgcztcblx0aWYgKHRoaXMuX25leHRTdGF0ZSAhPSBudWxsICYmIHRoaXMuX25leHRTdGF0ZSAhPT0gdGhpcy5zdGF0ZSkge1xuXHRcdHMgPSB0aGlzLl9uZXh0U3RhdGU7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZSA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZSk7XG5cdH1cblxuXHRpZiAodHlwZW9mIHVwZGF0ZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gU29tZSBsaWJyYXJpZXMgbGlrZSBgaW1tZXJgIG1hcmsgdGhlIGN1cnJlbnQgc3RhdGUgYXMgcmVhZG9ubHksXG5cdFx0Ly8gcHJldmVudGluZyB1cyBmcm9tIG11dGF0aW5nIGl0LCBzbyB3ZSBuZWVkIHRvIGNsb25lIGl0LiBTZWUgIzI3MTZcblx0XHR1cGRhdGUgPSB1cGRhdGUoYXNzaWduKHt9LCBzKSwgdGhpcy5wcm9wcyk7XG5cdH1cblxuXHRpZiAodXBkYXRlKSB7XG5cdFx0YXNzaWduKHMsIHVwZGF0ZSk7XG5cdH1cblxuXHQvLyBTa2lwIHVwZGF0ZSBpZiB1cGRhdGVyIGZ1bmN0aW9uIHJldHVybmVkIG51bGxcblx0aWYgKHVwZGF0ZSA9PSBudWxsKSByZXR1cm47XG5cblx0aWYgKHRoaXMuX3Zub2RlKSB7XG5cdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLl9zdGF0ZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9XG5cdFx0ZW5xdWV1ZVJlbmRlcih0aGlzKTtcblx0fVxufTtcblxuLyoqXG4gKiBJbW1lZGlhdGVseSBwZXJmb3JtIGEgc3luY2hyb25vdXMgcmUtcmVuZGVyIG9mIHRoZSBjb21wb25lbnRcbiAqIEB0aGlzIHtDb21wb25lbnR9XG4gKiBAcGFyYW0geygpID0+IHZvaWR9IFtjYWxsYmFja10gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgY29tcG9uZW50IGlzXG4gKiByZS1yZW5kZXJlZFxuICovXG5CYXNlQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHQvLyBTZXQgcmVuZGVyIG1vZGUgc28gdGhhdCB3ZSBjYW4gZGlmZmVyZW50aWF0ZSB3aGVyZSB0aGUgcmVuZGVyIHJlcXVlc3Rcblx0XHQvLyBpcyBjb21pbmcgZnJvbS4gV2UgbmVlZCB0aGlzIGJlY2F1c2UgZm9yY2VVcGRhdGUgc2hvdWxkIG5ldmVyIGNhbGxcblx0XHQvLyBzaG91bGRDb21wb25lbnRVcGRhdGVcblx0XHR0aGlzLl9mb3JjZSA9IHRydWU7XG5cdFx0aWYgKGNhbGxiYWNrKSB0aGlzLl9yZW5kZXJDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0ZW5xdWV1ZVJlbmRlcih0aGlzKTtcblx0fVxufTtcblxuLyoqXG4gKiBBY2NlcHRzIGBwcm9wc2AgYW5kIGBzdGF0ZWAsIGFuZCByZXR1cm5zIGEgbmV3IFZpcnR1YWwgRE9NIHRyZWUgdG8gYnVpbGQuXG4gKiBWaXJ0dWFsIERPTSBpcyBnZW5lcmFsbHkgY29uc3RydWN0ZWQgdmlhIFtKU1hdKGh0dHA6Ly9qYXNvbmZvcm1hdC5jb20vd3RmLWlzLWpzeCkuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgUHJvcHMgKGVnOiBKU1ggYXR0cmlidXRlcykgcmVjZWl2ZWQgZnJvbSBwYXJlbnRcbiAqIGVsZW1lbnQvY29tcG9uZW50XG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgVGhlIGNvbXBvbmVudCdzIGN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IENvbnRleHQgb2JqZWN0LCBhcyByZXR1cm5lZCBieSB0aGUgbmVhcmVzdFxuICogYW5jZXN0b3IncyBgZ2V0Q2hpbGRDb250ZXh0KClgXG4gKiBAcmV0dXJucyB7Q29tcG9uZW50Q2hpbGRyZW4gfCB2b2lkfVxuICovXG5CYXNlQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBGcmFnbWVudDtcblxuLyoqXG4gKiBAcGFyYW0ge1ZOb2RlfSB2bm9kZVxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsfSBbY2hpbGRJbmRleF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvbVNpYmxpbmcodm5vZGUsIGNoaWxkSW5kZXgpIHtcblx0aWYgKGNoaWxkSW5kZXggPT0gbnVsbCkge1xuXHRcdC8vIFVzZSBjaGlsZEluZGV4PT1udWxsIGFzIGEgc2lnbmFsIHRvIHJlc3VtZSB0aGUgc2VhcmNoIGZyb20gdGhlIHZub2RlJ3Mgc2libGluZ1xuXHRcdHJldHVybiB2bm9kZS5fcGFyZW50XG5cdFx0XHQ/IGdldERvbVNpYmxpbmcodm5vZGUuX3BhcmVudCwgdm5vZGUuX2luZGV4ICsgMSlcblx0XHRcdDogbnVsbDtcblx0fVxuXG5cdGxldCBzaWJsaW5nO1xuXHRmb3IgKDsgY2hpbGRJbmRleCA8IHZub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuXHRcdHNpYmxpbmcgPSB2bm9kZS5fY2hpbGRyZW5bY2hpbGRJbmRleF07XG5cblx0XHRpZiAoc2libGluZyAhPSBudWxsICYmIHNpYmxpbmcuX2RvbSAhPSBudWxsKSB7XG5cdFx0XHQvLyBTaW5jZSB1cGRhdGVQYXJlbnREb21Qb2ludGVycyBrZWVwcyBfZG9tIHBvaW50ZXIgY29ycmVjdCxcblx0XHRcdC8vIHdlIGNhbiByZWx5IG9uIF9kb20gdG8gdGVsbCB1cyBpZiB0aGlzIHN1YnRyZWUgY29udGFpbnMgYVxuXHRcdFx0Ly8gcmVuZGVyZWQgRE9NIG5vZGUsIGFuZCB3aGF0IHRoZSBmaXJzdCByZW5kZXJlZCBET00gbm9kZSBpc1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcuX2RvbTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBub3QgZm91bmQgYSBET00gbm9kZSBpbiB0aGlzIHZub2RlJ3MgY2hpbGRyZW4uXG5cdC8vIFdlIG11c3QgcmVzdW1lIGZyb20gdGhpcyB2bm9kZSdzIHNpYmxpbmcgKGluIGl0J3MgcGFyZW50IF9jaGlsZHJlbiBhcnJheSlcblx0Ly8gT25seSBjbGltYiB1cCBhbmQgc2VhcmNoIHRoZSBwYXJlbnQgaWYgd2UgYXJlbid0IHNlYXJjaGluZyB0aHJvdWdoIGEgRE9NXG5cdC8vIFZOb2RlIChtZWFuaW5nIHdlIHJlYWNoZWQgdGhlIERPTSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIHZub2RlIHRoYXQgYmVnYW5cblx0Ly8gdGhlIHNlYXJjaClcblx0cmV0dXJuIHR5cGVvZiB2bm9kZS50eXBlID09ICdmdW5jdGlvbicgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG51bGw7XG59XG5cbi8qKlxuICogVHJpZ2dlciBpbi1wbGFjZSByZS1yZW5kZXJpbmcgb2YgYSBjb21wb25lbnQuXG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXHRsZXQgb2xkVk5vZGUgPSBjb21wb25lbnQuX3Zub2RlLFxuXHRcdG9sZERvbSA9IG9sZFZOb2RlLl9kb20sXG5cdFx0Y29tbWl0UXVldWUgPSBbXSxcblx0XHRyZWZRdWV1ZSA9IFtdO1xuXG5cdGlmIChjb21wb25lbnQuX3BhcmVudERvbSkge1xuXHRcdGNvbnN0IG5ld1ZOb2RlID0gYXNzaWduKHt9LCBvbGRWTm9kZSk7XG5cdFx0bmV3Vk5vZGUuX29yaWdpbmFsID0gb2xkVk5vZGUuX29yaWdpbmFsICsgMTtcblx0XHRpZiAob3B0aW9ucy52bm9kZSkgb3B0aW9ucy52bm9kZShuZXdWTm9kZSk7XG5cblx0XHRkaWZmKFxuXHRcdFx0Y29tcG9uZW50Ll9wYXJlbnREb20sXG5cdFx0XHRuZXdWTm9kZSxcblx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0Y29tcG9uZW50Ll9nbG9iYWxDb250ZXh0LFxuXHRcdFx0Y29tcG9uZW50Ll9wYXJlbnREb20ubmFtZXNwYWNlVVJJLFxuXHRcdFx0b2xkVk5vZGUuX2ZsYWdzICYgTU9ERV9IWURSQVRFID8gW29sZERvbV0gOiBudWxsLFxuXHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRvbGREb20gPT0gbnVsbCA/IGdldERvbVNpYmxpbmcob2xkVk5vZGUpIDogb2xkRG9tLFxuXHRcdFx0ISEob2xkVk5vZGUuX2ZsYWdzICYgTU9ERV9IWURSQVRFKSxcblx0XHRcdHJlZlF1ZXVlXG5cdFx0KTtcblxuXHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9IG9sZFZOb2RlLl9vcmlnaW5hbDtcblx0XHRuZXdWTm9kZS5fcGFyZW50Ll9jaGlsZHJlbltuZXdWTm9kZS5faW5kZXhdID0gbmV3Vk5vZGU7XG5cdFx0Y29tbWl0Um9vdChjb21taXRRdWV1ZSwgbmV3Vk5vZGUsIHJlZlF1ZXVlKTtcblxuXHRcdGlmIChuZXdWTm9kZS5fZG9tICE9IG9sZERvbSkge1xuXHRcdFx0dXBkYXRlUGFyZW50RG9tUG9pbnRlcnMobmV3Vk5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Vk5vZGV9IHZub2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKSB7XG5cdGlmICgodm5vZGUgPSB2bm9kZS5fcGFyZW50KSAhPSBudWxsICYmIHZub2RlLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdHZub2RlLl9kb20gPSB2bm9kZS5fY29tcG9uZW50LmJhc2UgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2hpbGQgPSB2bm9kZS5fY2hpbGRyZW5baV07XG5cdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCAmJiBjaGlsZC5fZG9tICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IGNoaWxkLl9kb207XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVuZGVyIHF1ZXVlXG4gKiBAdHlwZSB7QXJyYXk8Q29tcG9uZW50Pn1cbiAqL1xubGV0IHJlcmVuZGVyUXVldWUgPSBbXTtcblxuLypcbiAqIFRoZSB2YWx1ZSBvZiBgQ29tcG9uZW50LmRlYm91bmNlYCBtdXN0IGFzeW5jaHJvbm91c2x5IGludm9rZSB0aGUgcGFzc2VkIGluIGNhbGxiYWNrLiBJdCBpc1xuICogaW1wb3J0YW50IHRoYXQgY29udHJpYnV0b3JzIHRvIFByZWFjdCBjYW4gY29uc2lzdGVudGx5IHJlYXNvbiBhYm91dCB3aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAsIGV0Yy5cbiAqIGRvLCBhbmQgd2hlbiB0aGVpciBlZmZlY3RzIHdpbGwgYmUgYXBwbGllZC4gU2VlIHRoZSBsaW5rcyBiZWxvdyBmb3Igc29tZSBmdXJ0aGVyIHJlYWRpbmcgb24gZGVzaWduaW5nXG4gKiBhc3luY2hyb25vdXMgQVBJcy5cbiAqICogW0Rlc2lnbmluZyBBUElzIGZvciBBc3luY2hyb255XShodHRwczovL2Jsb2cuaXpzLm1lLzIwMTMvMDgvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiAqIFtDYWxsYmFja3Mgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c10oaHR0cHM6Ly9ibG9nLm9tZXRlci5jb20vMjAxMS8wNy8yNC9jYWxsYmFja3Mtc3luY2hyb25vdXMtYW5kLWFzeW5jaHJvbm91cy8pXG4gKi9cblxubGV0IHByZXZEZWJvdW5jZTtcblxuY29uc3QgZGVmZXIgPVxuXHR0eXBlb2YgUHJvbWlzZSA9PSAnZnVuY3Rpb24nXG5cdFx0PyBQcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpXG5cdFx0OiBzZXRUaW1lb3V0O1xuXG4vKipcbiAqIEVucXVldWUgYSByZXJlbmRlciBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtIHtDb21wb25lbnR9IGMgVGhlIGNvbXBvbmVudCB0byByZXJlbmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZVJlbmRlcihjKSB7XG5cdGlmIChcblx0XHQoIWMuX2RpcnR5ICYmXG5cdFx0XHQoYy5fZGlydHkgPSB0cnVlKSAmJlxuXHRcdFx0cmVyZW5kZXJRdWV1ZS5wdXNoKGMpICYmXG5cdFx0XHQhcHJvY2Vzcy5fcmVyZW5kZXJDb3VudCsrKSB8fFxuXHRcdHByZXZEZWJvdW5jZSAhPT0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZ1xuXHQpIHtcblx0XHRwcmV2RGVib3VuY2UgPSBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nO1xuXHRcdChwcmV2RGVib3VuY2UgfHwgZGVmZXIpKHByb2Nlc3MpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb21wb25lbnR9IGFcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBiXG4gKi9cbmNvbnN0IGRlcHRoU29ydCA9IChhLCBiKSA9PiBhLl92bm9kZS5fZGVwdGggLSBiLl92bm9kZS5fZGVwdGg7XG5cbi8qKiBGbHVzaCB0aGUgcmVuZGVyIHF1ZXVlIGJ5IHJlcmVuZGVyaW5nIGFsbCBxdWV1ZWQgY29tcG9uZW50cyAqL1xuZnVuY3Rpb24gcHJvY2VzcygpIHtcblx0bGV0IGM7XG5cdHJlcmVuZGVyUXVldWUuc29ydChkZXB0aFNvcnQpO1xuXHQvLyBEb24ndCB1cGRhdGUgYHJlbmRlckNvdW50YCB5ZXQuIEtlZXAgaXRzIHZhbHVlIG5vbi16ZXJvIHRvIHByZXZlbnQgdW5uZWNlc3Nhcnlcblx0Ly8gcHJvY2VzcygpIGNhbGxzIGZyb20gZ2V0dGluZyBzY2hlZHVsZWQgd2hpbGUgYHF1ZXVlYCBpcyBzdGlsbCBiZWluZyBjb25zdW1lZC5cblx0d2hpbGUgKChjID0gcmVyZW5kZXJRdWV1ZS5zaGlmdCgpKSkge1xuXHRcdGlmIChjLl9kaXJ0eSkge1xuXHRcdFx0bGV0IHJlbmRlclF1ZXVlTGVuZ3RoID0gcmVyZW5kZXJRdWV1ZS5sZW5ndGg7XG5cdFx0XHRyZW5kZXJDb21wb25lbnQoYyk7XG5cdFx0XHRpZiAocmVyZW5kZXJRdWV1ZS5sZW5ndGggPiByZW5kZXJRdWV1ZUxlbmd0aCkge1xuXHRcdFx0XHQvLyBXaGVuIGkuZS4gcmVyZW5kZXJpbmcgYSBwcm92aWRlciBhZGRpdGlvbmFsIG5ldyBpdGVtcyBjYW4gYmUgaW5qZWN0ZWQsIHdlIHdhbnQgdG9cblx0XHRcdFx0Ly8ga2VlcCB0aGUgb3JkZXIgZnJvbSB0b3AgdG8gYm90dG9tIHdpdGggdGhvc2UgbmV3IGl0ZW1zIHNvIHdlIGNhbiBoYW5kbGUgdGhlbSBpbiBhXG5cdFx0XHRcdC8vIHNpbmdsZSBwYXNzXG5cdFx0XHRcdHJlcmVuZGVyUXVldWUuc29ydChkZXB0aFNvcnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcm9jZXNzLl9yZXJlbmRlckNvdW50ID0gMDtcbn1cblxucHJvY2Vzcy5fcmVyZW5kZXJDb3VudCA9IDA7XG4iLCAiaW1wb3J0IHsgSVNfTk9OX0RJTUVOU0lPTkFMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4uL29wdGlvbnMnO1xuXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwga2V5LCB2YWx1ZSkge1xuXHRpZiAoa2V5WzBdID09PSAnLScpIHtcblx0XHRzdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlKTtcblx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0c3R5bGVba2V5XSA9ICcnO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnbnVtYmVyJyB8fCBJU19OT05fRElNRU5TSU9OQUwudGVzdChrZXkpKSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlW2tleV0gPSB2YWx1ZSArICdweCc7XG5cdH1cbn1cblxuLy8gQSBsb2dpY2FsIGNsb2NrIHRvIHNvbHZlIGlzc3VlcyBsaWtlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvaXNzdWVzLzM5MjcuXG4vLyBXaGVuIHRoZSBET00gcGVyZm9ybXMgYW4gZXZlbnQgaXQgbGVhdmVzIG1pY3JvLXRpY2tzIGluIGJldHdlZW4gYnViYmxpbmcgdXAgd2hpY2ggbWVhbnMgdGhhdFxuLy8gYW4gZXZlbnQgY2FuIHRyaWdnZXIgb24gYSBuZXdseSByZWF0ZWQgRE9NLW5vZGUgd2hpbGUgdGhlIGV2ZW50IGJ1YmJsZXMgdXAuXG4vL1xuLy8gT3JpZ2luYWxseSBpbnNwaXJlZCBieSBWdWVcbi8vIChodHRwczovL2dpdGh1Yi5jb20vdnVlanMvY29yZS9ibG9iL2NhZWI4YTY4ODExYTFiMGY3OS9wYWNrYWdlcy9ydW50aW1lLWRvbS9zcmMvbW9kdWxlcy9ldmVudHMudHMjTDkwLUwxMDEpLFxuLy8gYnV0IG1vZGlmaWVkIHRvIHVzZSBhIGxvZ2ljYWwgY2xvY2sgaW5zdGVhZCBvZiBEYXRlLm5vdygpIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgZ2V0IGF0dGFjaGVkXG4vLyBhbmQgZXZlbnRzIGdldCBkaXNwYXRjaGVkIGR1cmluZyB0aGUgc2FtZSBtaWxsaXNlY29uZC5cbi8vXG4vLyBUaGUgY2xvY2sgaXMgaW5jcmVtZW50ZWQgYWZ0ZXIgZWFjaCBuZXcgZXZlbnQgZGlzcGF0Y2guIFRoaXMgYWxsb3dzIDEgMDAwIDAwMCBuZXcgZXZlbnRzXG4vLyBwZXIgc2Vjb25kIGZvciBvdmVyIDI4MCB5ZWFycyBiZWZvcmUgdGhlIHZhbHVlIHJlYWNoZXMgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgKDIqKjUzIC0gMSkuXG5sZXQgZXZlbnRDbG9jayA9IDA7XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgdmFsdWUgb24gYSBET00gbm9kZVxuICogQHBhcmFtIHtQcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIG1vZGlmeVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHNldFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICogQHBhcmFtIHsqfSBvbGRWYWx1ZSBUaGUgb2xkIHZhbHVlIHRoZSBwcm9wZXJ0eSBoYWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZSBvciBub3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BlcnR5KGRvbSwgbmFtZSwgdmFsdWUsIG9sZFZhbHVlLCBuYW1lc3BhY2UpIHtcblx0bGV0IHVzZUNhcHR1cmU7XG5cblx0bzogaWYgKG5hbWUgPT09ICdzdHlsZScpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG5cdFx0XHRkb20uc3R5bGUuY3NzVGV4dCA9IHZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodHlwZW9mIG9sZFZhbHVlID09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGRvbS5zdHlsZS5jc3NUZXh0ID0gb2xkVmFsdWUgPSAnJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9sZFZhbHVlKSB7XG5cdFx0XHRcdGZvciAobmFtZSBpbiBvbGRWYWx1ZSkge1xuXHRcdFx0XHRcdGlmICghKHZhbHVlICYmIG5hbWUgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdFx0XHRzZXRTdHlsZShkb20uc3R5bGUsIG5hbWUsICcnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdGZvciAobmFtZSBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICghb2xkVmFsdWUgfHwgdmFsdWVbbmFtZV0gIT09IG9sZFZhbHVlW25hbWVdKSB7XG5cdFx0XHRcdFx0XHRzZXRTdHlsZShkb20uc3R5bGUsIG5hbWUsIHZhbHVlW25hbWVdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Ly8gQmVuY2htYXJrIGZvciBjb21wYXJpc29uOiBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzU3NGM5NTRiZGI5NjViOWEwMDk2NWFjNlxuXHRlbHNlIGlmIChuYW1lWzBdID09PSAnbycgJiYgbmFtZVsxXSA9PT0gJ24nKSB7XG5cdFx0dXNlQ2FwdHVyZSA9XG5cdFx0XHRuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvKFBvaW50ZXJDYXB0dXJlKSR8Q2FwdHVyZSQvaSwgJyQxJykpO1xuXG5cdFx0Ly8gSW5mZXIgY29ycmVjdCBjYXNpbmcgZm9yIERPTSBidWlsdC1pbiBldmVudHM6XG5cdFx0aWYgKFxuXHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIGluIGRvbSB8fFxuXHRcdFx0bmFtZSA9PT0gJ29uRm9jdXNPdXQnIHx8XG5cdFx0XHRuYW1lID09PSAnb25Gb2N1c0luJ1xuXHRcdClcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik7XG5cdFx0ZWxzZSBuYW1lID0gbmFtZS5zbGljZSgyKTtcblxuXHRcdGlmICghZG9tLl9saXN0ZW5lcnMpIGRvbS5fbGlzdGVuZXJzID0ge307XG5cdFx0ZG9tLl9saXN0ZW5lcnNbbmFtZSArIHVzZUNhcHR1cmVdID0gdmFsdWU7XG5cblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdGlmICghb2xkVmFsdWUpIHtcblx0XHRcdFx0dmFsdWUuX2F0dGFjaGVkID0gZXZlbnRDbG9jaztcblx0XHRcdFx0ZG9tLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHR1c2VDYXB0dXJlID8gZXZlbnRQcm94eUNhcHR1cmUgOiBldmVudFByb3h5LFxuXHRcdFx0XHRcdHVzZUNhcHR1cmVcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlLl9hdHRhY2hlZCA9IG9sZFZhbHVlLl9hdHRhY2hlZDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdHVzZUNhcHR1cmUgPyBldmVudFByb3h5Q2FwdHVyZSA6IGV2ZW50UHJveHksXG5cdFx0XHRcdHVzZUNhcHR1cmVcblx0XHRcdCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmIChuYW1lc3BhY2UgPT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJykge1xuXHRcdFx0Ly8gTm9ybWFsaXplIGluY29ycmVjdCBwcm9wIHVzYWdlIGZvciBTVkc6XG5cdFx0XHQvLyAtIHhsaW5rOmhyZWYgLyB4bGlua0hyZWYgLS0+IGhyZWYgKHhsaW5rOmhyZWYgd2FzIHJlbW92ZWQgZnJvbSBTVkcgYW5kIGlzbid0IG5lZWRlZClcblx0XHRcdC8vIC0gY2xhc3NOYW1lIC0tPiBjbGFzc1xuXHRcdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgveGxpbmsoSHw6aCkvLCAnaCcpLnJlcGxhY2UoL3NOYW1lJC8sICdzJyk7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdG5hbWUgIT0gJ3dpZHRoJyAmJlxuXHRcdFx0bmFtZSAhPSAnaGVpZ2h0JyAmJlxuXHRcdFx0bmFtZSAhPSAnaHJlZicgJiZcblx0XHRcdG5hbWUgIT0gJ2xpc3QnICYmXG5cdFx0XHRuYW1lICE9ICdmb3JtJyAmJlxuXHRcdFx0Ly8gRGVmYXVsdCB2YWx1ZSBpbiBicm93c2VycyBpcyBgLTFgIGFuZCBhbiBlbXB0eSBzdHJpbmcgaXNcblx0XHRcdC8vIGNhc3QgdG8gYDBgIGluc3RlYWRcblx0XHRcdG5hbWUgIT0gJ3RhYkluZGV4JyAmJlxuXHRcdFx0bmFtZSAhPSAnZG93bmxvYWQnICYmXG5cdFx0XHRuYW1lICE9ICdyb3dTcGFuJyAmJlxuXHRcdFx0bmFtZSAhPSAnY29sU3BhbicgJiZcblx0XHRcdG5hbWUgIT0gJ3JvbGUnICYmXG5cdFx0XHRuYW1lICE9ICdwb3BvdmVyJyAmJlxuXHRcdFx0bmFtZSBpbiBkb21cblx0XHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRvbVtuYW1lXSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuXHRcdFx0XHQvLyBsYWJlbGxlZCBicmVhayBpcyAxYiBzbWFsbGVyIGhlcmUgdGhhbiBhIHJldHVybiBzdGF0ZW1lbnQgKHNvcnJ5KVxuXHRcdFx0XHRicmVhayBvO1xuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHQvLyBhcmlhLSBhbmQgZGF0YS0gYXR0cmlidXRlcyBoYXZlIG5vIGJvb2xlYW4gcmVwcmVzZW50YXRpb24uXG5cdFx0Ly8gQSBgZmFsc2VgIHZhbHVlIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhdHRyaWJ1dGUgbm90IGJlaW5nXG5cdFx0Ly8gcHJlc2VudCwgc28gd2UgY2FuJ3QgcmVtb3ZlIGl0LiBGb3Igbm9uLWJvb2xlYW4gYXJpYVxuXHRcdC8vIGF0dHJpYnV0ZXMgd2UgY291bGQgdHJlYXQgZmFsc2UgYXMgYSByZW1vdmFsLCBidXQgdGhlXG5cdFx0Ly8gYW1vdW50IG9mIGV4Y2VwdGlvbnMgd291bGQgY29zdCB0b28gbWFueSBieXRlcy4gT24gdG9wIG9mXG5cdFx0Ly8gdGhhdCBvdGhlciBmcmFtZXdvcmtzIGdlbmVyYWxseSBzdHJpbmdpZnkgYGZhbHNlYC5cblxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Ly8gbmV2ZXIgc2VyaWFsaXplIGZ1bmN0aW9ucyBhcyBhdHRyaWJ1dGUgdmFsdWVzXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSAhPT0gZmFsc2UgfHwgbmFtZVs0XSA9PT0gJy0nKSkge1xuXHRcdFx0ZG9tLnNldEF0dHJpYnV0ZShuYW1lLCBuYW1lID09ICdwb3BvdmVyJyAmJiB2YWx1ZSA9PSB0cnVlID8gJycgOiB2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGV2ZW50IHByb3h5IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlIElzIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgY2FwdHVyZSBwaGFzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50UHJveHkodXNlQ2FwdHVyZSkge1xuXHQvKipcblx0ICogUHJveHkgYW4gZXZlbnQgdG8gaG9va2VkIGV2ZW50IGhhbmRsZXJzXG5cdCAqIEBwYXJhbSB7UHJlYWN0RXZlbnR9IGUgVGhlIGV2ZW50IG9iamVjdCBmcm9tIHRoZSBicm93c2VyXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRyZXR1cm4gZnVuY3Rpb24gKGUpIHtcblx0XHRpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG5cdFx0XHRjb25zdCBldmVudEhhbmRsZXIgPSB0aGlzLl9saXN0ZW5lcnNbZS50eXBlICsgdXNlQ2FwdHVyZV07XG5cdFx0XHRpZiAoZS5fZGlzcGF0Y2hlZCA9PSBudWxsKSB7XG5cdFx0XHRcdGUuX2Rpc3BhdGNoZWQgPSBldmVudENsb2NrKys7XG5cblx0XHRcdFx0Ly8gV2hlbiBgZS5fZGlzcGF0Y2hlZGAgaXMgc21hbGxlciB0aGFuIHRoZSB0aW1lIHdoZW4gdGhlIHRhcmdldGVkIGV2ZW50XG5cdFx0XHRcdC8vIGhhbmRsZXIgd2FzIGF0dGFjaGVkIHdlIGtub3cgd2UgaGF2ZSBidWJibGVkIHVwIHRvIGFuIGVsZW1lbnQgdGhhdCB3YXMgYWRkZWRcblx0XHRcdFx0Ly8gZHVyaW5nIHBhdGNoaW5nIHRoZSBET00uXG5cdFx0XHR9IGVsc2UgaWYgKGUuX2Rpc3BhdGNoZWQgPCBldmVudEhhbmRsZXIuX2F0dGFjaGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBldmVudEhhbmRsZXIob3B0aW9ucy5ldmVudCA/IG9wdGlvbnMuZXZlbnQoZSkgOiBlKTtcblx0XHR9XG5cdH07XG59XG5cbmNvbnN0IGV2ZW50UHJveHkgPSBjcmVhdGVFdmVudFByb3h5KGZhbHNlKTtcbmNvbnN0IGV2ZW50UHJveHlDYXB0dXJlID0gY3JlYXRlRXZlbnRQcm94eSh0cnVlKTtcbiIsICJpbXBvcnQgeyBlbnF1ZXVlUmVuZGVyIH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgbGV0IGkgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dChkZWZhdWx0VmFsdWUsIGNvbnRleHRJZCkge1xuXHRjb250ZXh0SWQgPSAnX19jQycgKyBpKys7XG5cblx0Y29uc3QgY29udGV4dCA9IHtcblx0XHRfaWQ6IGNvbnRleHRJZCxcblx0XHRfZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG5cdFx0LyoqIEB0eXBlIHtGdW5jdGlvbkNvbXBvbmVudH0gKi9cblx0XHRDb25zdW1lcihwcm9wcywgY29udGV4dFZhbHVlKSB7XG5cdFx0XHQvLyByZXR1cm4gcHJvcHMuY2hpbGRyZW4oXG5cdFx0XHQvLyBcdGNvbnRleHRbY29udGV4dElkXSA/IGNvbnRleHRbY29udGV4dElkXS5wcm9wcy52YWx1ZSA6IGRlZmF1bHRWYWx1ZVxuXHRcdFx0Ly8gKTtcblx0XHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbihjb250ZXh0VmFsdWUpO1xuXHRcdH0sXG5cdFx0LyoqIEB0eXBlIHtGdW5jdGlvbkNvbXBvbmVudH0gKi9cblx0XHRQcm92aWRlcihwcm9wcykge1xuXHRcdFx0aWYgKCF0aGlzLmdldENoaWxkQ29udGV4dCkge1xuXHRcdFx0XHQvKiogQHR5cGUge0NvbXBvbmVudFtdIHwgbnVsbH0gKi9cblx0XHRcdFx0bGV0IHN1YnMgPSBbXTtcblx0XHRcdFx0bGV0IGN0eCA9IHt9O1xuXHRcdFx0XHRjdHhbY29udGV4dElkXSA9IHRoaXM7XG5cblx0XHRcdFx0dGhpcy5nZXRDaGlsZENvbnRleHQgPSAoKSA9PiBjdHg7XG5cblx0XHRcdFx0dGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcblx0XHRcdFx0XHRzdWJzID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChfcHJvcHMpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gX3Byb3BzLnZhbHVlKSB7XG5cdFx0XHRcdFx0XHRzdWJzLnNvbWUoYyA9PiB7XG5cdFx0XHRcdFx0XHRcdGMuX2ZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0ZW5xdWV1ZVJlbmRlcihjKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLnN1YiA9IGMgPT4ge1xuXHRcdFx0XHRcdHN1YnMucHVzaChjKTtcblx0XHRcdFx0XHRsZXQgb2xkID0gYy5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKHN1YnMpIHtcblx0XHRcdFx0XHRcdFx0c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGMpLCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChvbGQpIG9sZC5jYWxsKGMpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcblx0XHR9XG5cdH07XG5cblx0Ly8gRGV2dG9vbHMgbmVlZHMgYWNjZXNzIHRvIHRoZSBjb250ZXh0IG9iamVjdCB3aGVuIGl0XG5cdC8vIGVuY291bnRlcnMgYSBQcm92aWRlci4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gc3VwcG9ydFxuXHQvLyBzZXR0aW5nIGBkaXNwbGF5TmFtZWAgb24gdGhlIGNvbnRleHQgb2JqZWN0IGluc3RlYWRcblx0Ly8gb2Ygb24gdGhlIGNvbXBvbmVudCBpdHNlbGYuIFNlZTpcblx0Ly8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2NvbnRleHQuaHRtbCNjb250ZXh0ZGlzcGxheW5hbWVcblxuXHRyZXR1cm4gKGNvbnRleHQuUHJvdmlkZXIuX2NvbnRleHRSZWYgPSBjb250ZXh0LkNvbnN1bWVyLmNvbnRleHRUeXBlID1cblx0XHRjb250ZXh0KTtcbn1cbiIsICJpbXBvcnQgeyBkaWZmLCB1bm1vdW50LCBhcHBseVJlZiB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgY3JlYXRlVk5vZGUsIEZyYWdtZW50IH0gZnJvbSAnLi4vY3JlYXRlLWVsZW1lbnQnO1xuaW1wb3J0IHsgRU1QVFlfT0JKLCBFTVBUWV9BUlIsIElOU0VSVF9WTk9ERSwgTUFUQ0hFRCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBnZXREb21TaWJsaW5nIH0gZnJvbSAnLi4vY29tcG9uZW50JztcblxuLyoqXG4gKiBEaWZmIHRoZSBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtQcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHdob3NlIGNoaWxkcmVuIGFyZSBiZWluZ1xuICogZGlmZmVkXG4gKiBAcGFyYW0ge0NvbXBvbmVudENoaWxkcmVuW119IHJlbmRlclJlc3VsdFxuICogQHBhcmFtIHtWTm9kZX0gbmV3UGFyZW50Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlXG4gKiBkaWZmJ2VkIGFnYWluc3Qgb2xkUGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7Vk5vZGV9IG9sZFBhcmVudFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlIHdob3NlIGNoaWxkcmVuIHNob3VsZCBiZVxuICogZGlmZidlZCBhZ2FpbnN0IG5ld1BhcmVudFZOb2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdCAtIG1vZGlmaWVkIGJ5XG4gKiBnZXRDaGlsZENvbnRleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgQ3VycmVudCBuYW1lc3BhY2Ugb2YgdGhlIERPTSBub2RlIChIVE1MLCBTVkcsIG9yIE1hdGhNTClcbiAqIEBwYXJhbSB7QXJyYXk8UHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PENvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50cyB3aGljaCBoYXZlIGNhbGxiYWNrc1xuICogdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7UHJlYWN0RWxlbWVudH0gb2xkRG9tIFRoZSBjdXJyZW50IGF0dGFjaGVkIERPTSBlbGVtZW50IGFueSBuZXcgZG9tXG4gKiBlbGVtZW50cyBzaG91bGQgYmUgcGxhY2VkIGFyb3VuZC4gTGlrZWx5IGBudWxsYCBvbiBmaXJzdCByZW5kZXIgKGV4Y2VwdCB3aGVuXG4gKiBoeWRyYXRpbmcpLiBDYW4gYmUgYSBzaWJsaW5nIERPTSBlbGVtZW50IHdoZW4gZGlmZmluZyBGcmFnbWVudHMgdGhhdCBoYXZlXG4gKiBzaWJsaW5ncy4gSW4gbW9zdCBjYXNlcywgaXQgc3RhcnRzIG91dCBhcyBgb2xkQ2hpbGRyZW5bMF0uX2RvbWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEBwYXJhbSB7YW55W119IHJlZlF1ZXVlIGFuIGFycmF5IG9mIGVsZW1lbnRzIG5lZWRlZCB0byBpbnZva2UgcmVmc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoaWxkcmVuKFxuXHRwYXJlbnREb20sXG5cdHJlbmRlclJlc3VsdCxcblx0bmV3UGFyZW50Vk5vZGUsXG5cdG9sZFBhcmVudFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRuYW1lc3BhY2UsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZyxcblx0cmVmUXVldWVcbikge1xuXHRsZXQgaSxcblx0XHQvKiogQHR5cGUge1ZOb2RlfSAqL1xuXHRcdG9sZFZOb2RlLFxuXHRcdC8qKiBAdHlwZSB7Vk5vZGV9ICovXG5cdFx0Y2hpbGRWTm9kZSxcblx0XHQvKiogQHR5cGUge1ByZWFjdEVsZW1lbnR9ICovXG5cdFx0bmV3RG9tLFxuXHRcdC8qKiBAdHlwZSB7UHJlYWN0RWxlbWVudH0gKi9cblx0XHRmaXJzdENoaWxkRG9tO1xuXG5cdC8vIFRoaXMgaXMgYSBjb21wcmVzc2lvbiBvZiBvbGRQYXJlbnRWTm9kZSE9bnVsbCAmJiBvbGRQYXJlbnRWTm9kZSAhPSBFTVBUWV9PQkogJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuIHx8IEVNUFRZX0FSUlxuXHQvLyBhcyBFTVBUWV9PQkouX2NoaWxkcmVuIHNob3VsZCBiZSBgdW5kZWZpbmVkYC5cblx0LyoqIEB0eXBlIHtWTm9kZVtdfSAqL1xuXHRsZXQgb2xkQ2hpbGRyZW4gPSAob2xkUGFyZW50Vk5vZGUgJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuKSB8fCBFTVBUWV9BUlI7XG5cblx0bGV0IG5ld0NoaWxkcmVuTGVuZ3RoID0gcmVuZGVyUmVzdWx0Lmxlbmd0aDtcblxuXHRuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSA9IG9sZERvbTtcblx0Y29uc3RydWN0TmV3Q2hpbGRyZW5BcnJheShuZXdQYXJlbnRWTm9kZSwgcmVuZGVyUmVzdWx0LCBvbGRDaGlsZHJlbik7XG5cdG9sZERvbSA9IG5ld1BhcmVudFZOb2RlLl9uZXh0RG9tO1xuXG5cdGZvciAoaSA9IDA7IGkgPCBuZXdDaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG5cdFx0Y2hpbGRWTm9kZSA9IG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbltpXTtcblx0XHRpZiAoY2hpbGRWTm9kZSA9PSBudWxsKSBjb250aW51ZTtcblxuXHRcdC8vIEF0IHRoaXMgcG9pbnQsIGNvbnN0cnVjdE5ld0NoaWxkcmVuQXJyYXkgaGFzIGFzc2lnbmVkIF9pbmRleCB0byBiZSB0aGVcblx0XHQvLyBtYXRjaGluZ0luZGV4IGZvciB0aGlzIFZOb2RlJ3Mgb2xkVk5vZGUgKG9yIC0xIGlmIHRoZXJlIGlzIG5vIG9sZFZOb2RlKS5cblx0XHRpZiAoY2hpbGRWTm9kZS5faW5kZXggPT09IC0xKSB7XG5cdFx0XHRvbGRWTm9kZSA9IEVNUFRZX09CSjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltjaGlsZFZOb2RlLl9pbmRleF0gfHwgRU1QVFlfT0JKO1xuXHRcdH1cblxuXHRcdC8vIFVwZGF0ZSBjaGlsZFZOb2RlLl9pbmRleCB0byBpdHMgZmluYWwgaW5kZXhcblx0XHRjaGlsZFZOb2RlLl9pbmRleCA9IGk7XG5cblx0XHQvLyBNb3JwaCB0aGUgb2xkIGVsZW1lbnQgaW50byB0aGUgbmV3IG9uZSwgYnV0IGRvbid0IGFwcGVuZCBpdCB0byB0aGUgZG9tIHlldFxuXHRcdGRpZmYoXG5cdFx0XHRwYXJlbnREb20sXG5cdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRnbG9iYWxDb250ZXh0LFxuXHRcdFx0bmFtZXNwYWNlLFxuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdG9sZERvbSxcblx0XHRcdGlzSHlkcmF0aW5nLFxuXHRcdFx0cmVmUXVldWVcblx0XHQpO1xuXG5cdFx0Ly8gQWRqdXN0IERPTSBub2Rlc1xuXHRcdG5ld0RvbSA9IGNoaWxkVk5vZGUuX2RvbTtcblx0XHRpZiAoY2hpbGRWTm9kZS5yZWYgJiYgb2xkVk5vZGUucmVmICE9IGNoaWxkVk5vZGUucmVmKSB7XG5cdFx0XHRpZiAob2xkVk5vZGUucmVmKSB7XG5cdFx0XHRcdGFwcGx5UmVmKG9sZFZOb2RlLnJlZiwgbnVsbCwgY2hpbGRWTm9kZSk7XG5cdFx0XHR9XG5cdFx0XHRyZWZRdWV1ZS5wdXNoKFxuXHRcdFx0XHRjaGlsZFZOb2RlLnJlZixcblx0XHRcdFx0Y2hpbGRWTm9kZS5fY29tcG9uZW50IHx8IG5ld0RvbSxcblx0XHRcdFx0Y2hpbGRWTm9kZVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoZmlyc3RDaGlsZERvbSA9PSBudWxsICYmIG5ld0RvbSAhPSBudWxsKSB7XG5cdFx0XHRmaXJzdENoaWxkRG9tID0gbmV3RG9tO1xuXHRcdH1cblxuXHRcdGlmIChcblx0XHRcdGNoaWxkVk5vZGUuX2ZsYWdzICYgSU5TRVJUX1ZOT0RFIHx8XG5cdFx0XHRvbGRWTm9kZS5fY2hpbGRyZW4gPT09IGNoaWxkVk5vZGUuX2NoaWxkcmVuXG5cdFx0KSB7XG5cdFx0XHRvbGREb20gPSBpbnNlcnQoY2hpbGRWTm9kZSwgb2xkRG9tLCBwYXJlbnREb20pO1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZS50eXBlID09ICdmdW5jdGlvbicgJiZcblx0XHRcdGNoaWxkVk5vZGUuX25leHREb20gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0Ly8gU2luY2UgRnJhZ21lbnRzIG9yIGNvbXBvbmVudHMgdGhhdCByZXR1cm4gRnJhZ21lbnQgbGlrZSBWTm9kZXMgY2FuXG5cdFx0XHQvLyBjb250YWluIG11bHRpcGxlIERPTSBub2RlcyBhcyB0aGUgc2FtZSBsZXZlbCwgY29udGludWUgdGhlIGRpZmYgZnJvbVxuXHRcdFx0Ly8gdGhlIHNpYmxpbmcgb2YgbGFzdCBET00gY2hpbGQgb2YgdGhpcyBjaGlsZCBWTm9kZVxuXHRcdFx0b2xkRG9tID0gY2hpbGRWTm9kZS5fbmV4dERvbTtcblx0XHR9IGVsc2UgaWYgKG5ld0RvbSkge1xuXHRcdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXHRcdH1cblxuXHRcdC8vIEVhZ2VybHkgY2xlYW51cCBfbmV4dERvbS4gV2UgZG9uJ3QgbmVlZCB0byBwZXJzaXN0IHRoZSB2YWx1ZSBiZWNhdXNlIGl0XG5cdFx0Ly8gaXMgb25seSB1c2VkIGJ5IGBkaWZmQ2hpbGRyZW5gIHRvIGRldGVybWluZSB3aGVyZSB0byByZXN1bWUgdGhlIGRpZmZcblx0XHQvLyBhZnRlciBkaWZmaW5nIENvbXBvbmVudHMgYW5kIEZyYWdtZW50cy4gT25jZSB3ZSBzdG9yZSBpdCB0aGUgbmV4dERPTVxuXHRcdC8vIGxvY2FsIHZhciwgd2UgY2FuIGNsZWFuIHVwIHRoZSBwcm9wZXJ0eS4gQWxzbyBwcmV2ZW50cyB1cyBoYW5naW5nIG9uIHRvXG5cdFx0Ly8gRE9NIG5vZGVzIHRoYXQgbWF5IGhhdmUgYmVlbiB1bm1vdW50ZWQuXG5cdFx0Y2hpbGRWTm9kZS5fbmV4dERvbSA9IHVuZGVmaW5lZDtcblxuXHRcdC8vIFVuc2V0IGRpZmZpbmcgZmxhZ3Ncblx0XHRjaGlsZFZOb2RlLl9mbGFncyAmPSB+KElOU0VSVF9WTk9ERSB8IE1BVENIRUQpO1xuXHR9XG5cblx0Ly8gVE9ETzogV2l0aCBuZXcgY2hpbGQgZGlmZmluZyBhbGdvLCBjb25zaWRlciBhbHQgd2F5cyB0byBkaWZmIEZyYWdtZW50cy5cblx0Ly8gU3VjaCBhcyBkcm9wcGluZyBvbGREb20gYW5kIG1vdmluZyBmcmFnbWVudHMgaW4gcGxhY2Vcblx0Ly9cblx0Ly8gQmVjYXVzZSB0aGUgbmV3UGFyZW50Vk5vZGUgaXMgRnJhZ21lbnQtbGlrZSwgd2UgbmVlZCB0byBzZXQgaXQnc1xuXHQvLyBfbmV4dERvbSBwcm9wZXJ0eSB0byB0aGUgbmV4dFNpYmxpbmcgb2YgaXRzIGxhc3QgY2hpbGQgRE9NIG5vZGUuXG5cdC8vXG5cdC8vIGBvbGREb21gIGNvbnRhaW5zIHRoZSBjb3JyZWN0IHZhbHVlIGhlcmUgYmVjYXVzZSBpZiB0aGUgbGFzdCBjaGlsZFxuXHQvLyBpcyBhIEZyYWdtZW50LWxpa2UsIHRoZW4gb2xkRG9tIGhhcyBhbHJlYWR5IGJlZW4gc2V0IHRvIHRoYXQgY2hpbGQncyBfbmV4dERvbS5cblx0Ly8gSWYgdGhlIGxhc3QgY2hpbGQgaXMgYSBET00gVk5vZGUsIHRoZW4gb2xkRG9tIHdpbGwgYmUgc2V0IHRvIHRoYXQgRE9NXG5cdC8vIG5vZGUncyBuZXh0U2libGluZy5cblx0bmV3UGFyZW50Vk5vZGUuX25leHREb20gPSBvbGREb207XG5cdG5ld1BhcmVudFZOb2RlLl9kb20gPSBmaXJzdENoaWxkRG9tO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Vk5vZGV9IG5ld1BhcmVudFZOb2RlXG4gKiBAcGFyYW0ge0NvbXBvbmVudENoaWxkcmVuW119IHJlbmRlclJlc3VsdFxuICogQHBhcmFtIHtWTm9kZVtdfSBvbGRDaGlsZHJlblxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3ROZXdDaGlsZHJlbkFycmF5KG5ld1BhcmVudFZOb2RlLCByZW5kZXJSZXN1bHQsIG9sZENoaWxkcmVuKSB7XG5cdC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXHRsZXQgaTtcblx0LyoqIEB0eXBlIHtWTm9kZX0gKi9cblx0bGV0IGNoaWxkVk5vZGU7XG5cdC8qKiBAdHlwZSB7Vk5vZGV9ICovXG5cdGxldCBvbGRWTm9kZTtcblxuXHRjb25zdCBuZXdDaGlsZHJlbkxlbmd0aCA9IHJlbmRlclJlc3VsdC5sZW5ndGg7XG5cdGxldCBvbGRDaGlsZHJlbkxlbmd0aCA9IG9sZENoaWxkcmVuLmxlbmd0aCxcblx0XHRyZW1haW5pbmdPbGRDaGlsZHJlbiA9IG9sZENoaWxkcmVuTGVuZ3RoO1xuXG5cdGxldCBza2V3ID0gMDtcblxuXHRuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW4gPSBbXTtcblx0Zm9yIChpID0gMDsgaSA8IG5ld0NoaWxkcmVuTGVuZ3RoOyBpKyspIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGFyZSByZXVzaW5nIHRoZSBjaGlsZFZOb2RlIHZhcmlhYmxlIHRvIGhvbGQgYm90aCB0aGVcblx0XHQvLyBwcmUgYW5kIHBvc3Qgbm9ybWFsaXplZCBjaGlsZFZOb2RlXG5cdFx0Y2hpbGRWTm9kZSA9IHJlbmRlclJlc3VsdFtpXTtcblxuXHRcdGlmIChcblx0XHRcdGNoaWxkVk5vZGUgPT0gbnVsbCB8fFxuXHRcdFx0dHlwZW9mIGNoaWxkVk5vZGUgPT0gJ2Jvb2xlYW4nIHx8XG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZSA9PSAnZnVuY3Rpb24nXG5cdFx0KSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gbnVsbDtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHQvLyBJZiB0aGlzIG5ld1ZOb2RlIGlzIGJlaW5nIHJldXNlZCAoZS5nLiA8ZGl2PntyZXVzZX17cmV1c2V9PC9kaXY+KSBpbiB0aGUgc2FtZSBkaWZmLFxuXHRcdC8vIG9yIHdlIGFyZSByZW5kZXJpbmcgYSBjb21wb25lbnQgKGUuZy4gc2V0U3RhdGUpIGNvcHkgdGhlIG9sZFZOb2RlcyBzbyBpdCBjYW4gaGF2ZVxuXHRcdC8vIGl0J3Mgb3duIERPTSAmIGV0Yy4gcG9pbnRlcnNcblx0XHRlbHNlIGlmIChcblx0XHRcdHR5cGVvZiBjaGlsZFZOb2RlID09ICdzdHJpbmcnIHx8XG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZSA9PSAnbnVtYmVyJyB8fFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZhbGlkLXR5cGVvZlxuXHRcdFx0dHlwZW9mIGNoaWxkVk5vZGUgPT0gJ2JpZ2ludCcgfHxcblx0XHRcdGNoaWxkVk5vZGUuY29uc3RydWN0b3IgPT0gU3RyaW5nXG5cdFx0KSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChpc0FycmF5KGNoaWxkVk5vZGUpKSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdEZyYWdtZW50LFxuXHRcdFx0XHR7IGNoaWxkcmVuOiBjaGlsZFZOb2RlIH0sXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChjaGlsZFZOb2RlLmNvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgJiYgY2hpbGRWTm9kZS5fZGVwdGggPiAwKSB7XG5cdFx0XHQvLyBWTm9kZSBpcyBhbHJlYWR5IGluIHVzZSwgY2xvbmUgaXQuIFRoaXMgY2FuIGhhcHBlbiBpbiB0aGUgZm9sbG93aW5nXG5cdFx0XHQvLyBzY2VuYXJpbzpcblx0XHRcdC8vICAgY29uc3QgcmV1c2UgPSA8ZGl2IC8+XG5cdFx0XHQvLyAgIDxkaXY+e3JldXNlfTxzcGFuIC8+e3JldXNlfTwvZGl2PlxuXHRcdFx0Y2hpbGRWTm9kZSA9IG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbltpXSA9IGNyZWF0ZVZOb2RlKFxuXHRcdFx0XHRjaGlsZFZOb2RlLnR5cGUsXG5cdFx0XHRcdGNoaWxkVk5vZGUucHJvcHMsXG5cdFx0XHRcdGNoaWxkVk5vZGUua2V5LFxuXHRcdFx0XHRjaGlsZFZOb2RlLnJlZiA/IGNoaWxkVk5vZGUucmVmIDogbnVsbCxcblx0XHRcdFx0Y2hpbGRWTm9kZS5fb3JpZ2luYWxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjaGlsZFZOb2RlO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNrZXdlZEluZGV4ID0gaSArIHNrZXc7XG5cdFx0Y2hpbGRWTm9kZS5fcGFyZW50ID0gbmV3UGFyZW50Vk5vZGU7XG5cdFx0Y2hpbGRWTm9kZS5fZGVwdGggPSBuZXdQYXJlbnRWTm9kZS5fZGVwdGggKyAxO1xuXG5cdFx0Ly8gVGVtcG9yYXJpbHkgc3RvcmUgdGhlIG1hdGNoaW5nSW5kZXggb24gdGhlIF9pbmRleCBwcm9wZXJ0eSBzbyB3ZSBjYW4gcHVsbFxuXHRcdC8vIG91dCB0aGUgb2xkVk5vZGUgaW4gZGlmZkNoaWxkcmVuLiBXZSdsbCBvdmVycmlkZSB0aGlzIHRvIHRoZSBWTm9kZSdzXG5cdFx0Ly8gZmluYWwgaW5kZXggYWZ0ZXIgdXNpbmcgdGhpcyBwcm9wZXJ0eSB0byBnZXQgdGhlIG9sZFZOb2RlXG5cdFx0Y29uc3QgbWF0Y2hpbmdJbmRleCA9IChjaGlsZFZOb2RlLl9pbmRleCA9IGZpbmRNYXRjaGluZ0luZGV4KFxuXHRcdFx0Y2hpbGRWTm9kZSxcblx0XHRcdG9sZENoaWxkcmVuLFxuXHRcdFx0c2tld2VkSW5kZXgsXG5cdFx0XHRyZW1haW5pbmdPbGRDaGlsZHJlblxuXHRcdCkpO1xuXG5cdFx0b2xkVk5vZGUgPSBudWxsO1xuXHRcdGlmIChtYXRjaGluZ0luZGV4ICE9PSAtMSkge1xuXHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlblttYXRjaGluZ0luZGV4XTtcblx0XHRcdHJlbWFpbmluZ09sZENoaWxkcmVuLS07XG5cdFx0XHRpZiAob2xkVk5vZGUpIHtcblx0XHRcdFx0b2xkVk5vZGUuX2ZsYWdzIHw9IE1BVENIRUQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSGVyZSwgd2UgZGVmaW5lIGlzTW91bnRpbmcgZm9yIHRoZSBwdXJwb3NlcyBvZiB0aGUgc2tldyBkaWZmaW5nXG5cdFx0Ly8gYWxnb3JpdGhtLiBOb2RlcyB0aGF0IGFyZSB1bnN1c3BlbmRpbmcgYXJlIGNvbnNpZGVyZWQgbW91bnRpbmcgYW5kIHdlIGRldGVjdFxuXHRcdC8vIHRoaXMgYnkgY2hlY2tpbmcgaWYgb2xkVk5vZGUuX29yaWdpbmFsID09PSBudWxsXG5cdFx0Y29uc3QgaXNNb3VudGluZyA9IG9sZFZOb2RlID09IG51bGwgfHwgb2xkVk5vZGUuX29yaWdpbmFsID09PSBudWxsO1xuXG5cdFx0aWYgKGlzTW91bnRpbmcpIHtcblx0XHRcdGlmIChtYXRjaGluZ0luZGV4ID09IC0xKSB7XG5cdFx0XHRcdHNrZXctLTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgd2UgYXJlIG1vdW50aW5nIGEgRE9NIFZOb2RlLCBtYXJrIGl0IGZvciBpbnNlcnRpb25cblx0XHRcdGlmICh0eXBlb2YgY2hpbGRWTm9kZS50eXBlICE9ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Y2hpbGRWTm9kZS5fZmxhZ3MgfD0gSU5TRVJUX1ZOT0RFO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobWF0Y2hpbmdJbmRleCAhPT0gc2tld2VkSW5kZXgpIHtcblx0XHRcdC8vIFdoZW4gd2UgbW92ZSBlbGVtZW50cyBhcm91bmQgaS5lLiBbMCwgMSwgMl0gLS0+IFsxLCAwLCAyXVxuXHRcdFx0Ly8gLS0+IHdlIGRpZmYgMSwgd2UgZmluZCBpdCBhdCBwb3NpdGlvbiAxIHdoaWxlIG91ciBza2V3ZWQgaW5kZXggaXMgMCBhbmQgb3VyIHNrZXcgaXMgMFxuXHRcdFx0Ly8gICAgIHdlIHNldCB0aGUgc2tldyB0byAxIGFzIHdlIGZvdW5kIGFuIG9mZnNldC5cblx0XHRcdC8vIC0tPiB3ZSBkaWZmIDAsIHdlIGZpbmQgaXQgYXQgcG9zaXRpb24gMCB3aGlsZSBvdXIgc2tld2VkIGluZGV4IGlzIGF0IDIgYW5kIG91ciBza2V3IGlzIDFcblx0XHRcdC8vICAgICB0aGlzIG1ha2VzIHVzIGluY3JlYXNlIHRoZSBza2V3IGFnYWluLlxuXHRcdFx0Ly8gLS0+IHdlIGRpZmYgMiwgd2UgZmluZCBpdCBhdCBwb3NpdGlvbiAyIHdoaWxlIG91ciBza2V3ZWQgaW5kZXggaXMgYXQgNCBhbmQgb3VyIHNrZXcgaXMgMlxuXHRcdFx0Ly9cblx0XHRcdC8vIHRoaXMgYmVjb21lcyBhbiBvcHRpbWl6YXRpb24gcXVlc3Rpb24gd2hlcmUgY3VycmVudGx5IHdlIHNlZSBhIDEgZWxlbWVudCBvZmZzZXQgYXMgYW4gaW5zZXJ0aW9uXG5cdFx0XHQvLyBvciBkZWxldGlvbiBpLmUuIHdlIG9wdGltaXplIGZvciBbMCwgMSwgMl0gLS0+IFs5LCAwLCAxLCAyXVxuXHRcdFx0Ly8gd2hpbGUgYSBtb3JlIHRoYW4gMSBvZmZzZXQgd2Ugc2VlIGFzIGEgc3dhcC5cblx0XHRcdC8vIFdlIGNvdWxkIHByb2JhYmx5IGJ1aWxkIGhldXJpc3RpY3MgZm9yIGhhdmluZyBhbiBvcHRpbWl6ZWQgY291cnNlIG9mIGFjdGlvbiBoZXJlIGFzIHdlbGwsIGJ1dFxuXHRcdFx0Ly8gbWlnaHQgZ28gYXQgdGhlIGNvc3Qgb2Ygc29tZSBieXRlcy5cblx0XHRcdC8vXG5cdFx0XHQvLyBJZiB3ZSB3YW50ZWQgdG8gb3B0aW1pemUgZm9yIGkuZS4gb25seSBzd2FwcyB3ZSdkIGp1c3QgZG8gdGhlIGxhc3QgdHdvIGNvZGUtYnJhbmNoZXMgYW5kIGhhdmVcblx0XHRcdC8vIG9ubHkgdGhlIGZpcnN0IGl0ZW0gYmUgYSByZS1zY291dGluZyBhbmQgYWxsIHRoZSBvdGhlcnMgZmFsbCBpbiB0aGVpciBza2V3ZWQgY291bnRlci1wYXJ0LlxuXHRcdFx0Ly8gV2UgY291bGQgYWxzbyBmdXJ0aGVyIG9wdGltaXplIGZvciBzd2Fwc1xuXHRcdFx0aWYgKG1hdGNoaW5nSW5kZXggPT0gc2tld2VkSW5kZXggLSAxKSB7XG5cdFx0XHRcdHNrZXctLTtcblx0XHRcdH0gZWxzZSBpZiAobWF0Y2hpbmdJbmRleCA9PSBza2V3ZWRJbmRleCArIDEpIHtcblx0XHRcdFx0c2tldysrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKG1hdGNoaW5nSW5kZXggPiBza2V3ZWRJbmRleCkge1xuXHRcdFx0XHRcdHNrZXctLTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRza2V3Kys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIHRoaXMgVk5vZGUncyBET00gaWYgdGhlIG9yaWdpbmFsIGluZGV4IChtYXRjaGluZ0luZGV4KSBkb2Vzbid0XG5cdFx0XHRcdC8vIG1hdGNoIHRoZSBuZXcgc2tldyBpbmRleCAoaSArIG5ldyBza2V3KVxuXHRcdFx0XHQvLyBJbiB0aGUgZm9ybWVyIHR3byBicmFuY2hlcyB3ZSBrbm93IHRoYXQgaXQgbWF0Y2hlcyBhZnRlciBza2V3aW5nXG5cdFx0XHRcdGNoaWxkVk5vZGUuX2ZsYWdzIHw9IElOU0VSVF9WTk9ERTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgcmVtYWluaW5nIG9sZENoaWxkcmVuIGlmIHRoZXJlIGFyZSBhbnkuIExvb3AgZm9yd2FyZHMgc28gdGhhdCBhcyB3ZVxuXHQvLyB1bm1vdW50IERPTSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG9sZENoaWxkcmVuLCB3ZSBjYW4gYWRqdXN0IG9sZERvbSB0b1xuXHQvLyBwb2ludCB0byB0aGUgbmV4dCBjaGlsZCwgd2hpY2ggbmVlZHMgdG8gYmUgdGhlIGZpcnN0IERPTSBub2RlIHRoYXQgd29uJ3QgYmVcblx0Ly8gdW5tb3VudGVkLlxuXHRpZiAocmVtYWluaW5nT2xkQ2hpbGRyZW4pIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgb2xkQ2hpbGRyZW5MZW5ndGg7IGkrKykge1xuXHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcblx0XHRcdGlmIChvbGRWTm9kZSAhPSBudWxsICYmIChvbGRWTm9kZS5fZmxhZ3MgJiBNQVRDSEVEKSA9PT0gMCkge1xuXHRcdFx0XHRpZiAob2xkVk5vZGUuX2RvbSA9PSBuZXdQYXJlbnRWTm9kZS5fbmV4dERvbSkge1xuXHRcdFx0XHRcdG5ld1BhcmVudFZOb2RlLl9uZXh0RG9tID0gZ2V0RG9tU2libGluZyhvbGRWTm9kZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR1bm1vdW50KG9sZFZOb2RlLCBvbGRWTm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtWTm9kZX0gcGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7UHJlYWN0RWxlbWVudH0gb2xkRG9tXG4gKiBAcGFyYW0ge1ByZWFjdEVsZW1lbnR9IHBhcmVudERvbVxuICogQHJldHVybnMge1ByZWFjdEVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGluc2VydChwYXJlbnRWTm9kZSwgb2xkRG9tLCBwYXJlbnREb20pIHtcblx0Ly8gTm90ZTogVk5vZGVzIGluIG5lc3RlZCBzdXNwZW5kZWQgdHJlZXMgbWF5IGJlIG1pc3NpbmcgX2NoaWxkcmVuLlxuXG5cdGlmICh0eXBlb2YgcGFyZW50Vk5vZGUudHlwZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0bGV0IGNoaWxkcmVuID0gcGFyZW50Vk5vZGUuX2NoaWxkcmVuO1xuXHRcdGZvciAobGV0IGkgPSAwOyBjaGlsZHJlbiAmJiBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChjaGlsZHJlbltpXSkge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbnRlciB0aGlzIGNvZGUgcGF0aCBvbiBzQ1UgYmFpbG91dCwgd2hlcmUgd2UgY29weVxuXHRcdFx0XHQvLyBvbGRWTm9kZS5fY2hpbGRyZW4gdG8gbmV3Vk5vZGUuX2NoaWxkcmVuLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgb2xkXG5cdFx0XHRcdC8vIGNoaWxkcmVuJ3MgX3BhcmVudCBwb2ludGVyIHRvIHBvaW50IHRvIHRoZSBuZXdWTm9kZSAocGFyZW50Vk5vZGVcblx0XHRcdFx0Ly8gaGVyZSkuXG5cdFx0XHRcdGNoaWxkcmVuW2ldLl9wYXJlbnQgPSBwYXJlbnRWTm9kZTtcblx0XHRcdFx0b2xkRG9tID0gaW5zZXJ0KGNoaWxkcmVuW2ldLCBvbGREb20sIHBhcmVudERvbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9sZERvbTtcblx0fSBlbHNlIGlmIChwYXJlbnRWTm9kZS5fZG9tICE9IG9sZERvbSkge1xuXHRcdGlmIChvbGREb20gJiYgcGFyZW50Vk5vZGUudHlwZSAmJiAhcGFyZW50RG9tLmNvbnRhaW5zKG9sZERvbSkpIHtcblx0XHRcdG9sZERvbSA9IGdldERvbVNpYmxpbmcocGFyZW50Vk5vZGUpO1xuXHRcdH1cblx0XHRwYXJlbnREb20uaW5zZXJ0QmVmb3JlKHBhcmVudFZOb2RlLl9kb20sIG9sZERvbSB8fCBudWxsKTtcblx0XHRvbGREb20gPSBwYXJlbnRWTm9kZS5fZG9tO1xuXHR9XG5cblx0ZG8ge1xuXHRcdG9sZERvbSA9IG9sZERvbSAmJiBvbGREb20ubmV4dFNpYmxpbmc7XG5cdH0gd2hpbGUgKG9sZERvbSAhPSBudWxsICYmIG9sZERvbS5ub2RlVHlwZSA9PT0gOCk7XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGFuZCBsb29wIHRocm91Z2ggdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge0NvbXBvbmVudENoaWxkcmVufSBjaGlsZHJlbiBUaGUgdW5mbGF0dGVuZWQgY2hpbGRyZW4gb2YgYSB2aXJ0dWFsXG4gKiBub2RlXG4gKiBAcmV0dXJucyB7Vk5vZGVbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2hpbGRBcnJheShjaGlsZHJlbiwgb3V0KSB7XG5cdG91dCA9IG91dCB8fCBbXTtcblx0aWYgKGNoaWxkcmVuID09IG51bGwgfHwgdHlwZW9mIGNoaWxkcmVuID09ICdib29sZWFuJykge1xuXHR9IGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdFx0Y2hpbGRyZW4uc29tZShjaGlsZCA9PiB7XG5cdFx0XHR0b0NoaWxkQXJyYXkoY2hpbGQsIG91dCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b3V0LnB1c2goY2hpbGRyZW4pO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtWTm9kZX0gY2hpbGRWTm9kZVxuICogQHBhcmFtIHtWTm9kZVtdfSBvbGRDaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IHNrZXdlZEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gcmVtYWluaW5nT2xkQ2hpbGRyZW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGZpbmRNYXRjaGluZ0luZGV4KFxuXHRjaGlsZFZOb2RlLFxuXHRvbGRDaGlsZHJlbixcblx0c2tld2VkSW5kZXgsXG5cdHJlbWFpbmluZ09sZENoaWxkcmVuXG4pIHtcblx0Y29uc3Qga2V5ID0gY2hpbGRWTm9kZS5rZXk7XG5cdGNvbnN0IHR5cGUgPSBjaGlsZFZOb2RlLnR5cGU7XG5cdGxldCB4ID0gc2tld2VkSW5kZXggLSAxO1xuXHRsZXQgeSA9IHNrZXdlZEluZGV4ICsgMTtcblx0bGV0IG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5bc2tld2VkSW5kZXhdO1xuXG5cdC8vIFdlIG9ubHkgbmVlZCB0byBwZXJmb3JtIGEgc2VhcmNoIGlmIHRoZXJlIGFyZSBtb3JlIGNoaWxkcmVuXG5cdC8vIChyZW1haW5pbmdPbGRDaGlsZHJlbikgdG8gc2VhcmNoLiBIb3dldmVyLCBpZiB0aGUgb2xkVk5vZGUgd2UganVzdCBsb29rZWRcblx0Ly8gYXQgc2tld2VkSW5kZXggd2FzIG5vdCBhbHJlYWR5IHVzZWQgaW4gdGhpcyBkaWZmLCB0aGVuIHRoZXJlIG11c3QgYmUgYXRcblx0Ly8gbGVhc3QgMSBvdGhlciAoc28gZ3JlYXRlciB0aGFuIDEpIHJlbWFpbmluZ09sZENoaWxkcmVuIHRvIGF0dGVtcHQgdG8gbWF0Y2hcblx0Ly8gYWdhaW5zdC4gU28gdGhlIGZvbGxvd2luZyBjb25kaXRpb24gY2hlY2tzIHRoYXQgZW5zdXJpbmdcblx0Ly8gcmVtYWluaW5nT2xkQ2hpbGRyZW4gPiAxIGlmIHRoZSBvbGRWTm9kZSBpcyBub3QgYWxyZWFkeSB1c2VkL21hdGNoZWQuIEVsc2Vcblx0Ly8gaWYgdGhlIG9sZFZOb2RlIHdhcyBudWxsIG9yIG1hdGNoZWQsIHRoZW4gdGhlcmUgY291bGQgbmVlZHMgdG8gYmUgYXQgbGVhc3Rcblx0Ly8gMSAoYWthIGByZW1haW5pbmdPbGRDaGlsZHJlbiA+IDBgKSBjaGlsZHJlbiB0byBmaW5kIGFuZCBjb21wYXJlIGFnYWluc3QuXG5cdGxldCBzaG91bGRTZWFyY2ggPVxuXHRcdHJlbWFpbmluZ09sZENoaWxkcmVuID5cblx0XHQob2xkVk5vZGUgIT0gbnVsbCAmJiAob2xkVk5vZGUuX2ZsYWdzICYgTUFUQ0hFRCkgPT09IDAgPyAxIDogMCk7XG5cblx0aWYgKFxuXHRcdG9sZFZOb2RlID09PSBudWxsIHx8XG5cdFx0KG9sZFZOb2RlICYmXG5cdFx0XHRrZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHR0eXBlID09PSBvbGRWTm9kZS50eXBlICYmXG5cdFx0XHQob2xkVk5vZGUuX2ZsYWdzICYgTUFUQ0hFRCkgPT09IDApXG5cdCkge1xuXHRcdHJldHVybiBza2V3ZWRJbmRleDtcblx0fSBlbHNlIGlmIChzaG91bGRTZWFyY2gpIHtcblx0XHR3aGlsZSAoeCA+PSAwIHx8IHkgPCBvbGRDaGlsZHJlbi5sZW5ndGgpIHtcblx0XHRcdGlmICh4ID49IDApIHtcblx0XHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlblt4XTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG9sZFZOb2RlICYmXG5cdFx0XHRcdFx0KG9sZFZOb2RlLl9mbGFncyAmIE1BVENIRUQpID09PSAwICYmXG5cdFx0XHRcdFx0a2V5ID09IG9sZFZOb2RlLmtleSAmJlxuXHRcdFx0XHRcdHR5cGUgPT09IG9sZFZOb2RlLnR5cGVcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHg7XG5cdFx0XHRcdH1cblx0XHRcdFx0eC0tO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeSA8IG9sZENoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW3ldO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0b2xkVk5vZGUgJiZcblx0XHRcdFx0XHQob2xkVk5vZGUuX2ZsYWdzICYgTUFUQ0hFRCkgPT09IDAgJiZcblx0XHRcdFx0XHRrZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdFx0dHlwZSA9PT0gb2xkVk5vZGUudHlwZVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4geTtcblx0XHRcdFx0fVxuXHRcdFx0XHR5Kys7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIC0xO1xufVxuIiwgImltcG9ydCB7XG5cdEVNUFRZX09CSixcblx0TU9ERV9IWURSQVRFLFxuXHRNT0RFX1NVU1BFTkRFRCxcblx0UkVTRVRfTU9ERVxufSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCwgZ2V0RG9tU2libGluZyB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IGRpZmZDaGlsZHJlbiB9IGZyb20gJy4vY2hpbGRyZW4nO1xuaW1wb3J0IHsgc2V0UHJvcGVydHkgfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7IGFzc2lnbiwgaXNBcnJheSwgcmVtb3ZlTm9kZSwgc2xpY2UgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4uL29wdGlvbnMnO1xuXG4vKipcbiAqIERpZmYgdHdvIHZpcnR1YWwgbm9kZXMgYW5kIGFwcGx5IHByb3BlciBjaGFuZ2VzIHRvIHRoZSBET01cbiAqIEBwYXJhbSB7UHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBwYXJlbnQgb2YgdGhlIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge1ZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtWTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBnbG9iYWxDb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0LiBNb2RpZmllZCBieVxuICogZ2V0Q2hpbGRDb250ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIEN1cnJlbnQgbmFtZXNwYWNlIG9mIHRoZSBET00gbm9kZSAoSFRNTCwgU1ZHLCBvciBNYXRoTUwpXG4gKiBAcGFyYW0ge0FycmF5PFByZWFjdEVsZW1lbnQ+fSBleGNlc3NEb21DaGlsZHJlblxuICogQHBhcmFtIHtBcnJheTxDb21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHMgd2hpY2ggaGF2ZSBjYWxsYmFja3NcbiAqIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge1ByZWFjdEVsZW1lbnR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET00gZWxlbWVudCBhbnkgbmV3IGRvbVxuICogZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3QgcmVuZGVyIChleGNlcHQgd2hlblxuICogaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmcgRnJhZ21lbnRzIHRoYXQgaGF2ZVxuICogc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBpc0h5ZHJhdGluZyBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKiBAcGFyYW0ge2FueVtdfSByZWZRdWV1ZSBhbiBhcnJheSBvZiBlbGVtZW50cyBuZWVkZWQgdG8gaW52b2tlIHJlZnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmYoXG5cdHBhcmVudERvbSxcblx0bmV3Vk5vZGUsXG5cdG9sZFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRuYW1lc3BhY2UsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZyxcblx0cmVmUXVldWVcbikge1xuXHQvKiogQHR5cGUge2FueX0gKi9cblx0bGV0IHRtcCxcblx0XHRuZXdUeXBlID0gbmV3Vk5vZGUudHlwZTtcblxuXHQvLyBXaGVuIHBhc3NpbmcgdGhyb3VnaCBjcmVhdGVFbGVtZW50IGl0IGFzc2lnbnMgdGhlIG9iamVjdFxuXHQvLyBjb25zdHJ1Y3RvciBhcyB1bmRlZmluZWQuIFRoaXMgdG8gcHJldmVudCBKU09OLWluamVjdGlvbi5cblx0aWYgKG5ld1ZOb2RlLmNvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuXG5cdC8vIElmIHRoZSBwcmV2aW91cyBkaWZmIGJhaWxlZCBvdXQsIHJlc3VtZSBjcmVhdGluZy9oeWRyYXRpbmcuXG5cdGlmIChvbGRWTm9kZS5fZmxhZ3MgJiBNT0RFX1NVU1BFTkRFRCkge1xuXHRcdGlzSHlkcmF0aW5nID0gISEob2xkVk5vZGUuX2ZsYWdzICYgTU9ERV9IWURSQVRFKTtcblx0XHRvbGREb20gPSBuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHRleGNlc3NEb21DaGlsZHJlbiA9IFtvbGREb21dO1xuXHR9XG5cblx0aWYgKCh0bXAgPSBvcHRpb25zLl9kaWZmKSkgdG1wKG5ld1ZOb2RlKTtcblxuXHRvdXRlcjogaWYgKHR5cGVvZiBuZXdUeXBlID09ICdmdW5jdGlvbicpIHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IGMsIGlzTmV3LCBvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90LCBjbGVhclByb2Nlc3NpbmdFeGNlcHRpb247XG5cdFx0XHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblx0XHRcdGNvbnN0IGlzQ2xhc3NDb21wb25lbnQgPVxuXHRcdFx0XHQncHJvdG90eXBlJyBpbiBuZXdUeXBlICYmIG5ld1R5cGUucHJvdG90eXBlLnJlbmRlcjtcblxuXHRcdFx0Ly8gTmVjZXNzYXJ5IGZvciBjcmVhdGVDb250ZXh0IGFwaS4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHdpbGwgcGFzc1xuXHRcdFx0Ly8gdGhlIGNvbnRleHQgdmFsdWUgYXMgYHRoaXMuY29udGV4dGAganVzdCBmb3IgdGhpcyBjb21wb25lbnQuXG5cdFx0XHR0bXAgPSBuZXdUeXBlLmNvbnRleHRUeXBlO1xuXHRcdFx0bGV0IHByb3ZpZGVyID0gdG1wICYmIGdsb2JhbENvbnRleHRbdG1wLl9pZF07XG5cdFx0XHRsZXQgY29tcG9uZW50Q29udGV4dCA9IHRtcFxuXHRcdFx0XHQ/IHByb3ZpZGVyXG5cdFx0XHRcdFx0PyBwcm92aWRlci5wcm9wcy52YWx1ZVxuXHRcdFx0XHRcdDogdG1wLl9kZWZhdWx0VmFsdWVcblx0XHRcdFx0OiBnbG9iYWxDb250ZXh0O1xuXG5cdFx0XHQvLyBHZXQgY29tcG9uZW50IGFuZCBzZXQgaXQgdG8gYGNgXG5cdFx0XHRpZiAob2xkVk5vZGUuX2NvbXBvbmVudCkge1xuXHRcdFx0XHRjID0gbmV3Vk5vZGUuX2NvbXBvbmVudCA9IG9sZFZOb2RlLl9jb21wb25lbnQ7XG5cdFx0XHRcdGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IGMuX3Byb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wZW5kaW5nRXJyb3I7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJbnN0YW50aWF0ZSB0aGUgbmV3IGNvbXBvbmVudFxuXHRcdFx0XHRpZiAoaXNDbGFzc0NvbXBvbmVudCkge1xuXHRcdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVGhlIGNoZWNrIGFib3ZlIHZlcmlmaWVzIHRoYXQgbmV3VHlwZSBpcyBzdXBwb3NlIHRvIGJlIGNvbnN0cnVjdGVkXG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgbmV3VHlwZShuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVHJ1c3QgbWUsIENvbXBvbmVudCBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2Ugd2Ugd2FudFxuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jb21wb25lbnQgPSBjID0gbmV3IEJhc2VDb21wb25lbnQoXG5cdFx0XHRcdFx0XHRuZXdQcm9wcyxcblx0XHRcdFx0XHRcdGNvbXBvbmVudENvbnRleHRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGMuY29uc3RydWN0b3IgPSBuZXdUeXBlO1xuXHRcdFx0XHRcdGMucmVuZGVyID0gZG9SZW5kZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByb3ZpZGVyKSBwcm92aWRlci5zdWIoYyk7XG5cblx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRpZiAoIWMuc3RhdGUpIGMuc3RhdGUgPSB7fTtcblx0XHRcdFx0Yy5jb250ZXh0ID0gY29tcG9uZW50Q29udGV4dDtcblx0XHRcdFx0Yy5fZ2xvYmFsQ29udGV4dCA9IGdsb2JhbENvbnRleHQ7XG5cdFx0XHRcdGlzTmV3ID0gYy5fZGlydHkgPSB0cnVlO1xuXHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0Yy5fc3RhdGVDYWxsYmFja3MgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW52b2tlIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1xuXHRcdFx0aWYgKGlzQ2xhc3NDb21wb25lbnQgJiYgYy5fbmV4dFN0YXRlID09IG51bGwpIHtcblx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYy5zdGF0ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzQ2xhc3NDb21wb25lbnQgJiYgbmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoYy5fbmV4dFN0YXRlID09IGMuc3RhdGUpIHtcblx0XHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBhc3NpZ24oe30sIGMuX25leHRTdGF0ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhc3NpZ24oXG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlLFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdG9sZFByb3BzID0gYy5wcm9wcztcblx0XHRcdG9sZFN0YXRlID0gYy5zdGF0ZTtcblx0XHRcdGMuX3Zub2RlID0gbmV3Vk5vZGU7XG5cblx0XHRcdC8vIEludm9rZSBwcmUtcmVuZGVyIGxpZmVjeWNsZSBtZXRob2RzXG5cdFx0XHRpZiAoaXNOZXcpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGlzQ2xhc3NDb21wb25lbnQgJiZcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsTW91bnQgIT0gbnVsbFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlzQ2xhc3NDb21wb25lbnQgJiYgYy5jb21wb25lbnREaWRNb3VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5jb21wb25lbnREaWRNb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRpc0NsYXNzQ29tcG9uZW50ICYmXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT0gbnVsbCAmJlxuXHRcdFx0XHRcdG5ld1Byb3BzICE9PSBvbGRQcm9wcyAmJlxuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0IWMuX2ZvcmNlICYmXG5cdFx0XHRcdFx0KChjLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPSBudWxsICYmXG5cdFx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZShcblx0XHRcdFx0XHRcdFx0bmV3UHJvcHMsXG5cdFx0XHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50Q29udGV4dFxuXHRcdFx0XHRcdFx0KSA9PT0gZmFsc2UpIHx8XG5cdFx0XHRcdFx0XHRuZXdWTm9kZS5fb3JpZ2luYWwgPT09IG9sZFZOb2RlLl9vcmlnaW5hbClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Ly8gTW9yZSBpbmZvIGFib3V0IHRoaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm92aURlQ3Jvb2NrL2JlYzVmMmNlOTM1NDRkMmU2MDcwZWY4ZTAwMzZlNGU4XG5cdFx0XHRcdFx0aWYgKG5ld1ZOb2RlLl9vcmlnaW5hbCAhPT0gb2xkVk5vZGUuX29yaWdpbmFsKSB7XG5cdFx0XHRcdFx0XHQvLyBXaGVuIHdlIGFyZSBkZWFsaW5nIHdpdGggYSBiYWlsIGJlY2F1c2Ugb2Ygc0NVIHdlIGhhdmUgdG8gdXBkYXRlXG5cdFx0XHRcdFx0XHQvLyB0aGUgcHJvcHMsIHN0YXRlIGFuZCBkaXJ0eS1zdGF0ZS5cblx0XHRcdFx0XHRcdC8vIHdoZW4gd2UgYXJlIGRlYWxpbmcgd2l0aCBzdHJpY3QtZXF1YWxpdHkgd2UgZG9uJ3QgYXMgdGhlIGNoaWxkIGNvdWxkIHN0aWxsXG5cdFx0XHRcdFx0XHQvLyBiZSBkaXJ0aWVkIHNlZSAjMzg4M1xuXHRcdFx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblx0XHRcdFx0XHRcdGMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuID0gb2xkVk5vZGUuX2NoaWxkcmVuO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbi5zb21lKHZub2RlID0+IHtcblx0XHRcdFx0XHRcdGlmICh2bm9kZSkgdm5vZGUuX3BhcmVudCA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjLl9zdGF0ZUNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5fc3RhdGVDYWxsYmFja3NbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjLl9zdGF0ZUNhbGxiYWNrcyA9IFtdO1xuXG5cdFx0XHRcdFx0aWYgKGMuX3JlbmRlckNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWsgb3V0ZXI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnRXaWxsVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVcGRhdGUobmV3UHJvcHMsIGMuX25leHRTdGF0ZSwgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaXNDbGFzc0NvbXBvbmVudCAmJiBjLmNvbXBvbmVudERpZFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goKCkgPT4ge1xuXHRcdFx0XHRcdFx0Yy5jb21wb25lbnREaWRVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Yy5jb250ZXh0ID0gY29tcG9uZW50Q29udGV4dDtcblx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdGMuX3BhcmVudERvbSA9IHBhcmVudERvbTtcblx0XHRcdGMuX2ZvcmNlID0gZmFsc2U7XG5cblx0XHRcdGxldCByZW5kZXJIb29rID0gb3B0aW9ucy5fcmVuZGVyLFxuXHRcdFx0XHRjb3VudCA9IDA7XG5cdFx0XHRpZiAoaXNDbGFzc0NvbXBvbmVudCkge1xuXHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmIChyZW5kZXJIb29rKSByZW5kZXJIb29rKG5ld1ZOb2RlKTtcblxuXHRcdFx0XHR0bXAgPSBjLnJlbmRlcihjLnByb3BzLCBjLnN0YXRlLCBjLmNvbnRleHQpO1xuXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYy5fc3RhdGVDYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaChjLl9zdGF0ZUNhbGxiYWNrc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Yy5fc3RhdGVDYWxsYmFja3MgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChyZW5kZXJIb29rKSByZW5kZXJIb29rKG5ld1ZOb2RlKTtcblxuXHRcdFx0XHRcdHRtcCA9IGMucmVuZGVyKGMucHJvcHMsIGMuc3RhdGUsIGMuY29udGV4dCk7XG5cblx0XHRcdFx0XHQvLyBIYW5kbGUgc2V0U3RhdGUgY2FsbGVkIGluIHJlbmRlciwgc2VlICMyNTUzXG5cdFx0XHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblx0XHRcdFx0fSB3aGlsZSAoYy5fZGlydHkgJiYgKytjb3VudCA8IDI1KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSGFuZGxlIHNldFN0YXRlIGNhbGxlZCBpbiByZW5kZXIsIHNlZSAjMjU1M1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKGMuZ2V0Q2hpbGRDb250ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCA9IGFzc2lnbihhc3NpZ24oe30sIGdsb2JhbENvbnRleHQpLCBjLmdldENoaWxkQ29udGV4dCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzQ2xhc3NDb21wb25lbnQgJiYgIWlzTmV3ICYmIGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRzbmFwc2hvdCA9IGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlKTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IGlzVG9wTGV2ZWxGcmFnbWVudCA9XG5cdFx0XHRcdHRtcCAhPSBudWxsICYmIHRtcC50eXBlID09PSBGcmFnbWVudCAmJiB0bXAua2V5ID09IG51bGw7XG5cdFx0XHRsZXQgcmVuZGVyUmVzdWx0ID0gaXNUb3BMZXZlbEZyYWdtZW50ID8gdG1wLnByb3BzLmNoaWxkcmVuIDogdG1wO1xuXG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0aXNBcnJheShyZW5kZXJSZXN1bHQpID8gcmVuZGVyUmVzdWx0IDogW3JlbmRlclJlc3VsdF0sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0bmFtZXNwYWNlLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmcsXG5cdFx0XHRcdHJlZlF1ZXVlXG5cdFx0XHQpO1xuXG5cdFx0XHRjLmJhc2UgPSBuZXdWTm9kZS5fZG9tO1xuXG5cdFx0XHQvLyBXZSBzdWNjZXNzZnVsbHkgcmVuZGVyZWQgdGhpcyBWTm9kZSwgdW5zZXQgYW55IHN0b3JlZCBoeWRyYXRpb24vYmFpbG91dCBzdGF0ZTpcblx0XHRcdG5ld1ZOb2RlLl9mbGFncyAmPSBSRVNFVF9NT0RFO1xuXG5cdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRjb21taXRRdWV1ZS5wdXNoKGMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uKSB7XG5cdFx0XHRcdGMuX3BlbmRpbmdFcnJvciA9IGMuX3Byb2Nlc3NpbmdFeGNlcHRpb24gPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9IG51bGw7XG5cdFx0XHQvLyBpZiBoeWRyYXRpbmcgb3IgY3JlYXRpbmcgaW5pdGlhbCB0cmVlLCBiYWlsb3V0IHByZXNlcnZlcyBET006XG5cdFx0XHRpZiAoaXNIeWRyYXRpbmcgfHwgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHRuZXdWTm9kZS5fZmxhZ3MgfD0gaXNIeWRyYXRpbmdcblx0XHRcdFx0XHQ/IE1PREVfSFlEUkFURSB8IE1PREVfU1VTUEVOREVEXG5cdFx0XHRcdFx0OiBNT0RFX0hZRFJBVEU7XG5cblx0XHRcdFx0d2hpbGUgKG9sZERvbSAmJiBvbGREb20ubm9kZVR5cGUgPT09IDggJiYgb2xkRG9tLm5leHRTaWJsaW5nKSB7XG5cdFx0XHRcdFx0b2xkRG9tID0gb2xkRG9tLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuW2V4Y2Vzc0RvbUNoaWxkcmVuLmluZGV4T2Yob2xkRG9tKV0gPSBudWxsO1xuXHRcdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkRG9tO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRcdH1cblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgbmV3Vk5vZGUsIG9sZFZOb2RlKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoXG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPT0gbnVsbCAmJlxuXHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdCkge1xuXHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0fSBlbHNlIHtcblx0XHRuZXdWTm9kZS5fZG9tID0gZGlmZkVsZW1lbnROb2Rlcyhcblx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRuZXdWTm9kZSxcblx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdG5hbWVzcGFjZSxcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRpc0h5ZHJhdGluZyxcblx0XHRcdHJlZlF1ZXVlXG5cdFx0KTtcblx0fVxuXG5cdGlmICgodG1wID0gb3B0aW9ucy5kaWZmZWQpKSB0bXAobmV3Vk5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8Q29tcG9uZW50Pn0gY29tbWl0UXVldWUgTGlzdCBvZiBjb21wb25lbnRzXG4gKiB3aGljaCBoYXZlIGNhbGxiYWNrcyB0byBpbnZva2UgaW4gY29tbWl0Um9vdFxuICogQHBhcmFtIHtWTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCwgcmVmUXVldWUpIHtcblx0cm9vdC5fbmV4dERvbSA9IHVuZGVmaW5lZDtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHJlZlF1ZXVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXBwbHlSZWYocmVmUXVldWVbaV0sIHJlZlF1ZXVlWysraV0sIHJlZlF1ZXVlWysraV0pO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMuX2NvbW1pdCkgb3B0aW9ucy5fY29tbWl0KHJvb3QsIGNvbW1pdFF1ZXVlKTtcblxuXHRjb21taXRRdWV1ZS5zb21lKGMgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFJldXNlIHRoZSBjb21taXRRdWV1ZSB2YXJpYWJsZSBoZXJlIHNvIHRoZSB0eXBlIGNoYW5nZXNcblx0XHRcdGNvbW1pdFF1ZXVlID0gYy5fcmVuZGVyQ2FsbGJhY2tzO1xuXHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGNiID0+IHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBTZWUgYWJvdmUgY29tbWVudCBvbiBjb21taXRRdWV1ZVxuXHRcdFx0XHRjYi5jYWxsKGMpO1xuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBjLl92bm9kZSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBEaWZmIHR3byB2aXJ0dWFsIG5vZGVzIHJlcHJlc2VudGluZyBET00gZWxlbWVudFxuICogQHBhcmFtIHtQcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgdmlydHVhbCBub2Rlc1xuICogYmVpbmcgZGlmZmVkXG4gKiBAcGFyYW0ge1ZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtWTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBnbG9iYWxDb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIEN1cnJlbnQgbmFtZXNwYWNlIG9mIHRoZSBET00gbm9kZSAoSFRNTCwgU1ZHLCBvciBNYXRoTUwpXG4gKiBAcGFyYW0ge0FycmF5PFByZWFjdEVsZW1lbnQ+fSBleGNlc3NEb21DaGlsZHJlblxuICogQHBhcmFtIHtBcnJheTxDb21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHMgd2hpY2ggaGF2ZSBjYWxsYmFja3NcbiAqIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEBwYXJhbSB7YW55W119IHJlZlF1ZXVlIGFuIGFycmF5IG9mIGVsZW1lbnRzIG5lZWRlZCB0byBpbnZva2UgcmVmc1xuICogQHJldHVybnMge1ByZWFjdEVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGRpZmZFbGVtZW50Tm9kZXMoXG5cdGRvbSxcblx0bmV3Vk5vZGUsXG5cdG9sZFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRuYW1lc3BhY2UsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0aXNIeWRyYXRpbmcsXG5cdHJlZlF1ZXVlXG4pIHtcblx0bGV0IG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHM7XG5cdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXHRsZXQgbm9kZVR5cGUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKG5ld1ZOb2RlLnR5cGUpO1xuXHQvKiogQHR5cGUge2FueX0gKi9cblx0bGV0IGk7XG5cdC8qKiBAdHlwZSB7eyBfX2h0bWw/OiBzdHJpbmcgfX0gKi9cblx0bGV0IG5ld0h0bWw7XG5cdC8qKiBAdHlwZSB7eyBfX2h0bWw/OiBzdHJpbmcgfX0gKi9cblx0bGV0IG9sZEh0bWw7XG5cdC8qKiBAdHlwZSB7Q29tcG9uZW50Q2hpbGRyZW59ICovXG5cdGxldCBuZXdDaGlsZHJlbjtcblx0bGV0IHZhbHVlO1xuXHRsZXQgaW5wdXRWYWx1ZTtcblx0bGV0IGNoZWNrZWQ7XG5cblx0Ly8gVHJhY2tzIGVudGVyaW5nIGFuZCBleGl0aW5nIG5hbWVzcGFjZXMgd2hlbiBkZXNjZW5kaW5nIHRocm91Z2ggdGhlIHRyZWUuXG5cdGlmIChub2RlVHlwZSA9PT0gJ3N2ZycpIG5hbWVzcGFjZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cdGVsc2UgaWYgKG5vZGVUeXBlID09PSAnbWF0aCcpXG5cdFx0bmFtZXNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xuXHRlbHNlIGlmICghbmFtZXNwYWNlKSBuYW1lc3BhY2UgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5cblx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgZXhjZXNzRG9tQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhbHVlID0gZXhjZXNzRG9tQ2hpbGRyZW5baV07XG5cblx0XHRcdC8vIGlmIG5ld1ZOb2RlIG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiBvciB0aGUgYGRvbWBcblx0XHRcdC8vIGFyZ3VtZW50IG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiwgcmVtb3ZlIGl0IGZyb21cblx0XHRcdC8vIGV4Y2Vzc0RvbUNoaWxkcmVuIHNvIGl0IGlzbid0IGxhdGVyIHJlbW92ZWQgaW4gZGlmZkNoaWxkcmVuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdHZhbHVlICYmXG5cdFx0XHRcdCdzZXRBdHRyaWJ1dGUnIGluIHZhbHVlID09PSAhIW5vZGVUeXBlICYmXG5cdFx0XHRcdChub2RlVHlwZSA/IHZhbHVlLmxvY2FsTmFtZSA9PT0gbm9kZVR5cGUgOiB2YWx1ZS5ub2RlVHlwZSA9PT0gMylcblx0XHRcdCkge1xuXHRcdFx0XHRkb20gPSB2YWx1ZTtcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5baV0gPSBudWxsO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoZG9tID09IG51bGwpIHtcblx0XHRpZiAobm9kZVR5cGUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdQcm9wcyk7XG5cdFx0fVxuXG5cdFx0ZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuXHRcdFx0bmFtZXNwYWNlLFxuXHRcdFx0bm9kZVR5cGUsXG5cdFx0XHRuZXdQcm9wcy5pcyAmJiBuZXdQcm9wc1xuXHRcdCk7XG5cblx0XHQvLyB3ZSBhcmUgY3JlYXRpbmcgYSBuZXcgbm9kZSwgc28gd2UgY2FuIGFzc3VtZSB0aGlzIGlzIGEgbmV3IHN1YnRyZWUgKGluXG5cdFx0Ly8gY2FzZSB3ZSBhcmUgaHlkcmF0aW5nKSwgdGhpcyBkZW9wdHMgdGhlIGh5ZHJhdGVcblx0XHRpZiAoaXNIeWRyYXRpbmcpIHtcblx0XHRcdGlmIChvcHRpb25zLl9oeWRyYXRpb25NaXNtYXRjaClcblx0XHRcdFx0b3B0aW9ucy5faHlkcmF0aW9uTWlzbWF0Y2gobmV3Vk5vZGUsIGV4Y2Vzc0RvbUNoaWxkcmVuKTtcblx0XHRcdGlzSHlkcmF0aW5nID0gZmFsc2U7XG5cdFx0fVxuXHRcdC8vIHdlIGNyZWF0ZWQgYSBuZXcgcGFyZW50LCBzbyBub25lIG9mIHRoZSBwcmV2aW91c2x5IGF0dGFjaGVkIGNoaWxkcmVuIGNhbiBiZSByZXVzZWQ6XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBudWxsO1xuXHR9XG5cblx0aWYgKG5vZGVUeXBlID09PSBudWxsKSB7XG5cdFx0Ly8gRHVyaW5nIGh5ZHJhdGlvbiwgd2Ugc3RpbGwgaGF2ZSB0byBzcGxpdCBtZXJnZWQgdGV4dCBmcm9tIFNTUidkIEhUTUwuXG5cdFx0aWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyAmJiAoIWlzSHlkcmF0aW5nIHx8IGRvbS5kYXRhICE9PSBuZXdQcm9wcykpIHtcblx0XHRcdGRvbS5kYXRhID0gbmV3UHJvcHM7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIElmIGV4Y2Vzc0RvbUNoaWxkcmVuIHdhcyBub3QgbnVsbCwgcmVwb3B1bGF0ZSBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQncyBjaGlsZHJlbjpcblx0XHRleGNlc3NEb21DaGlsZHJlbiA9IGV4Y2Vzc0RvbUNoaWxkcmVuICYmIHNsaWNlLmNhbGwoZG9tLmNoaWxkTm9kZXMpO1xuXG5cdFx0b2xkUHJvcHMgPSBvbGRWTm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG5cblx0XHQvLyBJZiB3ZSBhcmUgaW4gYSBzaXR1YXRpb24gd2hlcmUgd2UgYXJlIG5vdCBoeWRyYXRpbmcgYnV0IGFyZSB1c2luZ1xuXHRcdC8vIGV4aXN0aW5nIERPTSAoZS5nLiByZXBsYWNlTm9kZSkgd2Ugc2hvdWxkIHJlYWQgdGhlIGV4aXN0aW5nIERPTVxuXHRcdC8vIGF0dHJpYnV0ZXMgdG8gZGlmZiB0aGVtXG5cdFx0aWYgKCFpc0h5ZHJhdGluZyAmJiBleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRvbGRQcm9wcyA9IHt9O1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGRvbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhbHVlID0gZG9tLmF0dHJpYnV0ZXNbaV07XG5cdFx0XHRcdG9sZFByb3BzW3ZhbHVlLm5hbWVdID0gdmFsdWUudmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpIGluIG9sZFByb3BzKSB7XG5cdFx0XHR2YWx1ZSA9IG9sZFByb3BzW2ldO1xuXHRcdFx0aWYgKGkgPT0gJ2NoaWxkcmVuJykge1xuXHRcdFx0fSBlbHNlIGlmIChpID09ICdkYW5nZXJvdXNseVNldElubmVySFRNTCcpIHtcblx0XHRcdFx0b2xkSHRtbCA9IHZhbHVlO1xuXHRcdFx0fSBlbHNlIGlmICghKGkgaW4gbmV3UHJvcHMpKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoaSA9PSAndmFsdWUnICYmICdkZWZhdWx0VmFsdWUnIGluIG5ld1Byb3BzKSB8fFxuXHRcdFx0XHRcdChpID09ICdjaGVja2VkJyAmJiAnZGVmYXVsdENoZWNrZWQnIGluIG5ld1Byb3BzKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG51bGwsIHZhbHVlLCBuYW1lc3BhY2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHByb3BzIGFyZSBub3QgZGlmZmVkIGF0IGFsbCAoaW5jbHVkaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKVxuXHRcdC8vIEBUT0RPIHdlIHNob3VsZCB3YXJuIGluIGRlYnVnIG1vZGUgd2hlbiBwcm9wcyBkb24ndCBtYXRjaCBoZXJlLlxuXHRcdGZvciAoaSBpbiBuZXdQcm9wcykge1xuXHRcdFx0dmFsdWUgPSBuZXdQcm9wc1tpXTtcblx0XHRcdGlmIChpID09ICdjaGlsZHJlbicpIHtcblx0XHRcdFx0bmV3Q2hpbGRyZW4gPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAoaSA9PSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnKSB7XG5cdFx0XHRcdG5ld0h0bWwgPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAoaSA9PSAndmFsdWUnKSB7XG5cdFx0XHRcdGlucHV0VmFsdWUgPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAoaSA9PSAnY2hlY2tlZCcpIHtcblx0XHRcdFx0Y2hlY2tlZCA9IHZhbHVlO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0KCFpc0h5ZHJhdGluZyB8fCB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykgJiZcblx0XHRcdFx0b2xkUHJvcHNbaV0gIT09IHZhbHVlXG5cdFx0XHQpIHtcblx0XHRcdFx0c2V0UHJvcGVydHkoZG9tLCBpLCB2YWx1ZSwgb2xkUHJvcHNbaV0sIG5hbWVzcGFjZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIG5ldyB2bm9kZSBkaWRuJ3QgaGF2ZSBkYW5nZXJvdXNseVNldElubmVySFRNTCwgZGlmZiBpdHMgY2hpbGRyZW5cblx0XHRpZiAobmV3SHRtbCkge1xuXHRcdFx0Ly8gQXZvaWQgcmUtYXBwbHlpbmcgdGhlIHNhbWUgJ19faHRtbCcgaWYgaXQgZGlkIG5vdCBjaGFuZ2VkIGJldHdlZW4gcmUtcmVuZGVyXG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFpc0h5ZHJhdGluZyAmJlxuXHRcdFx0XHQoIW9sZEh0bWwgfHxcblx0XHRcdFx0XHQobmV3SHRtbC5fX2h0bWwgIT09IG9sZEh0bWwuX19odG1sICYmXG5cdFx0XHRcdFx0XHRuZXdIdG1sLl9faHRtbCAhPT0gZG9tLmlubmVySFRNTCkpXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tLmlubmVySFRNTCA9IG5ld0h0bWwuX19odG1sO1xuXHRcdFx0fVxuXG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBbXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG9sZEh0bWwpIGRvbS5pbm5lckhUTUwgPSAnJztcblxuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRkb20sXG5cdFx0XHRcdGlzQXJyYXkobmV3Q2hpbGRyZW4pID8gbmV3Q2hpbGRyZW4gOiBbbmV3Q2hpbGRyZW5dLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGdsb2JhbENvbnRleHQsXG5cdFx0XHRcdG5vZGVUeXBlID09PSAnZm9yZWlnbk9iamVjdCdcblx0XHRcdFx0XHQ/ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJ1xuXHRcdFx0XHRcdDogbmFtZXNwYWNlLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuXG5cdFx0XHRcdFx0PyBleGNlc3NEb21DaGlsZHJlblswXVxuXHRcdFx0XHRcdDogb2xkVk5vZGUuX2NoaWxkcmVuICYmIGdldERvbVNpYmxpbmcob2xkVk5vZGUsIDApLFxuXHRcdFx0XHRpc0h5ZHJhdGluZyxcblx0XHRcdFx0cmVmUXVldWVcblx0XHRcdCk7XG5cblx0XHRcdC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBub3QgcGFydCBvZiBhbnkgdm5vZGUuXG5cdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKGkgPSBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGktLTsgKSB7XG5cdFx0XHRcdFx0cmVtb3ZlTm9kZShleGNlc3NEb21DaGlsZHJlbltpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBcyBhYm92ZSwgZG9uJ3QgZGlmZiBwcm9wcyBkdXJpbmcgaHlkcmF0aW9uXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0aSA9ICd2YWx1ZSc7XG5cdFx0XHRpZiAobm9kZVR5cGUgPT09ICdwcm9ncmVzcycgJiYgaW5wdXRWYWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRpbnB1dFZhbHVlICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0Ly8gIzI3NTYgRm9yIHRoZSA8cHJvZ3Jlc3M+LWVsZW1lbnQgdGhlIGluaXRpYWwgdmFsdWUgaXMgMCxcblx0XHRcdFx0Ly8gZGVzcGl0ZSB0aGUgYXR0cmlidXRlIG5vdCBiZWluZyBwcmVzZW50LiBXaGVuIHRoZSBhdHRyaWJ1dGVcblx0XHRcdFx0Ly8gaXMgbWlzc2luZyB0aGUgcHJvZ3Jlc3MgYmFyIGlzIHRyZWF0ZWQgYXMgaW5kZXRlcm1pbmF0ZS5cblx0XHRcdFx0Ly8gVG8gZml4IHRoYXQgd2UnbGwgYWx3YXlzIHVwZGF0ZSBpdCB3aGVuIGl0IGlzIDAgZm9yIHByb2dyZXNzIGVsZW1lbnRzXG5cdFx0XHRcdChpbnB1dFZhbHVlICE9PSBkb21baV0gfHxcblx0XHRcdFx0XHQobm9kZVR5cGUgPT09ICdwcm9ncmVzcycgJiYgIWlucHV0VmFsdWUpIHx8XG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBvbmx5IGZvciBJRSAxMSB0byBmaXggPHNlbGVjdD4gdmFsdWUgbm90IGJlaW5nIHVwZGF0ZWQuXG5cdFx0XHRcdFx0Ly8gVG8gYXZvaWQgYSBzdGFsZSBzZWxlY3QgdmFsdWUgd2UgbmVlZCB0byBzZXQgdGhlIG9wdGlvbi52YWx1ZVxuXHRcdFx0XHRcdC8vIGFnYWluLCB3aGljaCB0cmlnZ2VycyBJRTExIHRvIHJlLWV2YWx1YXRlIHRoZSBzZWxlY3QgdmFsdWVcblx0XHRcdFx0XHQobm9kZVR5cGUgPT09ICdvcHRpb24nICYmIGlucHV0VmFsdWUgIT09IG9sZFByb3BzW2ldKSlcblx0XHRcdCkge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIGlucHV0VmFsdWUsIG9sZFByb3BzW2ldLCBuYW1lc3BhY2UpO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0gJ2NoZWNrZWQnO1xuXHRcdFx0aWYgKGNoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiBjaGVja2VkICE9PSBkb21baV0pIHtcblx0XHRcdFx0c2V0UHJvcGVydHkoZG9tLCBpLCBjaGVja2VkLCBvbGRQcm9wc1tpXSwgbmFtZXNwYWNlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZG9tO1xufVxuXG4vKipcbiAqIEludm9rZSBvciB1cGRhdGUgYSByZWYsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0IGlzIGEgZnVuY3Rpb24gb3Igb2JqZWN0IHJlZi5cbiAqIEBwYXJhbSB7UmVmPGFueT4gJiB7IF91bm1vdW50PzogdW5rbm93biB9fSByZWZcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtWTm9kZX0gdm5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUsIHZub2RlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0bGV0IGhhc1JlZlVubW91bnQgPSB0eXBlb2YgcmVmLl91bm1vdW50ID09ICdmdW5jdGlvbic7XG5cdFx0XHRpZiAoaGFzUmVmVW5tb3VudCkge1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFRTIGRvZXNuJ3QgbGlrZSBtb3ZpbmcgbmFycm93aW5nIGNoZWNrcyBpbnRvIHZhcmlhYmxlc1xuXHRcdFx0XHRyZWYuX3VubW91bnQoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFoYXNSZWZVbm1vdW50IHx8IHZhbHVlICE9IG51bGwpIHtcblx0XHRcdFx0Ly8gU3RvcmUgdGhlIGNsZWFudXAgZnVuY3Rpb24gb24gdGhlIGZ1bmN0aW9uXG5cdFx0XHRcdC8vIGluc3RhbmNlIG9iamVjdCBpdHNlbGYgdG8gYXZvaWQgc2hhcGVcblx0XHRcdFx0Ly8gdHJhbnNpdGlvbmluZyB2bm9kZVxuXHRcdFx0XHRyZWYuX3VubW91bnQgPSByZWYodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSByZWYuY3VycmVudCA9IHZhbHVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCB2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBVbm1vdW50IGEgdmlydHVhbCBub2RlIGZyb20gdGhlIHRyZWUgYW5kIGFwcGx5IERPTSBjaGFuZ2VzXG4gKiBAcGFyYW0ge1ZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHVubW91bnRcbiAqIEBwYXJhbSB7Vk5vZGV9IHBhcmVudFZOb2RlIFRoZSBwYXJlbnQgb2YgdGhlIFZOb2RlIHRoYXQgaW5pdGlhdGVkIHRoZSB1bm1vdW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwUmVtb3ZlXSBGbGFnIHRoYXQgaW5kaWNhdGVzIHRoYXQgYSBwYXJlbnQgbm9kZSBvZiB0aGVcbiAqIGN1cnJlbnQgZWxlbWVudCBpcyBhbHJlYWR5IGRldGFjaGVkIGZyb20gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubW91bnQodm5vZGUsIHBhcmVudFZOb2RlLCBza2lwUmVtb3ZlKSB7XG5cdGxldCByO1xuXHRpZiAob3B0aW9ucy51bm1vdW50KSBvcHRpb25zLnVubW91bnQodm5vZGUpO1xuXG5cdGlmICgociA9IHZub2RlLnJlZikpIHtcblx0XHRpZiAoIXIuY3VycmVudCB8fCByLmN1cnJlbnQgPT09IHZub2RlLl9kb20pIHtcblx0XHRcdGFwcGx5UmVmKHIsIG51bGwsIHBhcmVudFZOb2RlKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoKHIgPSB2bm9kZS5fY29tcG9uZW50KSAhPSBudWxsKSB7XG5cdFx0aWYgKHIuY29tcG9uZW50V2lsbFVubW91bnQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBwYXJlbnRWTm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ci5iYXNlID0gci5fcGFyZW50RG9tID0gbnVsbDtcblx0fVxuXG5cdGlmICgociA9IHZub2RlLl9jaGlsZHJlbikpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHIubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyW2ldKSB7XG5cdFx0XHRcdHVubW91bnQoXG5cdFx0XHRcdFx0cltpXSxcblx0XHRcdFx0XHRwYXJlbnRWTm9kZSxcblx0XHRcdFx0XHRza2lwUmVtb3ZlIHx8IHR5cGVvZiB2bm9kZS50eXBlICE9ICdmdW5jdGlvbidcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIXNraXBSZW1vdmUpIHtcblx0XHRyZW1vdmVOb2RlKHZub2RlLl9kb20pO1xuXHR9XG5cblx0Ly8gTXVzdCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdG8gcHJvcGVybHkgY2xlYW4gdXAgYF9uZXh0RG9tYFxuXHQvLyBmb3Igd2hpY2ggYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUuIFNlZSBjb21tZW50IGluIGBjcmVhdGUtZWxlbWVudC5qc2Bcblx0dm5vZGUuX2NvbXBvbmVudCA9IHZub2RlLl9wYXJlbnQgPSB2bm9kZS5fZG9tID0gdm5vZGUuX25leHREb20gPSB1bmRlZmluZWQ7XG59XG5cbi8qKiBUaGUgYC5yZW5kZXIoKWAgbWV0aG9kIGZvciBhIFBGQyBiYWNraW5nIGluc3RhbmNlLiAqL1xuZnVuY3Rpb24gZG9SZW5kZXIocHJvcHMsIHN0YXRlLCBjb250ZXh0KSB7XG5cdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KTtcbn1cbiIsICJpbXBvcnQgeyBFTVBUWV9PQkogfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb21taXRSb290LCBkaWZmIH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIFJlbmRlciBhIFByZWFjdCB2aXJ0dWFsIG5vZGUgaW50byBhIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge0NvbXBvbmVudENoaWxkfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHJlbmRlclxuICogQHBhcmFtIHtQcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvXG4gKiBAcGFyYW0ge1ByZWFjdEVsZW1lbnQgfCBvYmplY3R9IFtyZXBsYWNlTm9kZV0gT3B0aW9uYWw6IEF0dGVtcHQgdG8gcmUtdXNlIGFuXG4gKiBleGlzdGluZyBET00gdHJlZSByb290ZWQgYXQgYHJlcGxhY2VOb2RlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHZub2RlLCBwYXJlbnREb20sIHJlcGxhY2VOb2RlKSB7XG5cdGlmIChvcHRpb25zLl9yb290KSBvcHRpb25zLl9yb290KHZub2RlLCBwYXJlbnREb20pO1xuXG5cdC8vIFdlIGFidXNlIHRoZSBgcmVwbGFjZU5vZGVgIHBhcmFtZXRlciBpbiBgaHlkcmF0ZSgpYCB0byBzaWduYWwgaWYgd2UgYXJlIGluXG5cdC8vIGh5ZHJhdGlvbiBtb2RlIG9yIG5vdCBieSBwYXNzaW5nIHRoZSBgaHlkcmF0ZWAgZnVuY3Rpb24gaW5zdGVhZCBvZiBhIERPTVxuXHQvLyBlbGVtZW50Li5cblx0bGV0IGlzSHlkcmF0aW5nID0gdHlwZW9mIHJlcGxhY2VOb2RlID09ICdmdW5jdGlvbic7XG5cblx0Ly8gVG8gYmUgYWJsZSB0byBzdXBwb3J0IGNhbGxpbmcgYHJlbmRlcigpYCBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZVxuXHQvLyBET00gbm9kZSwgd2UgbmVlZCB0byBvYnRhaW4gYSByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzIHRyZWUuIFdlIGRvXG5cdC8vIHRoaXMgYnkgYXNzaWduaW5nIGEgbmV3IGBfY2hpbGRyZW5gIHByb3BlcnR5IHRvIERPTSBub2RlcyB3aGljaCBwb2ludHNcblx0Ly8gdG8gdGhlIGxhc3QgcmVuZGVyZWQgdHJlZS4gQnkgZGVmYXVsdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50LCB3aGljaFxuXHQvLyBtZWFucyB0aGF0IHdlIGFyZSBtb3VudGluZyBhIG5ldyB0cmVlIGZvciB0aGUgZmlyc3QgdGltZS5cblx0bGV0IG9sZFZOb2RlID0gaXNIeWRyYXRpbmdcblx0XHQ/IG51bGxcblx0XHQ6IChyZXBsYWNlTm9kZSAmJiByZXBsYWNlTm9kZS5fY2hpbGRyZW4pIHx8IHBhcmVudERvbS5fY2hpbGRyZW47XG5cblx0dm5vZGUgPSAoKCFpc0h5ZHJhdGluZyAmJiByZXBsYWNlTm9kZSkgfHwgcGFyZW50RG9tKS5fY2hpbGRyZW4gPVxuXHRcdGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFt2bm9kZV0pO1xuXG5cdC8vIExpc3Qgb2YgZWZmZWN0cyB0aGF0IG5lZWQgdG8gYmUgY2FsbGVkIGFmdGVyIGRpZmZpbmcuXG5cdGxldCBjb21taXRRdWV1ZSA9IFtdLFxuXHRcdHJlZlF1ZXVlID0gW107XG5cdGRpZmYoXG5cdFx0cGFyZW50RG9tLFxuXHRcdC8vIERldGVybWluZSB0aGUgbmV3IHZub2RlIHRyZWUgYW5kIHN0b3JlIGl0IG9uIHRoZSBET00gZWxlbWVudCBvblxuXHRcdC8vIG91ciBjdXN0b20gYF9jaGlsZHJlbmAgcHJvcGVydHkuXG5cdFx0dm5vZGUsXG5cdFx0b2xkVk5vZGUgfHwgRU1QVFlfT0JKLFxuXHRcdEVNUFRZX09CSixcblx0XHRwYXJlbnREb20ubmFtZXNwYWNlVVJJLFxuXHRcdCFpc0h5ZHJhdGluZyAmJiByZXBsYWNlTm9kZVxuXHRcdFx0PyBbcmVwbGFjZU5vZGVdXG5cdFx0XHQ6IG9sZFZOb2RlXG5cdFx0XHRcdD8gbnVsbFxuXHRcdFx0XHQ6IHBhcmVudERvbS5maXJzdENoaWxkXG5cdFx0XHRcdFx0PyBzbGljZS5jYWxsKHBhcmVudERvbS5jaGlsZE5vZGVzKVxuXHRcdFx0XHRcdDogbnVsbCxcblx0XHRjb21taXRRdWV1ZSxcblx0XHQhaXNIeWRyYXRpbmcgJiYgcmVwbGFjZU5vZGVcblx0XHRcdD8gcmVwbGFjZU5vZGVcblx0XHRcdDogb2xkVk5vZGVcblx0XHRcdFx0PyBvbGRWTm9kZS5fZG9tXG5cdFx0XHRcdDogcGFyZW50RG9tLmZpcnN0Q2hpbGQsXG5cdFx0aXNIeWRyYXRpbmcsXG5cdFx0cmVmUXVldWVcblx0KTtcblxuXHQvLyBGbHVzaCBhbGwgcXVldWVkIGVmZmVjdHNcblx0Y29tbWl0Um9vdChjb21taXRRdWV1ZSwgdm5vZGUsIHJlZlF1ZXVlKTtcbn1cblxuLyoqXG4gKiBVcGRhdGUgYW4gZXhpc3RpbmcgRE9NIGVsZW1lbnQgd2l0aCBkYXRhIGZyb20gYSBQcmVhY3QgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge0NvbXBvbmVudENoaWxkfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHJlbmRlclxuICogQHBhcmFtIHtQcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHRvIHVwZGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZSh2bm9kZSwgcGFyZW50RG9tKSB7XG5cdHJlbmRlcih2bm9kZSwgcGFyZW50RG9tLCBoeWRyYXRlKTtcbn1cbiIsICJpbXBvcnQgeyBhc3NpZ24sIHNsaWNlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGNyZWF0ZVZOb2RlIH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBnaXZlbiBWTm9kZSwgb3B0aW9uYWxseSBhZGRpbmcgYXR0cmlidXRlcy9wcm9wcyBhbmQgcmVwbGFjaW5nIGl0c1xuICogY2hpbGRyZW4uXG4gKiBAcGFyYW0ge1ZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBET00gZWxlbWVudCB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIEF0dHJpYnV0ZXMvcHJvcHMgdG8gYWRkIHdoZW4gY2xvbmluZ1xuICogQHBhcmFtIHtBcnJheTxDb21wb25lbnRDaGlsZHJlbj59IHJlc3QgQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHdpbGwgYmUgdXNlZFxuICogYXMgcmVwbGFjZW1lbnQgY2hpbGRyZW4uXG4gKiBAcmV0dXJucyB7Vk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVsZW1lbnQodm5vZGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0gYXNzaWduKHt9LCB2bm9kZS5wcm9wcyksXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRpO1xuXG5cdGxldCBkZWZhdWx0UHJvcHM7XG5cblx0aWYgKHZub2RlLnR5cGUgJiYgdm5vZGUudHlwZS5kZWZhdWx0UHJvcHMpIHtcblx0XHRkZWZhdWx0UHJvcHMgPSB2bm9kZS50eXBlLmRlZmF1bHRQcm9wcztcblx0fVxuXG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdrZXknKSBrZXkgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChpID09ICdyZWYnKSByZWYgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChwcm9wc1tpXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSBkZWZhdWx0UHJvcHNbaV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHRcdH1cblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9XG5cdFx0XHRhcmd1bWVudHMubGVuZ3RoID4gMyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGNoaWxkcmVuO1xuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKFxuXHRcdHZub2RlLnR5cGUsXG5cdFx0bm9ybWFsaXplZFByb3BzLFxuXHRcdGtleSB8fCB2bm9kZS5rZXksXG5cdFx0cmVmIHx8IHZub2RlLnJlZixcblx0XHRudWxsXG5cdCk7XG59XG4iLCAiLyoqXG4gKiBGaW5kIHRoZSBjbG9zZXN0IGVycm9yIGJvdW5kYXJ5IHRvIGEgdGhyb3duIGVycm9yIGFuZCBjYWxsIGl0XG4gKiBAcGFyYW0ge29iamVjdH0gZXJyb3IgVGhlIHRocm93biB2YWx1ZVxuICogQHBhcmFtIHtWTm9kZX0gdm5vZGUgVGhlIHZub2RlIHRoYXQgdGhyZXcgdGhlIGVycm9yIHRoYXQgd2FzIGNhdWdodCAoZXhjZXB0XG4gKiBmb3IgdW5tb3VudGluZyB3aGVuIHRoaXMgcGFyYW1ldGVyIGlzIHRoZSBoaWdoZXN0IHBhcmVudCB0aGF0IHdhcyBiZWluZ1xuICogdW5tb3VudGVkKVxuICogQHBhcmFtIHtWTm9kZX0gW29sZFZOb2RlXVxuICogQHBhcmFtIHtFcnJvckluZm99IFtlcnJvckluZm9dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hFcnJvcihlcnJvciwgdm5vZGUsIG9sZFZOb2RlLCBlcnJvckluZm8pIHtcblx0LyoqIEB0eXBlIHtDb21wb25lbnR9ICovXG5cdGxldCBjb21wb25lbnQsXG5cdFx0LyoqIEB0eXBlIHtDb21wb25lbnRUeXBlfSAqL1xuXHRcdGN0b3IsXG5cdFx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRcdGhhbmRsZWQ7XG5cblx0Zm9yICg7ICh2bm9kZSA9IHZub2RlLl9wYXJlbnQpOyApIHtcblx0XHRpZiAoKGNvbXBvbmVudCA9IHZub2RlLl9jb21wb25lbnQpICYmICFjb21wb25lbnQuX3Byb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGN0b3IgPSBjb21wb25lbnQuY29uc3RydWN0b3I7XG5cblx0XHRcdFx0aWYgKGN0b3IgJiYgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbXBvbmVudC5zZXRTdGF0ZShjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikpO1xuXHRcdFx0XHRcdGhhbmRsZWQgPSBjb21wb25lbnQuX2RpcnR5O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8gfHwge30pO1xuXHRcdFx0XHRcdGhhbmRsZWQgPSBjb21wb25lbnQuX2RpcnR5O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVGhpcyBpcyBhbiBlcnJvciBib3VuZGFyeS4gTWFyayBpdCBhcyBoYXZpbmcgYmFpbGVkIG91dCwgYW5kIHdoZXRoZXIgaXQgd2FzIG1pZC1oeWRyYXRpb24uXG5cdFx0XHRcdGlmIChoYW5kbGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIChjb21wb25lbnQuX3BlbmRpbmdFcnJvciA9IGNvbXBvbmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IGVycm9yO1xufVxuIiwgImltcG9ydCB7IG9wdGlvbnMgYXMgX29wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SW5kZXg7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IGN1cnJlbnRDb21wb25lbnQ7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IHByZXZpb3VzQ29tcG9uZW50O1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SG9vayA9IDA7XG5cbi8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn0gKi9cbmxldCBhZnRlclBhaW50RWZmZWN0cyA9IFtdO1xuXG4vLyBDYXN0IHRvIHVzZSBpbnRlcm5hbCBPcHRpb25zIHR5cGVcbmNvbnN0IG9wdGlvbnMgPSAvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLk9wdGlvbnN9ICovIChfb3B0aW9ucyk7XG5cbmxldCBvbGRCZWZvcmVEaWZmID0gb3B0aW9ucy5fZGlmZjtcbmxldCBvbGRCZWZvcmVSZW5kZXIgPSBvcHRpb25zLl9yZW5kZXI7XG5sZXQgb2xkQWZ0ZXJEaWZmID0gb3B0aW9ucy5kaWZmZWQ7XG5sZXQgb2xkQ29tbWl0ID0gb3B0aW9ucy5fY29tbWl0O1xubGV0IG9sZEJlZm9yZVVubW91bnQgPSBvcHRpb25zLnVubW91bnQ7XG5sZXQgb2xkUm9vdCA9IG9wdGlvbnMuX3Jvb3Q7XG5cbmNvbnN0IFJBRl9USU1FT1VUID0gMTAwO1xubGV0IHByZXZSYWY7XG5cbi8qKiBAdHlwZSB7KHZub2RlOiBpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZSkgPT4gdm9pZH0gKi9cbm9wdGlvbnMuX2RpZmYgPSB2bm9kZSA9PiB7XG5cdGN1cnJlbnRDb21wb25lbnQgPSBudWxsO1xuXHRpZiAob2xkQmVmb3JlRGlmZikgb2xkQmVmb3JlRGlmZih2bm9kZSk7XG59O1xuXG5vcHRpb25zLl9yb290ID0gKHZub2RlLCBwYXJlbnREb20pID0+IHtcblx0aWYgKHZub2RlICYmIHBhcmVudERvbS5fY2hpbGRyZW4gJiYgcGFyZW50RG9tLl9jaGlsZHJlbi5fbWFzaykge1xuXHRcdHZub2RlLl9tYXNrID0gcGFyZW50RG9tLl9jaGlsZHJlbi5fbWFzaztcblx0fVxuXG5cdGlmIChvbGRSb290KSBvbGRSb290KHZub2RlLCBwYXJlbnREb20pO1xufTtcblxuLyoqIEB0eXBlIHsodm5vZGU6IGltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlKSA9PiB2b2lkfSAqL1xub3B0aW9ucy5fcmVuZGVyID0gdm5vZGUgPT4ge1xuXHRpZiAob2xkQmVmb3JlUmVuZGVyKSBvbGRCZWZvcmVSZW5kZXIodm5vZGUpO1xuXG5cdGN1cnJlbnRDb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50O1xuXHRjdXJyZW50SW5kZXggPSAwO1xuXG5cdGNvbnN0IGhvb2tzID0gY3VycmVudENvbXBvbmVudC5fX2hvb2tzO1xuXHRpZiAoaG9va3MpIHtcblx0XHRpZiAocHJldmlvdXNDb21wb25lbnQgPT09IGN1cnJlbnRDb21wb25lbnQpIHtcblx0XHRcdGhvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdFx0Y3VycmVudENvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRob29rcy5fbGlzdC5mb3JFYWNoKGhvb2tJdGVtID0+IHtcblx0XHRcdFx0aWYgKGhvb2tJdGVtLl9uZXh0VmFsdWUpIHtcblx0XHRcdFx0XHRob29rSXRlbS5fdmFsdWUgPSBob29rSXRlbS5fbmV4dFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhvb2tJdGVtLl9wZW5kaW5nQXJncyA9IGhvb2tJdGVtLl9uZXh0VmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aG9va3MuX3BlbmRpbmdFZmZlY3RzLmZvckVhY2goaW52b2tlQ2xlYW51cCk7XG5cdFx0XHRob29rcy5fcGVuZGluZ0VmZmVjdHMuZm9yRWFjaChpbnZva2VFZmZlY3QpO1xuXHRcdFx0aG9va3MuX3BlbmRpbmdFZmZlY3RzID0gW107XG5cdFx0XHRjdXJyZW50SW5kZXggPSAwO1xuXHRcdH1cblx0fVxuXHRwcmV2aW91c0NvbXBvbmVudCA9IGN1cnJlbnRDb21wb25lbnQ7XG59O1xuXG4vKiogQHR5cGUgeyh2bm9kZTogaW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGUpID0+IHZvaWR9ICovXG5vcHRpb25zLmRpZmZlZCA9IHZub2RlID0+IHtcblx0aWYgKG9sZEFmdGVyRGlmZikgb2xkQWZ0ZXJEaWZmKHZub2RlKTtcblxuXHRjb25zdCBjID0gdm5vZGUuX2NvbXBvbmVudDtcblx0aWYgKGMgJiYgYy5fX2hvb2tzKSB7XG5cdFx0aWYgKGMuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMubGVuZ3RoKSBhZnRlclBhaW50KGFmdGVyUGFpbnRFZmZlY3RzLnB1c2goYykpO1xuXHRcdGMuX19ob29rcy5fbGlzdC5mb3JFYWNoKGhvb2tJdGVtID0+IHtcblx0XHRcdGlmIChob29rSXRlbS5fcGVuZGluZ0FyZ3MpIHtcblx0XHRcdFx0aG9va0l0ZW0uX2FyZ3MgPSBob29rSXRlbS5fcGVuZGluZ0FyZ3M7XG5cdFx0XHR9XG5cdFx0XHRob29rSXRlbS5fcGVuZGluZ0FyZ3MgPSB1bmRlZmluZWQ7XG5cdFx0fSk7XG5cdH1cblx0cHJldmlvdXNDb21wb25lbnQgPSBjdXJyZW50Q29tcG9uZW50ID0gbnVsbDtcbn07XG5cbi8vIFRPRE86IEltcHJvdmUgdHlwaW5nIG9mIGNvbW1pdFF1ZXVlIHBhcmFtZXRlclxuLyoqIEB0eXBlIHsodm5vZGU6IGltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlLCBjb21taXRRdWV1ZTogYW55KSA9PiB2b2lkfSAqL1xub3B0aW9ucy5fY29tbWl0ID0gKHZub2RlLCBjb21taXRRdWV1ZSkgPT4ge1xuXHRjb21taXRRdWV1ZS5zb21lKGNvbXBvbmVudCA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goaW52b2tlQ2xlYW51cCk7XG5cdFx0XHRjb21wb25lbnQuX3JlbmRlckNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmZpbHRlcihjYiA9PlxuXHRcdFx0XHRjYi5fdmFsdWUgPyBpbnZva2VFZmZlY3QoY2IpIDogdHJ1ZVxuXHRcdFx0KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGMgPT4ge1xuXHRcdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzKSBjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdH0pO1xuXHRcdFx0Y29tbWl0UXVldWUgPSBbXTtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgY29tcG9uZW50Ll92bm9kZSk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAob2xkQ29tbWl0KSBvbGRDb21taXQodm5vZGUsIGNvbW1pdFF1ZXVlKTtcbn07XG5cbi8qKiBAdHlwZSB7KHZub2RlOiBpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZSkgPT4gdm9pZH0gKi9cbm9wdGlvbnMudW5tb3VudCA9IHZub2RlID0+IHtcblx0aWYgKG9sZEJlZm9yZVVubW91bnQpIG9sZEJlZm9yZVVubW91bnQodm5vZGUpO1xuXG5cdGNvbnN0IGMgPSB2bm9kZS5fY29tcG9uZW50O1xuXHRpZiAoYyAmJiBjLl9faG9va3MpIHtcblx0XHRsZXQgaGFzRXJyb3JlZDtcblx0XHRjLl9faG9va3MuX2xpc3QuZm9yRWFjaChzID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGludm9rZUNsZWFudXAocyk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGhhc0Vycm9yZWQgPSBlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGMuX19ob29rcyA9IHVuZGVmaW5lZDtcblx0XHRpZiAoaGFzRXJyb3JlZCkgb3B0aW9ucy5fY2F0Y2hFcnJvcihoYXNFcnJvcmVkLCBjLl92bm9kZSk7XG5cdH1cbn07XG5cbi8qKlxuICogR2V0IGEgaG9vaydzIHN0YXRlIGZyb20gdGhlIGN1cnJlbnRDb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGhvb2sgdG8gZ2V0XG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZSBUaGUgaW5kZXggb2YgdGhlIGhvb2sgdG8gZ2V0XG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBnZXRIb29rU3RhdGUoaW5kZXgsIHR5cGUpIHtcblx0aWYgKG9wdGlvbnMuX2hvb2spIHtcblx0XHRvcHRpb25zLl9ob29rKGN1cnJlbnRDb21wb25lbnQsIGluZGV4LCBjdXJyZW50SG9vayB8fCB0eXBlKTtcblx0fVxuXHRjdXJyZW50SG9vayA9IDA7XG5cblx0Ly8gTGFyZ2VseSBpbnNwaXJlZCBieTpcblx0Ly8gKiBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbC1rbGVpbi9mdW5jeS5qcy9ibG9iL2Y2YmU3MzQ2OGU2ZWM0NmIwZmY1YWEzY2M0YzliYWY3MmEyOTAyNWEvc3JjL2hvb2tzL2NvcmVfaG9va3MubWpzXG5cdC8vICogaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWwta2xlaW4vZnVuY3kuanMvYmxvYi82NTBiZWFhNThjNDNjMzNhNzQ4MjBhM2M5OGIzYzcwNzljZjJlMzMzL3NyYy9yZW5kZXJlci5tanNcblx0Ly8gT3RoZXIgaW1wbGVtZW50YXRpb25zIHRvIGxvb2sgYXQ6XG5cdC8vICogaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL21ub3gwNXFwOFxuXHRjb25zdCBob29rcyA9XG5cdFx0Y3VycmVudENvbXBvbmVudC5fX2hvb2tzIHx8XG5cdFx0KGN1cnJlbnRDb21wb25lbnQuX19ob29rcyA9IHtcblx0XHRcdF9saXN0OiBbXSxcblx0XHRcdF9wZW5kaW5nRWZmZWN0czogW11cblx0XHR9KTtcblxuXHRpZiAoaW5kZXggPj0gaG9va3MuX2xpc3QubGVuZ3RoKSB7XG5cdFx0aG9va3MuX2xpc3QucHVzaCh7fSk7XG5cdH1cblxuXHRyZXR1cm4gaG9va3MuX2xpc3RbaW5kZXhdO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7dW5rbm93bn0gU1xuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5EaXNwYXRjaDxpbXBvcnQoJy4vaW5kZXgnKS5TdGF0ZVVwZGF0ZXI8Uz4+fSBbaW5pdGlhbFN0YXRlXVxuICogQHJldHVybnMge1tTLCAoc3RhdGU6IFMpID0+IHZvaWRdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG5cdGN1cnJlbnRIb29rID0gMTtcblx0cmV0dXJuIHVzZVJlZHVjZXIoaW52b2tlT3JSZXR1cm4sIGluaXRpYWxTdGF0ZSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBTXG4gKiBAdGVtcGxhdGUge3Vua25vd259IEFcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2luZGV4JykuUmVkdWNlcjxTLCBBPn0gcmVkdWNlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5EaXNwYXRjaDxpbXBvcnQoJy4vaW5kZXgnKS5TdGF0ZVVwZGF0ZXI8Uz4+fSBpbml0aWFsU3RhdGVcbiAqIEBwYXJhbSB7KGluaXRpYWxTdGF0ZTogYW55KSA9PiB2b2lkfSBbaW5pdF1cbiAqIEByZXR1cm5zIHtbIFMsIChzdGF0ZTogUykgPT4gdm9pZCBdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGluaXQpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5SZWR1Y2VySG9va1N0YXRlfSAqL1xuXHRjb25zdCBob29rU3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyssIDIpO1xuXHRob29rU3RhdGUuX3JlZHVjZXIgPSByZWR1Y2VyO1xuXHRpZiAoIWhvb2tTdGF0ZS5fY29tcG9uZW50KSB7XG5cdFx0aG9va1N0YXRlLl92YWx1ZSA9IFtcblx0XHRcdCFpbml0ID8gaW52b2tlT3JSZXR1cm4odW5kZWZpbmVkLCBpbml0aWFsU3RhdGUpIDogaW5pdChpbml0aWFsU3RhdGUpLFxuXG5cdFx0XHRhY3Rpb24gPT4ge1xuXHRcdFx0XHRjb25zdCBjdXJyZW50VmFsdWUgPSBob29rU3RhdGUuX25leHRWYWx1ZVxuXHRcdFx0XHRcdD8gaG9va1N0YXRlLl9uZXh0VmFsdWVbMF1cblx0XHRcdFx0XHQ6IGhvb2tTdGF0ZS5fdmFsdWVbMF07XG5cdFx0XHRcdGNvbnN0IG5leHRWYWx1ZSA9IGhvb2tTdGF0ZS5fcmVkdWNlcihjdXJyZW50VmFsdWUsIGFjdGlvbik7XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG5cdFx0XHRcdFx0aG9va1N0YXRlLl9uZXh0VmFsdWUgPSBbbmV4dFZhbHVlLCBob29rU3RhdGUuX3ZhbHVlWzFdXTtcblx0XHRcdFx0XHRob29rU3RhdGUuX2NvbXBvbmVudC5zZXRTdGF0ZSh7fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdO1xuXG5cdFx0aG9va1N0YXRlLl9jb21wb25lbnQgPSBjdXJyZW50Q29tcG9uZW50O1xuXG5cdFx0aWYgKCFjdXJyZW50Q29tcG9uZW50Ll9oYXNTY3VGcm9tSG9va3MpIHtcblx0XHRcdGN1cnJlbnRDb21wb25lbnQuX2hhc1NjdUZyb21Ib29rcyA9IHRydWU7XG5cdFx0XHRsZXQgcHJldlNjdSA9IGN1cnJlbnRDb21wb25lbnQuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuXHRcdFx0Y29uc3QgcHJldkNXVSA9IGN1cnJlbnRDb21wb25lbnQuY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuXHRcdFx0Ly8gSWYgd2UncmUgZGVhbGluZyB3aXRoIGEgZm9yY2VkIHVwZGF0ZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCB3aWxsXG5cdFx0XHQvLyBub3QgYmUgY2FsbGVkLiBCdXQgd2UgdXNlIHRoYXQgdG8gdXBkYXRlIHRoZSBob29rIHZhbHVlcywgc28gd2Vcblx0XHRcdC8vIG5lZWQgdG8gY2FsbCBpdC5cblx0XHRcdGN1cnJlbnRDb21wb25lbnQuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIChwLCBzLCBjKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9mb3JjZSkge1xuXHRcdFx0XHRcdGxldCB0bXAgPSBwcmV2U2N1O1xuXHRcdFx0XHRcdC8vIENsZWFyIHRvIGF2b2lkIG90aGVyIHNDVSBob29rcyBmcm9tIGJlaW5nIGNhbGxlZFxuXHRcdFx0XHRcdHByZXZTY3UgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0dXBkYXRlSG9va1N0YXRlKHAsIHMsIGMpO1xuXHRcdFx0XHRcdHByZXZTY3UgPSB0bXA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocHJldkNXVSkgcHJldkNXVS5jYWxsKHRoaXMsIHAsIHMsIGMpO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gVGhpcyBTQ1UgaGFzIHRoZSBwdXJwb3NlIG9mIGJhaWxpbmcgb3V0IGFmdGVyIHJlcGVhdGVkIHVwZGF0ZXNcblx0XHRcdC8vIHRvIHN0YXRlZnVsIGhvb2tzLlxuXHRcdFx0Ly8gd2Ugc3RvcmUgdGhlIG5leHQgdmFsdWUgaW4gX25leHRWYWx1ZVswXSBhbmQga2VlcCBkb2luZyB0aGF0IGZvciBhbGxcblx0XHRcdC8vIHN0YXRlIHNldHRlcnMsIGlmIHdlIGhhdmUgbmV4dCBzdGF0ZXMgYW5kXG5cdFx0XHQvLyBhbGwgbmV4dCBzdGF0ZXMgd2l0aGluIGEgY29tcG9uZW50IGVuZCB1cCBiZWluZyBlcXVhbCB0byB0aGVpciBvcmlnaW5hbCBzdGF0ZVxuXHRcdFx0Ly8gd2UgYXJlIHNhZmUgdG8gYmFpbCBvdXQgZm9yIHRoaXMgc3BlY2lmaWMgY29tcG9uZW50LlxuXHRcdFx0LyoqXG5cdFx0XHQgKlxuXHRcdFx0ICogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudFtcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXX1cblx0XHRcdCAqL1xuXHRcdFx0Ly8gQHRzLWlnbm9yZSAtIFdlIGRvbid0IHVzZSBUUyB0byBkb3dudHJhbnNwaWxlXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG5cdFx0XHRmdW5jdGlvbiB1cGRhdGVIb29rU3RhdGUocCwgcywgYykge1xuXHRcdFx0XHRpZiAoIWhvb2tTdGF0ZS5fY29tcG9uZW50Ll9faG9va3MpIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdC8qKiBAdHlwZSB7KHg6IGltcG9ydCgnLi9pbnRlcm5hbCcpLkhvb2tTdGF0ZSkgPT4geCBpcyBpbXBvcnQoJy4vaW50ZXJuYWwnKS5SZWR1Y2VySG9va1N0YXRlfSAqL1xuXHRcdFx0XHRjb25zdCBpc1N0YXRlSG9vayA9IHggPT4gISF4Ll9jb21wb25lbnQ7XG5cdFx0XHRcdGNvbnN0IHN0YXRlSG9va3MgPVxuXHRcdFx0XHRcdGhvb2tTdGF0ZS5fY29tcG9uZW50Ll9faG9va3MuX2xpc3QuZmlsdGVyKGlzU3RhdGVIb29rKTtcblxuXHRcdFx0XHRjb25zdCBhbGxIb29rc0VtcHR5ID0gc3RhdGVIb29rcy5ldmVyeSh4ID0+ICF4Ll9uZXh0VmFsdWUpO1xuXHRcdFx0XHQvLyBXaGVuIHdlIGhhdmUgbm8gdXBkYXRlZCBob29rcyBpbiB0aGUgY29tcG9uZW50IHdlIGludm9rZSB0aGUgcHJldmlvdXMgU0NVIG9yXG5cdFx0XHRcdC8vIHRyYXZlcnNlIHRoZSBWRE9NIHRyZWUgZnVydGhlci5cblx0XHRcdFx0aWYgKGFsbEhvb2tzRW1wdHkpIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJldlNjdSA/IHByZXZTY3UuY2FsbCh0aGlzLCBwLCBzLCBjKSA6IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSBjaGVjayB3aGV0aGVyIHdlIGhhdmUgY29tcG9uZW50cyB3aXRoIGEgbmV4dFZhbHVlIHNldCB0aGF0XG5cdFx0XHRcdC8vIGhhdmUgdmFsdWVzIHRoYXQgYXJlbid0IGVxdWFsIHRvIG9uZSBhbm90aGVyIHRoaXMgcHVzaGVzXG5cdFx0XHRcdC8vIHVzIHRvIHVwZGF0ZSBmdXJ0aGVyIGRvd24gdGhlIHRyZWVcblx0XHRcdFx0bGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0XHRzdGF0ZUhvb2tzLmZvckVhY2goaG9va0l0ZW0gPT4ge1xuXHRcdFx0XHRcdGlmIChob29rSXRlbS5fbmV4dFZhbHVlKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBjdXJyZW50VmFsdWUgPSBob29rSXRlbS5fdmFsdWVbMF07XG5cdFx0XHRcdFx0XHRob29rSXRlbS5fdmFsdWUgPSBob29rSXRlbS5fbmV4dFZhbHVlO1xuXHRcdFx0XHRcdFx0aG9va0l0ZW0uX25leHRWYWx1ZSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgIT09IGhvb2tJdGVtLl92YWx1ZVswXSkgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBzaG91bGRVcGRhdGUgfHwgaG9va1N0YXRlLl9jb21wb25lbnQucHJvcHMgIT09IHBcblx0XHRcdFx0XHQ/IHByZXZTY3Vcblx0XHRcdFx0XHRcdD8gcHJldlNjdS5jYWxsKHRoaXMsIHAsIHMsIGMpXG5cdFx0XHRcdFx0XHQ6IHRydWVcblx0XHRcdFx0XHQ6IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50Q29tcG9uZW50LnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHVwZGF0ZUhvb2tTdGF0ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gaG9va1N0YXRlLl9uZXh0VmFsdWUgfHwgaG9va1N0YXRlLl92YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdH0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBhcmdzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVmZmVjdChjYWxsYmFjaywgYXJncykge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdEhvb2tTdGF0ZX0gKi9cblx0Y29uc3Qgc3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyssIDMpO1xuXHRpZiAoIW9wdGlvbnMuX3NraXBFZmZlY3RzICYmIGFyZ3NDaGFuZ2VkKHN0YXRlLl9hcmdzLCBhcmdzKSkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IGNhbGxiYWNrO1xuXHRcdHN0YXRlLl9wZW5kaW5nQXJncyA9IGFyZ3M7XG5cblx0XHRjdXJyZW50Q29tcG9uZW50Ll9faG9va3MuX3BlbmRpbmdFZmZlY3RzLnB1c2goc3RhdGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3R9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge3Vua25vd25bXX0gYXJnc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXRFZmZlY3QoY2FsbGJhY2ssIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrLCA0KTtcblx0aWYgKCFvcHRpb25zLl9za2lwRWZmZWN0cyAmJiBhcmdzQ2hhbmdlZChzdGF0ZS5fYXJncywgYXJncykpIHtcblx0XHRzdGF0ZS5fdmFsdWUgPSBjYWxsYmFjaztcblx0XHRzdGF0ZS5fcGVuZGluZ0FyZ3MgPSBhcmdzO1xuXG5cdFx0Y3VycmVudENvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goc3RhdGUpO1xuXHR9XG59XG5cbi8qKiBAdHlwZSB7KGluaXRpYWxWYWx1ZTogdW5rbm93bikgPT4gdW5rbm93bn0gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWYoaW5pdGlhbFZhbHVlKSB7XG5cdGN1cnJlbnRIb29rID0gNTtcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH0pLCBbXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJlZlxuICogQHBhcmFtIHsoKSA9PiBvYmplY3R9IGNyZWF0ZUhhbmRsZVxuICogQHBhcmFtIHt1bmtub3duW119IGFyZ3NcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZUhhbmRsZSwgYXJncykge1xuXHRjdXJyZW50SG9vayA9IDY7XG5cdHVzZUxheW91dEVmZmVjdChcblx0XHQoKSA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIHJlZiA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJlZihjcmVhdGVIYW5kbGUoKSk7XG5cdFx0XHRcdHJldHVybiAoKSA9PiByZWYobnVsbCk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlZikge1xuXHRcdFx0XHRyZWYuY3VycmVudCA9IGNyZWF0ZUhhbmRsZSgpO1xuXHRcdFx0XHRyZXR1cm4gKCkgPT4gKHJlZi5jdXJyZW50ID0gbnVsbCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcmdzID09IG51bGwgPyBhcmdzIDogYXJncy5jb25jYXQocmVmKVxuXHQpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7dW5rbm93bn0gVFxuICogQHBhcmFtIHsoKSA9PiBUfSBmYWN0b3J5XG4gKiBAcGFyYW0ge3Vua25vd25bXX0gYXJnc1xuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZW1vKGZhY3RvcnksIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5NZW1vSG9va1N0YXRlPFQ+fSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgNyk7XG5cdGlmIChhcmdzQ2hhbmdlZChzdGF0ZS5fYXJncywgYXJncykpIHtcblx0XHRzdGF0ZS5fdmFsdWUgPSBmYWN0b3J5KCk7XG5cdFx0c3RhdGUuX2FyZ3MgPSBhcmdzO1xuXHRcdHN0YXRlLl9mYWN0b3J5ID0gZmFjdG9yeTtcblx0fVxuXG5cdHJldHVybiBzdGF0ZS5fdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBjYWxsYmFja1xuICogQHBhcmFtIHt1bmtub3duW119IGFyZ3NcbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FsbGJhY2soY2FsbGJhY2ssIGFyZ3MpIHtcblx0Y3VycmVudEhvb2sgPSA4O1xuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiBjYWxsYmFjaywgYXJncyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RDb250ZXh0fSBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb250ZXh0KGNvbnRleHQpIHtcblx0Y29uc3QgcHJvdmlkZXIgPSBjdXJyZW50Q29tcG9uZW50LmNvbnRleHRbY29udGV4dC5faWRdO1xuXHQvLyBXZSBjb3VsZCBza2lwIHRoaXMgY2FsbCBoZXJlLCBidXQgdGhhbiB3ZSdkIG5vdCBjYWxsXG5cdC8vIGBvcHRpb25zLl9ob29rYC4gV2UgbmVlZCB0byBkbyB0aGF0IGluIG9yZGVyIHRvIG1ha2Vcblx0Ly8gdGhlIGRldnRvb2xzIGF3YXJlIG9mIHRoaXMgaG9vay5cblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db250ZXh0SG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgOSk7XG5cdC8vIFRoZSBkZXZ0b29scyBuZWVkcyBhY2Nlc3MgdG8gdGhlIGNvbnRleHQgb2JqZWN0IHRvXG5cdC8vIGJlIGFibGUgdG8gcHVsbCBvZiB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIG5vIHByb3ZpZGVyXG5cdC8vIGlzIHByZXNlbnQgaW4gdGhlIHRyZWUuXG5cdHN0YXRlLl9jb250ZXh0ID0gY29udGV4dDtcblx0aWYgKCFwcm92aWRlcikgcmV0dXJuIGNvbnRleHQuX2RlZmF1bHRWYWx1ZTtcblx0Ly8gVGhpcyBpcyBwcm9iYWJseSBub3Qgc2FmZSB0byBjb252ZXJ0IHRvIFwiIVwiXG5cdGlmIChzdGF0ZS5fdmFsdWUgPT0gbnVsbCkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IHRydWU7XG5cdFx0cHJvdmlkZXIuc3ViKGN1cnJlbnRDb21wb25lbnQpO1xuXHR9XG5cdHJldHVybiBwcm92aWRlci5wcm9wcy52YWx1ZTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IGEgY3VzdG9tIGxhYmVsIGZvciBhIGN1c3RvbSBob29rIGZvciB0aGUgZGV2dG9vbHMgcGFuZWxcbiAqIEB0eXBlIHs8VD4odmFsdWU6IFQsIGNiPzogKHZhbHVlOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXIpIHtcblx0aWYgKG9wdGlvbnMudXNlRGVidWdWYWx1ZSkge1xuXHRcdG9wdGlvbnMudXNlRGVidWdWYWx1ZShcblx0XHRcdGZvcm1hdHRlciA/IGZvcm1hdHRlcih2YWx1ZSkgOiAvKiogQHR5cGUge2FueX0qLyAodmFsdWUpXG5cdFx0KTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7KGVycm9yOiB1bmtub3duLCBlcnJvckluZm86IGltcG9ydCgncHJlYWN0JykuRXJyb3JJbmZvKSA9PiB2b2lkfSBjYlxuICogQHJldHVybnMge1t1bmtub3duLCAoKSA9PiB2b2lkXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVycm9yQm91bmRhcnkoY2IpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FcnJvckJvdW5kYXJ5SG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgMTApO1xuXHRjb25zdCBlcnJTdGF0ZSA9IHVzZVN0YXRlKCk7XG5cdHN0YXRlLl92YWx1ZSA9IGNiO1xuXHRpZiAoIWN1cnJlbnRDb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2gpIHtcblx0XHRjdXJyZW50Q29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoID0gKGVyciwgZXJyb3JJbmZvKSA9PiB7XG5cdFx0XHRpZiAoc3RhdGUuX3ZhbHVlKSBzdGF0ZS5fdmFsdWUoZXJyLCBlcnJvckluZm8pO1xuXHRcdFx0ZXJyU3RhdGVbMV0oZXJyKTtcblx0XHR9O1xuXHR9XG5cdHJldHVybiBbXG5cdFx0ZXJyU3RhdGVbMF0sXG5cdFx0KCkgPT4ge1xuXHRcdFx0ZXJyU3RhdGVbMV0odW5kZWZpbmVkKTtcblx0XHR9XG5cdF07XG59XG5cbi8qKiBAdHlwZSB7KCkgPT4gc3RyaW5nfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUlkKCkge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLklkSG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgMTEpO1xuXHRpZiAoIXN0YXRlLl92YWx1ZSkge1xuXHRcdC8vIEdyYWIgZWl0aGVyIHRoZSByb290IG5vZGUgb3IgdGhlIG5lYXJlc3QgYXN5bmMgYm91bmRhcnkgbm9kZS5cblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbC5kJykuVk5vZGV9ICovXG5cdFx0bGV0IHJvb3QgPSBjdXJyZW50Q29tcG9uZW50Ll92bm9kZTtcblx0XHR3aGlsZSAocm9vdCAhPT0gbnVsbCAmJiAhcm9vdC5fbWFzayAmJiByb290Ll9wYXJlbnQgIT09IG51bGwpIHtcblx0XHRcdHJvb3QgPSByb290Ll9wYXJlbnQ7XG5cdFx0fVxuXG5cdFx0bGV0IG1hc2sgPSByb290Ll9tYXNrIHx8IChyb290Ll9tYXNrID0gWzAsIDBdKTtcblx0XHRzdGF0ZS5fdmFsdWUgPSAnUCcgKyBtYXNrWzBdICsgJy0nICsgbWFza1sxXSsrO1xuXHR9XG5cblx0cmV0dXJuIHN0YXRlLl92YWx1ZTtcbn1cblxuLyoqXG4gKiBBZnRlciBwYWludCBlZmZlY3RzIGNvbnN1bWVyLlxuICovXG5mdW5jdGlvbiBmbHVzaEFmdGVyUGFpbnRFZmZlY3RzKCkge1xuXHRsZXQgY29tcG9uZW50O1xuXHR3aGlsZSAoKGNvbXBvbmVudCA9IGFmdGVyUGFpbnRFZmZlY3RzLnNoaWZ0KCkpKSB7XG5cdFx0aWYgKCFjb21wb25lbnQuX3BhcmVudERvbSB8fCAhY29tcG9uZW50Ll9faG9va3MpIGNvbnRpbnVlO1xuXHRcdHRyeSB7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMuZm9yRWFjaChpbnZva2VDbGVhbnVwKTtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUVmZmVjdCk7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgY29tcG9uZW50Ll92bm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmxldCBIQVNfUkFGID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PSAnZnVuY3Rpb24nO1xuXG4vKipcbiAqIFNjaGVkdWxlIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgYnJvd3NlciBoYXMgYSBjaGFuY2UgdG8gcGFpbnQgYSBuZXcgZnJhbWUuXG4gKiBEbyB0aGlzIGJ5IGNvbWJpbmluZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKHJBRikgKyBzZXRUaW1lb3V0IHRvIGludm9rZSBhIGNhbGxiYWNrIGFmdGVyXG4gKiB0aGUgbmV4dCBicm93c2VyIGZyYW1lLlxuICpcbiAqIEFsc28sIHNjaGVkdWxlIGEgdGltZW91dCBpbiBwYXJhbGxlbCB0byB0aGUgdGhlIHJBRiB0byBlbnN1cmUgdGhlIGNhbGxiYWNrIGlzIGludm9rZWRcbiAqIGV2ZW4gaWYgUkFGIGRvZXNuJ3QgZmlyZSAoZm9yIGV4YW1wbGUgaWYgdGhlIGJyb3dzZXIgdGFiIGlzIG5vdCB2aXNpYmxlKVxuICpcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJOZXh0RnJhbWUoY2FsbGJhY2spIHtcblx0Y29uc3QgZG9uZSA9ICgpID0+IHtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0aWYgKEhBU19SQUYpIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG5cdFx0c2V0VGltZW91dChjYWxsYmFjayk7XG5cdH07XG5cdGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGRvbmUsIFJBRl9USU1FT1VUKTtcblxuXHRsZXQgcmFmO1xuXHRpZiAoSEFTX1JBRikge1xuXHRcdHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShkb25lKTtcblx0fVxufVxuXG4vLyBOb3RlOiBpZiBzb21lb25lIHVzZWQgb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSxcbi8vIHRoZW4gZWZmZWN0cyB3aWxsIEFMV0FZUyBydW4gb24gdGhlIE5FWFQgZnJhbWUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBvbmUsIGluY3VycmluZyBhIH4xNm1zIGRlbGF5LlxuLy8gUGVyaGFwcyB0aGlzIGlzIG5vdCBzdWNoIGEgYmlnIGRlYWwuXG4vKipcbiAqIFNjaGVkdWxlIGFmdGVyUGFpbnRFZmZlY3RzIGZsdXNoIGFmdGVyIHRoZSBicm93c2VyIHBhaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IG5ld1F1ZXVlTGVuZ3RoXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gYWZ0ZXJQYWludChuZXdRdWV1ZUxlbmd0aCkge1xuXHRpZiAobmV3UXVldWVMZW5ndGggPT09IDEgfHwgcHJldlJhZiAhPT0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRwcmV2UmFmID0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cdFx0KHByZXZSYWYgfHwgYWZ0ZXJOZXh0RnJhbWUpKGZsdXNoQWZ0ZXJQYWludEVmZmVjdHMpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Ib29rU3RhdGV9IGhvb2tcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBpbnZva2VDbGVhbnVwKGhvb2spIHtcblx0Ly8gQSBob29rIGNsZWFudXAgY2FuIGludHJvZHVjZSBhIGNhbGwgdG8gcmVuZGVyIHdoaWNoIGNyZWF0ZXMgYSBuZXcgcm9vdCwgdGhpcyB3aWxsIGNhbGwgb3B0aW9ucy52bm9kZVxuXHQvLyBhbmQgbW92ZSB0aGUgY3VycmVudENvbXBvbmVudCBhd2F5LlxuXHRjb25zdCBjb21wID0gY3VycmVudENvbXBvbmVudDtcblx0bGV0IGNsZWFudXAgPSBob29rLl9jbGVhbnVwO1xuXHRpZiAodHlwZW9mIGNsZWFudXAgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdGhvb2suX2NsZWFudXAgPSB1bmRlZmluZWQ7XG5cdFx0Y2xlYW51cCgpO1xuXHR9XG5cblx0Y3VycmVudENvbXBvbmVudCA9IGNvbXA7XG59XG5cbi8qKlxuICogSW52b2tlIGEgSG9vaydzIGVmZmVjdFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9IGhvb2tcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBpbnZva2VFZmZlY3QoaG9vaykge1xuXHQvLyBBIGhvb2sgY2FsbCBjYW4gaW50cm9kdWNlIGEgY2FsbCB0byByZW5kZXIgd2hpY2ggY3JlYXRlcyBhIG5ldyByb290LCB0aGlzIHdpbGwgY2FsbCBvcHRpb25zLnZub2RlXG5cdC8vIGFuZCBtb3ZlIHRoZSBjdXJyZW50Q29tcG9uZW50IGF3YXkuXG5cdGNvbnN0IGNvbXAgPSBjdXJyZW50Q29tcG9uZW50O1xuXHRob29rLl9jbGVhbnVwID0gaG9vay5fdmFsdWUoKTtcblx0Y3VycmVudENvbXBvbmVudCA9IGNvbXA7XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3duW119IG9sZEFyZ3NcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBuZXdBcmdzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYXJnc0NoYW5nZWQob2xkQXJncywgbmV3QXJncykge1xuXHRyZXR1cm4gKFxuXHRcdCFvbGRBcmdzIHx8XG5cdFx0b2xkQXJncy5sZW5ndGggIT09IG5ld0FyZ3MubGVuZ3RoIHx8XG5cdFx0bmV3QXJncy5zb21lKChhcmcsIGluZGV4KSA9PiBhcmcgIT09IG9sZEFyZ3NbaW5kZXhdKVxuXHQpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBBcmdcbiAqIEBwYXJhbSB7QXJnfSBhcmdcbiAqIEBwYXJhbSB7KGFyZzogQXJnKSA9PiBhbnl9IGZcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGludm9rZU9yUmV0dXJuKGFyZywgZikge1xuXHRyZXR1cm4gdHlwZW9mIGYgPT0gJ2Z1bmN0aW9uJyA/IGYoYXJnKSA6IGY7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uIGFuZCBHaXRIdWIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlYm91bmNlZENhbGxiYWNrPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oY2FsbGJhY2s6IFQsIGRlbGF5OiBudW1iZXIpIHtcclxuXHRjb25zdCB0aW1lb3V0SWRSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG5cclxuXHRjb25zdCBkZWJvdW5jZWRDYWxsYmFjayA9ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcblx0XHRpZiAodGltZW91dElkUmVmLmN1cnJlbnQpIHtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXRJZFJlZi5jdXJyZW50KTtcclxuXHRcdH1cclxuXHRcdHRpbWVvdXRJZFJlZi5jdXJyZW50ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRjYWxsYmFjayguLi5hcmdzKTtcclxuXHRcdH0sIGRlbGF5KTtcclxuXHR9O1xyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0aWYgKHRpbWVvdXRJZFJlZi5jdXJyZW50KSB7XHJcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXRJZFJlZi5jdXJyZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9LCBbXSk7XHJcblxyXG5cdHJldHVybiBkZWJvdW5jZWRDYWxsYmFjaztcclxufVxyXG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uIGFuZCBHaXRIdWIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuaW1wb3J0IHsgRnJhZ21lbnQsIEZ1bmN0aW9uQ29tcG9uZW50LCBoIH0gZnJvbSAncHJlYWN0JztcclxuXHJcbmNvbnN0IG51bWJlckZvcm1hdCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnKTtcclxuXHJcbmV4cG9ydCBjb25zdCBJbnRlZ2VyOiBGdW5jdGlvbkNvbXBvbmVudDx7IHZhbHVlOiBudW1iZXIgfT4gPSAoeyB2YWx1ZSB9KSA9PiA8PntudW1iZXJGb3JtYXQuZm9ybWF0KHZhbHVlKX08Lz47XHJcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24gYW5kIEdpdEh1Yi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG5pbXBvcnQgeyBGdW5jdGlvbkNvbXBvbmVudCwgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgSFRNTFRyYWNlRXBvY2gsIElUcmFjZU1hdGVyaWFsaXplZENoYXRNZXNzYWdlLCBJVHJhY2VNYXRlcmlhbGl6ZWRDaGF0TWVzc2FnZVRleHRDaHVuaywgSVRyYWNlTWF0ZXJpYWxpemVkQ29udGFpbmVyLCBJVHJhY2VNYXRlcmlhbGl6ZWROb2RlLCBUcmFjZU1hdGVyaWFsaXplZE5vZGVUeXBlIH0gZnJvbSAnLi4vYmFzZS9odG1sVHJhY2VyVHlwZXMnO1xyXG5pbXBvcnQgeyBJbnRlZ2VyIH0gZnJvbSAnLi9pMThuJztcclxuXHJcbmRlY2xhcmUgY29uc3QgRVBPQ0hTOiBIVE1MVHJhY2VFcG9jaFtdO1xyXG5cclxuY29uc3QgUkFOR0VfQ09MT1JTID0gW1xyXG5cdHsgYmc6ICcjYzFlN2ZmJywgZmc6ICcjMDAwJyB9LFxyXG5cdHsgYmc6ICcjYWJkMmVjJywgZmc6ICcjMDAwJyB9LFxyXG5cdHsgYmc6ICcjOTRiZWQ5JywgZmc6ICcjMDAwJyB9LFxyXG5cdHsgYmc6ICcjN2ZhYWM2JywgZmc6ICcjMDAwJyB9LFxyXG5cdHsgYmc6ICcjNjk5NmIzJywgZmc6ICcjZmZmJyB9LFxyXG5cdHsgYmc6ICcjNTM4M2ExJywgZmc6ICcjZmZmJyB9LFxyXG5cdHsgYmc6ICcjM2Q3MDhmJywgZmc6ICcjZmZmJyB9LFxyXG5cdHsgYmc6ICcjMjU1ZTdlJywgZmc6ICcjZmZmJyB9LFxyXG5dO1xyXG5cclxudHlwZSBTY29yZUZpZWxkID0geyBmaWVsZDogJ3ByaW9yaXR5JyB8ICd0b2tlbnMnOyBtaW46IG51bWJlcjsgbWF4OiBudW1iZXIgfTtcclxuXHJcbmNvbnN0IENoaWxkcmVuOiBGdW5jdGlvbkNvbXBvbmVudDx7IHNjb3JlQnk6IFNjb3JlRmllbGQ7IG5vZGVzOiBJVHJhY2VNYXRlcmlhbGl6ZWROb2RlW107IGVwb2NoOiBudW1iZXIgfT4gPSAoeyBzY29yZUJ5LCBub2RlcywgZXBvY2ggfSkgPT4ge1xyXG5cdGlmIChub2Rlcy5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0bGV0IG5leHRTY29yZUJ5ID0gc2NvcmVCeTtcclxuXHQvLyBwcmlvcml0eSBpcyBhbHdheXMgc2NvcmVkIHJlbGF0aXZlIHRvIHRoZSBjb250YWluZXIsIHdoaWxlIHRva2VucyBhcmUgZ2xvYmFsXHJcblx0aWYgKHNjb3JlQnkuZmllbGQgIT09ICd0b2tlbnMnKSB7XHJcblx0XHRsZXQgbWF4ID0gbm9kZXNbMF1bc2NvcmVCeS5maWVsZF07XHJcblx0XHRsZXQgbWluID0gbm9kZXNbMF1bc2NvcmVCeS5maWVsZF07XHJcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdG1heCA9IE1hdGgubWF4KG1heCwgbm9kZXNbaV1bc2NvcmVCeS5maWVsZF0pO1xyXG5cdFx0XHRtaW4gPSBNYXRoLm1heChtaW4sIG5vZGVzW2ldW3Njb3JlQnkuZmllbGRdKTtcclxuXHRcdH1cclxuXHRcdG5leHRTY29yZUJ5ID0geyBmaWVsZDogc2NvcmVCeS5maWVsZCwgbWF4LCBtaW4gfTtcclxuXHR9XHJcblxyXG5cclxuXHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJub2RlLWNoaWxkcmVuXCI+XHJcblx0XHR7bm9kZXMubWFwKChjaGlsZCwgaW5kZXgpID0+IChcclxuXHRcdFx0Y2hpbGQudHlwZSA9PT0gVHJhY2VNYXRlcmlhbGl6ZWROb2RlVHlwZS5UZXh0Q2h1bmtcclxuXHRcdFx0XHQ/IDxUZXh0Tm9kZSBzY29yZUJ5PXtuZXh0U2NvcmVCeX0ga2V5PXtpbmRleH0gbm9kZT17Y2hpbGR9IC8+XHJcblx0XHRcdFx0OiA8V3JhcHBlck5vZGUgc2NvcmVCeT17bmV4dFNjb3JlQnl9IGtleT17aW5kZXh9IG5vZGU9e2NoaWxkfSBlcG9jaD17ZXBvY2h9IC8+XHJcblx0XHQpKX1cclxuXHQ8L2Rpdj5cclxufTtcclxuXHJcbmNvbnN0IExOTm9kZVN0YXRzOiBGdW5jdGlvbkNvbXBvbmVudDx7IG5vZGU6IElUcmFjZU1hdGVyaWFsaXplZE5vZGUgfT4gPSAoeyBub2RlIH0pID0+IChcclxuXHQ8ZGl2IGNsYXNzTmFtZT0nbm9kZS1zdGF0cyc+XHJcblx0XHRVc2VkIFRva2VuczogPEludGVnZXIgdmFsdWU9e25vZGUudG9rZW5zfSAvPlxyXG5cdFx0eycgLyAnfVxyXG5cdFx0UHJpb3JpdHk6IHtub2RlLnByaW9yaXR5ID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiA/ICdNQVgnIDogPEludGVnZXIgdmFsdWU9e25vZGUucHJpb3JpdHl9IC8+fVxyXG5cdDwvZGl2PlxyXG4pO1xyXG5cclxuY29uc3QgTE1Ob2RlOiBGdW5jdGlvbkNvbXBvbmVudDx7IHNjb3JlQnk6IFNjb3JlRmllbGQ7IG5vZGU6IElUcmFjZU1hdGVyaWFsaXplZE5vZGUgfSAmIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50Pj4gPSAoeyBzY29yZUJ5LCBub2RlLCBjaGlsZHJlbiwgLi4uYXR0cnMgfSkgPT4ge1xyXG5cdGxldCBzdGVwID0gMDtcclxuXHRpZiAoc2NvcmVCeS5tYXggIT09IHNjb3JlQnkubWluKSB7XHJcblx0XHRjb25zdCBwY3QgPSAobm9kZVtzY29yZUJ5LmZpZWxkXSAtIHNjb3JlQnkubWluKSAvIChzY29yZUJ5Lm1heCAtIHNjb3JlQnkubWluKTtcclxuXHRcdHN0ZXAgPSBNYXRoLnJvdW5kKChSQU5HRV9DT0xPUlMubGVuZ3RoIC0gMSkgKiBwY3QpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgey4uLmF0dHJzfSBjbGFzc05hbWU9e2Bub2RlICR7YXR0cnMuY2xhc3NOYW1lIHx8ICcnfWB9IHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogUkFOR0VfQ09MT1JTW3N0ZXBdLmJnLCBjb2xvcjogUkFOR0VfQ09MT1JTW3N0ZXBdLmZnIH19PlxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59XHJcblxyXG5jb25zdCBUZXh0Tm9kZTogRnVuY3Rpb25Db21wb25lbnQ8eyBzY29yZUJ5OiBTY29yZUZpZWxkOyBub2RlOiBJVHJhY2VNYXRlcmlhbGl6ZWRDaGF0TWVzc2FnZVRleHRDaHVuazsgfT4gPSAoeyBzY29yZUJ5LCBub2RlIH0pID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PExNTm9kZSBub2RlPXtub2RlfSBzY29yZUJ5PXtzY29yZUJ5fSB0YWJJbmRleD17MH0gY2xhc3NOYW1lPSdub2RlLXRleHQnPlxyXG5cdFx0XHQ8TE5Ob2RlU3RhdHMgbm9kZT17bm9kZX0gLz5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJub2RlLWNvbnRlbnRcIj5cclxuXHRcdFx0XHR7bm9kZS52YWx1ZX1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L0xNTm9kZT5cclxuXHQpO1xyXG59O1xyXG5cclxuY29uc3QgV3JhcHBlck5vZGU6IEZ1bmN0aW9uQ29tcG9uZW50PHsgc2NvcmVCeTogU2NvcmVGaWVsZDsgbm9kZTogSVRyYWNlTWF0ZXJpYWxpemVkQ29udGFpbmVyIHwgSVRyYWNlTWF0ZXJpYWxpemVkQ2hhdE1lc3NhZ2U7IGVwb2NoOiBudW1iZXIgfT4gPSAoeyBzY29yZUJ5LCBub2RlLCBlcG9jaCB9KSA9PiB7XHJcblx0Y29uc3QgW2NvbGxhcHNlZCwgc2V0Q29sbGFwc2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBlcG9jaEluZGV4ID0gRVBPQ0hTLmZpbmRJbmRleChlID0+IGUuZWxlbWVudHMuc29tZShlID0+IGUuaWQgPT09IG5vZGUuaWQpKTtcclxuXHRpZiAoZXBvY2hJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGVwb2NoIG5vdCBmb3VuZCBmb3IgJHtub2RlLmlkfWApO1xyXG5cdH1cclxuXHRjb25zdCBteUVwb2NoID0gRVBPQ0hTW2Vwb2NoSW5kZXhdO1xyXG5cdGNvbnN0IHRoaXNFcG9jaCA9IEVQT0NIUy5hdChlcG9jaCk7XHJcblx0Y29uc3QgdG9rZW5CdWRnZXQgPSBteUVwb2NoLmVsZW1lbnRzLmZpbmQoZSA9PiBlLmlkID09PSBub2RlLmlkKSEudG9rZW5CdWRnZXQ7XHJcblx0Y29uc3QgdGFnID0gbm9kZS50eXBlID09PSBUcmFjZU1hdGVyaWFsaXplZE5vZGVUeXBlLkNoYXRNZXNzYWdlXHJcblx0XHQ/IG5vZGUubmFtZSB8fCBub2RlLnJvbGUuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIG5vZGUucm9sZS5zbGljZSgxKSArICdNZXNzYWdlJ1xyXG5cdFx0OiBub2RlLm5hbWU7XHJcblxyXG5cdGNvbnN0IGNsYXNzTmFtZSA9IGVwb2NoSW5kZXggPT09IGVwb2NoXHJcblx0XHQ/ICduZXctaW4tZXBvY2gnXHJcblx0XHQ6IGVwb2NoIDwgZXBvY2hJbmRleFxyXG5cdFx0XHQ/ICdiZWZvcmUtZXBvY2gnIDogJyc7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8TE1Ob2RlIG5vZGU9e25vZGV9IHNjb3JlQnk9e3Njb3JlQnl9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cclxuXHRcdFx0PExOTm9kZVN0YXRzIG5vZGU9e25vZGV9IC8+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibm9kZS1jb250ZW50IG5vZGUtdG9nZ2xlclwiIG9uQ2xpY2s9eygpID0+IHNldENvbGxhcHNlZCh2ID0+ICF2KX0+XHJcblx0XHRcdFx0PHNwYW4+e3RoaXNFcG9jaD8uaW5Ob2RlID09PSBub2RlLmlkID8gJ1x1RDgzQ1x1REZDMyAnIDogJyd9e2A8JHt0YWd9PmB9PC9zcGFuPlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT0naW5kaWNhdG9yJz57Y29sbGFwc2VkID8gJ1srXScgOiAnWy1dJ308L3NwYW4+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7ZXBvY2ggPT09IGVwb2NoSW5kZXggJiYgPGRpdiBjbGFzc05hbWU9J25vZGUtc3RhdHMnPlxyXG5cdFx0XHRcdFRva2VuIEJ1ZGdldDogPEludGVnZXIgdmFsdWU9e3Rva2VuQnVkZ2V0fSAvPlxyXG5cdFx0XHQ8L2Rpdj59XHJcblx0XHRcdHt0aGlzRXBvY2g/LmluTm9kZSA9PT0gbm9kZS5pZCAmJiA8ZGl2IGNsYXNzTmFtZT0nbm9kZS1zdGF0cyc+XHJcblx0XHRcdFx0UmVuZGVyaW5nIGZsZXhHcm93PXt0aGlzRXBvY2guZmxleFZhbHVlfTxiciAvPjxiciAvPlxyXG5cdFx0XHRcdFNwbGl0dGluZyB7dGhpc0Vwb2NoLnJlc2VydmVkVG9rZW5zID8gYCR7dGhpc0Vwb2NoLnRva2VuQnVkZ2V0fSAtICR7dGhpc0Vwb2NoLnJlc2VydmVkVG9rZW5zfSAocmVzZXJ2ZWQpID0gYCA6ICcnfTxJbnRlZ2VyIHZhbHVlPXt0aGlzRXBvY2gudG9rZW5CdWRnZXR9IC8+IHRva2VucyBhbW9uZyB7dGhpc0Vwb2NoLmVsZW1lbnRzLmxlbmd0aH0gZWxlbWVudHNcclxuXHRcdFx0PC9kaXY+fVxyXG5cdFx0XHR7IWNvbGxhcHNlZCAmJiA8Q2hpbGRyZW4gbm9kZXM9e25vZGUuY2hpbGRyZW59IHNjb3JlQnk9e3Njb3JlQnl9IGVwb2NoPXtlcG9jaH0gLz59XHJcblx0XHQ8L0xNTm9kZT5cclxuXHQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHsgc2NvcmVCeTogJ3ByaW9yaXR5JyB8ICd0b2tlbnMnOyBub2RlOiBJVHJhY2VNYXRlcmlhbGl6ZWRDb250YWluZXI7IGVwb2NoOiBudW1iZXIgfT4gPSAoeyBzY29yZUJ5LCBub2RlLCBlcG9jaCB9KSA9PiB7XHJcblx0bGV0IHNjb3JlOiBTY29yZUZpZWxkO1xyXG5cdGlmIChzY29yZUJ5ID09PSAndG9rZW5zJykge1xyXG5cdFx0c2NvcmUgPSB7IGZpZWxkOiAndG9rZW5zJywgbWF4OiBub2RlLnRva2VucywgbWluOiAwIH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHNjb3JlID0geyBmaWVsZDogJ3ByaW9yaXR5JywgbWF4OiBub2RlLnByaW9yaXR5LCBtaW46IG5vZGUucHJpb3JpdHkgfTtcclxuXHR9XHJcblxyXG5cdHJldHVybiA8V3JhcHBlck5vZGUgc2NvcmVCeT17c2NvcmV9IG5vZGU9e25vZGV9IGVwb2NoPXtlcG9jaH0gLz5cclxufVxyXG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uIGFuZCBHaXRIdWIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuaW1wb3J0IHsgRnVuY3Rpb25Db21wb25lbnQsIGgsIHJlbmRlciB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHR5cGUgeyBIVE1MVHJhY2VFcG9jaCwgSUhUTUxUcmFjZVJlbmRlckRhdGEgfSBmcm9tICcuLi9iYXNlL2h0bWxUcmFjZXJUeXBlcyc7XHJcbmltcG9ydCB7IHVzZURlYm91bmNlZENhbGxiYWNrIH0gZnJvbSAnLi9ob29rcyc7XHJcbmltcG9ydCB7IEludGVnZXIgfSBmcm9tICcuL2kxOG4nO1xyXG5pbXBvcnQgJy4vaW5kZXguY3NzJztcclxuaW1wb3J0IHsgUm9vdCB9IGZyb20gJy4vbm9kZSc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IERFRkFVTFRfTU9ERUw6IElIVE1MVHJhY2VSZW5kZXJEYXRhO1xyXG5kZWNsYXJlIGNvbnN0IEVQT0NIUzogSFRNTFRyYWNlRXBvY2hbXTtcclxuZGVjbGFyZSBjb25zdCBERUZBVUxUX1RPS0VOUzogbnVtYmVyO1xyXG5kZWNsYXJlIGNvbnN0IFNFUlZFUl9BRERSRVNTOiBudW1iZXI7XHJcblxyXG5jb25zdCBTbGlkZXJXaXRoSW5wdXRDb250cm9sOiBGdW5jdGlvbkNvbXBvbmVudDx7IGxhYmVsOiBzdHJpbmc7IHZhbHVlOiBudW1iZXI7IG9uQ2hhbmdlOiAobmV3VG9rZW5zOiBudW1iZXIpID0+IHZvaWQ7IG1pbjogbnVtYmVyOyBtYXg6IG51bWJlciB9PiA9ICh7IGxhYmVsLCB2YWx1ZSwgb25DaGFuZ2UsIG1pbiwgbWF4IH0pID0+IHtcclxuXHRjb25zdCBoYW5kbGVTbGlkZXJDaGFuZ2UgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XHJcblx0XHRvbkNoYW5nZSgoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlQXNOdW1iZXIpO1xyXG5cdH07XHJcblx0Y29uc3QgaWQgPSBgbnVtYmVyLXNsaWRlci0ke01hdGgucmFuZG9tKCl9YDtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbHMtc2xpZGVyXCI+XHJcblx0XHRcdDxsYWJlbCBodG1sRm9yPXtpZH0+e2xhYmVsfTwvbGFiZWw+XHJcblx0XHRcdDxpbnB1dFxyXG5cdFx0XHRcdGlkPXtpZH1cclxuXHRcdFx0XHR0eXBlPVwicmFuZ2VcIlxyXG5cdFx0XHRcdG1pbj17bWlufVxyXG5cdFx0XHRcdG1heD17bWF4fVxyXG5cdFx0XHRcdHZhbHVlPXt2YWx1ZX1cclxuXHRcdFx0XHRvbklucHV0PXtoYW5kbGVTbGlkZXJDaGFuZ2V9XHJcblx0XHRcdC8+XHJcblx0XHRcdDxpbnB1dFxyXG5cdFx0XHRcdHR5cGU9XCJudW1iZXJcIlxyXG5cdFx0XHRcdG1pbj17bWlufVxyXG5cdFx0XHRcdHZhbHVlPXt2YWx1ZX1cclxuXHRcdFx0XHRvbklucHV0PXtoYW5kbGVTbGlkZXJDaGFuZ2V9XHJcblx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZVNsaWRlckNoYW5nZX1cclxuXHRcdFx0Lz5cclxuXHRcdDwvZGl2PlxyXG5cdCk7XHJcbn07XHJcblxyXG5jb25zdCBTY29yZUJ5Q29udHJvbDogRnVuY3Rpb25Db21wb25lbnQ8eyBzY29yZUJ5OiAncHJpb3JpdHknIHwgJ3Rva2VucycsIG9uU2NvcmVCeUNoYW5nZTogKG5ld1Njb3JlQnk6ICdwcmlvcml0eScgfCAndG9rZW5zJykgPT4gdm9pZCB9PiA9ICh7IHNjb3JlQnksIG9uU2NvcmVCeUNoYW5nZSB9KSA9PiB7XHJcblx0Y29uc3QgaGFuZGxlU2NvcmVCeUNoYW5nZSA9IChldmVudDogRXZlbnQpID0+IHtcclxuXHRcdGNvbnN0IG5ld1Njb3JlQnkgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlIGFzICdwcmlvcml0eScgfCAndG9rZW5zJztcclxuXHRcdG9uU2NvcmVCeUNoYW5nZShuZXdTY29yZUJ5KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJjb250cm9scy1zY29yZWJ5XCI+XHJcblx0XHRcdFZpc3VhbGl6ZSBieVxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0PGlucHV0XHJcblx0XHRcdFx0XHR0eXBlPVwicmFkaW9cIlxyXG5cdFx0XHRcdFx0bmFtZT1cInNjb3JlQnlcIlxyXG5cdFx0XHRcdFx0dmFsdWU9XCJ0b2tlbnNcIlxyXG5cdFx0XHRcdFx0Y2hlY2tlZD17c2NvcmVCeSA9PT0gJ3Rva2Vucyd9XHJcblx0XHRcdFx0XHRvbkNoYW5nZT17aGFuZGxlU2NvcmVCeUNoYW5nZX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdFRva2Vuc1xyXG5cdFx0XHQ8L2xhYmVsPlxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0PGlucHV0XHJcblx0XHRcdFx0XHR0eXBlPVwicmFkaW9cIlxyXG5cdFx0XHRcdFx0bmFtZT1cInNjb3JlQnlcIlxyXG5cdFx0XHRcdFx0dmFsdWU9XCJwcmlvcml0eVwiXHJcblx0XHRcdFx0XHRjaGVja2VkPXtzY29yZUJ5ID09PSAncHJpb3JpdHknfVxyXG5cdFx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZVNjb3JlQnlDaGFuZ2V9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHRQcmlvcml0eVxyXG5cdFx0XHQ8L2xhYmVsPlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbmNvbnN0IEFwcCA9ICgpID0+IHtcclxuXHRjb25zdCBbdG9rZW5zLCBzZXRUb2tlbnNdID0gdXNlU3RhdGUoREVGQVVMVF9UT0tFTlMpO1xyXG5cdGNvbnN0IFtlcG9jaCwgc2V0RXBvY2hdID0gdXNlU3RhdGUoRVBPQ0hTLmxlbmd0aCk7XHJcblx0Y29uc3QgW21vZGVsLCBzZXRNb2RlbF0gPSB1c2VTdGF0ZTxJSFRNTFRyYWNlUmVuZGVyRGF0YT4oREVGQVVMVF9NT0RFTCk7XHJcblx0Y29uc3QgW3Njb3JlQnksIHNldFNjb3JlQnldID0gdXNlU3RhdGU8J3ByaW9yaXR5JyB8ICd0b2tlbnMnPigndG9rZW5zJyk7XHJcblx0Y29uc3QgW2FjdGl2ZVRhYiwgc2V0QWN0aXZlVGFiXSA9IHVzZVN0YXRlPCdlcG9jaCcgfCAndG9rZW5zJz4oJ2Vwb2NoJyk7XHJcblxyXG5cdGNvbnN0IHJlZ2VuTW9kZWwgPSB1c2VEZWJvdW5jZWRDYWxsYmFjayhhc3luYyAodG9rZW5zOiBudW1iZXIpID0+IHtcclxuXHRcdGlmICh0b2tlbnMgPT09IERFRkFVTFRfVE9LRU5TKSB7XHJcblx0XHRcdHJldHVybiBERUZBVUxUX01PREVMO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtTRVJWRVJfQUREUkVTU31yZWdlbj9uPSR7dG9rZW5zfWApO1xyXG5cdFx0Y29uc3QgbmV3TW9kZWwgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblx0XHRzZXRNb2RlbChuZXdNb2RlbCk7XHJcblx0fSwgMTAwKTtcclxuXHJcblx0Y29uc3QgaGFuZGxlVG9rZW5zQ2hhbmdlID0gKG5ld1Rva2VuczogbnVtYmVyKSA9PiB7XHJcblx0XHRzZXRUb2tlbnMobmV3VG9rZW5zKTtcclxuXHRcdHJlZ2VuTW9kZWwobmV3VG9rZW5zKTtcclxuXHRcdHNldEVwb2NoKEVQT0NIUy5sZW5ndGgpO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImFwcFwiPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xzXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ0YWJzXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YHRhYiAke2FjdGl2ZVRhYiA9PT0gJ2Vwb2NoJyA/ICdhY3RpdmUnIDogJyd9YH0gb25DbGljaz17KCkgPT4gc2V0QWN0aXZlVGFiKCdlcG9jaCcpfT5WaWV3IE9yZGVyPC9kaXY+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YHRhYiAke2FjdGl2ZVRhYiA9PT0gJ3Rva2VucycgPyAnYWN0aXZlJyA6ICcnfWB9IG9uQ2xpY2s9eygpID0+IHNldEFjdGl2ZVRhYigndG9rZW5zJyl9PkNoYW5nZSBUb2tlbiBCdWRnZXQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YHRhYi1jb250ZW50ICR7YWN0aXZlVGFiID09PSAnZXBvY2gnID8gJ2FjdGl2ZScgOiAnJ31gfT5cclxuXHRcdFx0XHRcdDxTbGlkZXJXaXRoSW5wdXRDb250cm9sIGxhYmVsPSdSZW5kZXIgRXBvY2gnIHZhbHVlPXtlcG9jaH0gb25DaGFuZ2U9e3NldEVwb2NofSBtaW49ezB9IG1heD17RVBPQ0hTLmxlbmd0aH0gLz5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YHRhYi1jb250ZW50ICR7YWN0aXZlVGFiID09PSAndG9rZW5zJyA/ICdhY3RpdmUnIDogJyd9YH0+XHJcblx0XHRcdFx0XHQ8U2xpZGVyV2l0aElucHV0Q29udHJvbCBsYWJlbD0nVG9rZW4gQnVkZ2V0JyB2YWx1ZT17dG9rZW5zfSBvbkNoYW5nZT17aGFuZGxlVG9rZW5zQ2hhbmdlfSBtaW49ezB9IG1heD17REVGQVVMVF9UT0tFTlMgKiAyfSAvPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWRlc2NyaXB0aW9uXCI+XHJcblx0XHRcdFx0e2FjdGl2ZVRhYiA9PT0gJ3Rva2VucydcclxuXHRcdFx0XHRcdD8gPHA+VG9rZW4gY2hhbmdlcyBoZXJlIHdpbGwgcHJ1bmUgZWxlbWVudHMgYW5kIHJlLXJlbmRlciAncHVyZScgb25lcywgYnV0IHRoZSBlbnRpcmUgcHJvbXB0IGlzIG5vdCBiZWluZyByZS1yZW5kZXJlZDwvcD5cclxuXHRcdFx0XHRcdDogPHA+Q2hhbmdpbmcgdGhlIHJlbmRlciBlcG9jaCBsZXRzIHlvdSBzZWUgdGhlIG9yZGVyIGluIHdoaWNoIGVsZW1lbnRzIGFyZSByZW5kZXJlZCBhbmQgaG93IHRoZSB0b2tlbiBidWRnZXQgaXMgYWxsb2NhdGVkLjwvcD59XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J2NvbnRyb2xzLXN0YXRzJz5cclxuXHRcdFx0XHRcdDxzcGFuPlVzZWQgPEludGVnZXIgdmFsdWU9e21vZGVsLmNvbnRhaW5lci50b2tlbnN9IC8+LzxJbnRlZ2VyIHZhbHVlPXttb2RlbC5idWRnZXR9IC8+IHRva2Vuczwvc3Bhbj5cclxuXHRcdFx0XHRcdDxzcGFuPlJlbW92ZWQgPEludGVnZXIgdmFsdWU9e21vZGVsLnJlbW92ZWR9IC8+IG5vZGVzPC9zcGFuPlxyXG5cdFx0XHRcdFx0PFNjb3JlQnlDb250cm9sIHNjb3JlQnk9e3Njb3JlQnl9IG9uU2NvcmVCeUNoYW5nZT17c2V0U2NvcmVCeX0gLz5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxSb290IG5vZGU9e21vZGVsLmNvbnRhaW5lcn0gc2NvcmVCeT17c2NvcmVCeX0gZXBvY2g9e2Vwb2NofSAvPlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5ib2R5KTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7O0FBQ2EsTUMwQkFBO0FEMUJBLE1FVVBDO0FGVk8sTUdFVEM7QUhGUyxNR2tHQUM7QUhsR0EsTUlpTFRDO0FKakxTLE1JNExUQztBSjVMUyxNSThMUEM7QUo5TE8sTUl3TlBDO0FKeE5PLE1LeUJUQztBTHpCUyxNSzRLUEM7QUw1S08sTUs2S1BDO0FMN0tPLE1NQ0ZDO0FOREUsTUFXQUMsSUFBZ0MsQ0FBQTtBQVhoQyxNQVlBQyxJQUFZLENBQUE7QUFaWixNQWFBQyxJQUNaO0FBZFksTUND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LFdBQVcsRUFBRSxNQUNwRSxrQkFBQywwQkFBdUIsT0FBTSxnQkFBZSxPQUFPLFFBQVEsVUFBVSxvQkFBb0IsS0FBSyxHQUFHLEtBQUssaUJBQWlCLEdBQUcsQ0FDNUgsQ0FDRCxHQUNBLGtCQUFDLFNBQUksV0FBVSx5QkFDYixjQUFjLFdBQ1osa0JBQUMsV0FBRSxrSEFBZ0gsSUFDbkgsa0JBQUMsV0FBRSx3SEFBc0gsR0FDNUgsa0JBQUMsU0FBSSxXQUFVLG9CQUNkLGtCQUFDLGNBQUssU0FBSyxrQkFBQyxXQUFRLE9BQU8sTUFBTSxVQUFVLFFBQVEsR0FBRSxLQUFDLGtCQUFDLFdBQVEsT0FBTyxNQUFNLFFBQVEsR0FBRSxTQUFPLEdBQzdGLGtCQUFDLGNBQUssWUFBUSxrQkFBQyxXQUFRLE9BQU8sTUFBTSxTQUFTLEdBQUUsUUFBTSxHQUNyRCxrQkFBQyxrQkFBZSxTQUFrQixpQkFBaUIsWUFBWSxDQUNoRSxDQUNELEdBQ0Esa0JBQUMsUUFBSyxNQUFNLE1BQU0sV0FBVyxTQUFrQixPQUFjLENBQzlEO0FBQUEsRUFFRjtBQUVBLElBQU8sa0JBQUMsU0FBSSxHQUFJLFNBQVMsSUFBSTsiLAogICJuYW1lcyI6IFsic2xpY2UiLCAib3B0aW9ucyIsICJ2bm9kZUlkIiwgImlzVmFsaWRFbGVtZW50IiwgInJlcmVuZGVyUXVldWUiLCAicHJldkRlYm91bmNlIiwgImRlZmVyIiwgImRlcHRoU29ydCIsICJldmVudENsb2NrIiwgImV2ZW50UHJveHkiLCAiZXZlbnRQcm94eUNhcHR1cmUiLCAiaSIsICJFTVBUWV9PQkoiLCAiRU1QVFlfQVJSIiwgIklTX05PTl9ESU1FTlNJT05BTCIsICJpc0FycmF5IiwgIkFycmF5IiwgImFzc2lnbiIsICJvYmoiLCAicHJvcHMiLCAicmVtb3ZlTm9kZSIsICJub2RlIiwgInBhcmVudE5vZGUiLCAicmVtb3ZlQ2hpbGQiLCAiY3JlYXRlRWxlbWVudCIsICJ0eXBlIiwgImNoaWxkcmVuIiwgImtleSIsICJyZWYiLCAibm9ybWFsaXplZFByb3BzIiwgImFyZ3VtZW50cyIsICJsZW5ndGgiLCAiY2FsbCIsICJkZWZhdWx0UHJvcHMiLCAiY3JlYXRlVk5vZGUiLCAib3JpZ2luYWwiLCAidm5vZGUiLCAiX19rIiwgIl9fIiwgIl9fYiIsICJfX2UiLCAiX19kIiwgIl9fYyIsICJjb25zdHJ1Y3RvciIsICJfX3YiLCAiX19pIiwgIl9fdSIsICJGcmFnbWVudCIsICJwcm9wcyIsICJjaGlsZHJlbiIsICJCYXNlQ29tcG9uZW50IiwgImNvbnRleHQiLCAidGhpcyIsICJnZXREb21TaWJsaW5nIiwgInZub2RlIiwgImNoaWxkSW5kZXgiLCAiX18iLCAiX19pIiwgInNpYmxpbmciLCAiX19rIiwgImxlbmd0aCIsICJfX2UiLCAidHlwZSIsICJ1cGRhdGVQYXJlbnREb21Qb2ludGVycyIsICJpIiwgImNoaWxkIiwgIl9fYyIsICJiYXNlIiwgImVucXVldWVSZW5kZXIiLCAiYyIsICJfX2QiLCAicmVyZW5kZXJRdWV1ZSIsICJwdXNoIiwgInByb2Nlc3MiLCAiX19yIiwgInByZXZEZWJvdW5jZSIsICJvcHRpb25zIiwgImRlYm91bmNlUmVuZGVyaW5nIiwgImRlZmVyIiwgInJlbmRlclF1ZXVlTGVuZ3RoIiwgImNvbXBvbmVudCIsICJuZXdWTm9kZSIsICJvbGRWTm9kZSIsICJvbGREb20iLCAiY29tbWl0UXVldWUiLCAicmVmUXVldWUiLCAic29ydCIsICJkZXB0aFNvcnQiLCAic2hpZnQiLCAiX192IiwgIl9fUCIsICJhc3NpZ24iLCAiZGlmZiIsICJfX24iLCAibmFtZXNwYWNlVVJJIiwgIl9fdSIsICJjb21taXRSb290IiwgImRpZmZDaGlsZHJlbiIsICJwYXJlbnREb20iLCAicmVuZGVyUmVzdWx0IiwgIm5ld1BhcmVudFZOb2RlIiwgIm9sZFBhcmVudFZOb2RlIiwgImdsb2JhbENvbnRleHQiLCAibmFtZXNwYWNlIiwgImV4Y2Vzc0RvbUNoaWxkcmVuIiwgImlzSHlkcmF0aW5nIiwgImNoaWxkVk5vZGUiLCAibmV3RG9tIiwgImZpcnN0Q2hpbGREb20iLCAib2xkQ2hpbGRyZW4iLCAiRU1QVFlfQVJSIiwgIm5ld0NoaWxkcmVuTGVuZ3RoIiwgImNvbnN0cnVjdE5ld0NoaWxkcmVuQXJyYXkiLCAiRU1QVFlfT0JKIiwgInJlZiIsICJhcHBseVJlZiIsICJpbnNlcnQiLCAibmV4dFNpYmxpbmciLCAic2tld2VkSW5kZXgiLCAibWF0Y2hpbmdJbmRleCIsICJvbGRDaGlsZHJlbkxlbmd0aCIsICJyZW1haW5pbmdPbGRDaGlsZHJlbiIsICJza2V3IiwgImNvbnN0cnVjdG9yIiwgIlN0cmluZyIsICJjcmVhdGVWTm9kZSIsICJpc0FycmF5IiwgIl9fYiIsICJrZXkiLCAiZmluZE1hdGNoaW5nSW5kZXgiLCAidW5tb3VudCIsICJwYXJlbnRWTm9kZSIsICJjb250YWlucyIsICJpbnNlcnRCZWZvcmUiLCAibm9kZVR5cGUiLCAiZmluZE1hdGNoaW5nSW5kZXgiLCAiY2hpbGRWTm9kZSIsICJvbGRDaGlsZHJlbiIsICJza2V3ZWRJbmRleCIsICJyZW1haW5pbmdPbGRDaGlsZHJlbiIsICJrZXkiLCAidHlwZSIsICJ4IiwgInkiLCAib2xkVk5vZGUiLCAiX191IiwgImxlbmd0aCIsICJzZXRTdHlsZSIsICJzdHlsZSIsICJ2YWx1ZSIsICJzZXRQcm9wZXJ0eSIsICJJU19OT05fRElNRU5TSU9OQUwiLCAidGVzdCIsICJkb20iLCAibmFtZSIsICJvbGRWYWx1ZSIsICJuYW1lc3BhY2UiLCAidXNlQ2FwdHVyZSIsICJvIiwgImNzc1RleHQiLCAicmVwbGFjZSIsICJ0b0xvd2VyQ2FzZSIsICJzbGljZSIsICJsIiwgIl9hdHRhY2hlZCIsICJldmVudENsb2NrIiwgImFkZEV2ZW50TGlzdGVuZXIiLCAiZXZlbnRQcm94eUNhcHR1cmUiLCAiZXZlbnRQcm94eSIsICJyZW1vdmVFdmVudExpc3RlbmVyIiwgImUiLCAicmVtb3ZlQXR0cmlidXRlIiwgInNldEF0dHJpYnV0ZSIsICJjcmVhdGVFdmVudFByb3h5IiwgInRoaXMiLCAiZXZlbnRIYW5kbGVyIiwgIl9kaXNwYXRjaGVkIiwgIm9wdGlvbnMiLCAiZXZlbnQiLCAiZGlmZiIsICJwYXJlbnREb20iLCAibmV3Vk5vZGUiLCAiZ2xvYmFsQ29udGV4dCIsICJleGNlc3NEb21DaGlsZHJlbiIsICJjb21taXRRdWV1ZSIsICJvbGREb20iLCAiaXNIeWRyYXRpbmciLCAicmVmUXVldWUiLCAidG1wIiwgImMiLCAiaXNOZXciLCAib2xkUHJvcHMiLCAib2xkU3RhdGUiLCAic25hcHNob3QiLCAiY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uIiwgIm5ld1Byb3BzIiwgImlzQ2xhc3NDb21wb25lbnQiLCAicHJvdmlkZXIiLCAiY29tcG9uZW50Q29udGV4dCIsICJpIiwgInJlbmRlckhvb2siLCAiY291bnQiLCAicmVuZGVyUmVzdWx0IiwgIm5ld1R5cGUiLCAiY29uc3RydWN0b3IiLCAiX19lIiwgIl9fYiIsICJvdXRlciIsICJwcm9wcyIsICJwcm90b3R5cGUiLCAicmVuZGVyIiwgImNvbnRleHRUeXBlIiwgIl9fYyIsICJfXyIsICJfX0UiLCAiQmFzZUNvbXBvbmVudCIsICJkb1JlbmRlciIsICJzdWIiLCAic3RhdGUiLCAiY29udGV4dCIsICJfX24iLCAiX19kIiwgIl9faCIsICJfc2IiLCAiX19zIiwgImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsICJhc3NpZ24iLCAiX192IiwgImNvbXBvbmVudFdpbGxNb3VudCIsICJjb21wb25lbnREaWRNb3VudCIsICJwdXNoIiwgImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCAic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwgIl9fayIsICJzb21lIiwgInZub2RlIiwgImNvbXBvbmVudFdpbGxVcGRhdGUiLCAiY29tcG9uZW50RGlkVXBkYXRlIiwgIl9fUCIsICJfX3IiLCAiZ2V0Q2hpbGRDb250ZXh0IiwgImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwgImRpZmZDaGlsZHJlbiIsICJpc0FycmF5IiwgIkZyYWdtZW50IiwgImNoaWxkcmVuIiwgImJhc2UiLCAiTU9ERV9IWURSQVRFIiwgIm5vZGVUeXBlIiwgIm5leHRTaWJsaW5nIiwgImluZGV4T2YiLCAiZGlmZkVsZW1lbnROb2RlcyIsICJkaWZmZWQiLCAiY29tbWl0Um9vdCIsICJyb290IiwgImFwcGx5UmVmIiwgImNiIiwgImNhbGwiLCAibmV3SHRtbCIsICJvbGRIdG1sIiwgIm5ld0NoaWxkcmVuIiwgImlucHV0VmFsdWUiLCAiY2hlY2tlZCIsICJsb2NhbE5hbWUiLCAiZG9jdW1lbnQiLCAiY3JlYXRlVGV4dE5vZGUiLCAiY3JlYXRlRWxlbWVudE5TIiwgImlzIiwgIl9fbSIsICJkYXRhIiwgImNoaWxkTm9kZXMiLCAiRU1QVFlfT0JKIiwgImF0dHJpYnV0ZXMiLCAiX19odG1sIiwgImlubmVySFRNTCIsICJnZXREb21TaWJsaW5nIiwgInJlbW92ZU5vZGUiLCAicmVmIiwgImhhc1JlZlVubW91bnQiLCAiY3VycmVudCIsICJ1bm1vdW50IiwgInBhcmVudFZOb2RlIiwgInNraXBSZW1vdmUiLCAiciIsICJjb21wb25lbnRXaWxsVW5tb3VudCIsICJyZXBsYWNlTm9kZSIsICJjcmVhdGVFbGVtZW50IiwgIm5hbWVzcGFjZVVSSSIsICJmaXJzdENoaWxkIiwgInNsaWNlIiwgIkVNUFRZX0FSUiIsICJvcHRpb25zIiwgIl9fZSIsICJlcnJvciIsICJ2bm9kZSIsICJvbGRWTm9kZSIsICJlcnJvckluZm8iLCAiY29tcG9uZW50IiwgImN0b3IiLCAiaGFuZGxlZCIsICJfXyIsICJfX2MiLCAiY29uc3RydWN0b3IiLCAiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwgInNldFN0YXRlIiwgIl9fZCIsICJjb21wb25lbnREaWRDYXRjaCIsICJfX0UiLCAiZSIsICJ2bm9kZUlkIiwgImlzVmFsaWRFbGVtZW50IiwgInVuZGVmaW5lZCIsICJCYXNlQ29tcG9uZW50IiwgInByb3RvdHlwZSIsICJ1cGRhdGUiLCAiY2FsbGJhY2siLCAicyIsICJ0aGlzIiwgIl9fcyIsICJzdGF0ZSIsICJhc3NpZ24iLCAicHJvcHMiLCAiX192IiwgIl9zYiIsICJwdXNoIiwgImVucXVldWVSZW5kZXIiLCAiZm9yY2VVcGRhdGUiLCAiX19oIiwgInJlbmRlciIsICJGcmFnbWVudCIsICJyZXJlbmRlclF1ZXVlIiwgImRlZmVyIiwgIlByb21pc2UiLCAidGhlbiIsICJiaW5kIiwgInJlc29sdmUiLCAic2V0VGltZW91dCIsICJkZXB0aFNvcnQiLCAiYSIsICJiIiwgIl9fYiIsICJwcm9jZXNzIiwgIl9fciIsICJldmVudENsb2NrIiwgImV2ZW50UHJveHkiLCAiY3JlYXRlRXZlbnRQcm94eSIsICJldmVudFByb3h5Q2FwdHVyZSIsICJpIiwgImN1cnJlbnRJbmRleCIsICJjdXJyZW50Q29tcG9uZW50IiwgInByZXZpb3VzQ29tcG9uZW50IiwgInByZXZSYWYiLCAiY3VycmVudEhvb2siLCAiYWZ0ZXJQYWludEVmZmVjdHMiLCAib3B0aW9ucyIsICJfb3B0aW9ucyIsICJvbGRCZWZvcmVEaWZmIiwgIl9fYiIsICJvbGRCZWZvcmVSZW5kZXIiLCAiX19yIiwgIm9sZEFmdGVyRGlmZiIsICJkaWZmZWQiLCAib2xkQ29tbWl0IiwgIl9fYyIsICJvbGRCZWZvcmVVbm1vdW50IiwgInVubW91bnQiLCAib2xkUm9vdCIsICJfXyIsICJnZXRIb29rU3RhdGUiLCAiaW5kZXgiLCAidHlwZSIsICJfX2giLCAiaG9va3MiLCAiX19IIiwgImxlbmd0aCIsICJwdXNoIiwgInVzZVN0YXRlIiwgImluaXRpYWxTdGF0ZSIsICJ1c2VSZWR1Y2VyIiwgImludm9rZU9yUmV0dXJuIiwgInJlZHVjZXIiLCAiaW5pdCIsICJob29rU3RhdGUiLCAiX3JlZHVjZXIiLCAiYWN0aW9uIiwgImN1cnJlbnRWYWx1ZSIsICJfX04iLCAibmV4dFZhbHVlIiwgInNldFN0YXRlIiwgIl9oYXNTY3VGcm9tSG9va3MiLCAidXBkYXRlSG9va1N0YXRlIiwgInAiLCAicyIsICJjIiwgInN0YXRlSG9va3MiLCAiZmlsdGVyIiwgIngiLCAiZXZlcnkiLCAicHJldlNjdSIsICJjYWxsIiwgInRoaXMiLCAic2hvdWxkVXBkYXRlIiwgImZvckVhY2giLCAiaG9va0l0ZW0iLCAicHJvcHMiLCAic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwgInByZXZDV1UiLCAiY29tcG9uZW50V2lsbFVwZGF0ZSIsICJfX2UiLCAidG1wIiwgInVzZUVmZmVjdCIsICJjYWxsYmFjayIsICJhcmdzIiwgInN0YXRlIiwgIl9fcyIsICJhcmdzQ2hhbmdlZCIsICJfcGVuZGluZ0FyZ3MiLCAidXNlUmVmIiwgImluaXRpYWxWYWx1ZSIsICJjdXJyZW50SG9vayIsICJ1c2VNZW1vIiwgImN1cnJlbnQiLCAidXNlTWVtbyIsICJmYWN0b3J5IiwgImFyZ3MiLCAic3RhdGUiLCAiZ2V0SG9va1N0YXRlIiwgImN1cnJlbnRJbmRleCIsICJhcmdzQ2hhbmdlZCIsICJfX0giLCAiX18iLCAiX19oIiwgImZsdXNoQWZ0ZXJQYWludEVmZmVjdHMiLCAiY29tcG9uZW50IiwgImFmdGVyUGFpbnRFZmZlY3RzIiwgInNoaWZ0IiwgIl9fUCIsICJfX0giLCAiX19oIiwgImZvckVhY2giLCAiaW52b2tlQ2xlYW51cCIsICJpbnZva2VFZmZlY3QiLCAiZSIsICJvcHRpb25zIiwgIl9fZSIsICJfX3YiLCAiX19iIiwgInZub2RlIiwgImN1cnJlbnRDb21wb25lbnQiLCAib2xkQmVmb3JlRGlmZiIsICJfXyIsICJwYXJlbnREb20iLCAiX19rIiwgIl9fbSIsICJvbGRSb290IiwgIl9fciIsICJvbGRCZWZvcmVSZW5kZXIiLCAiY3VycmVudEluZGV4IiwgImhvb2tzIiwgIl9fYyIsICJwcmV2aW91c0NvbXBvbmVudCIsICJob29rSXRlbSIsICJfX04iLCAiX3BlbmRpbmdBcmdzIiwgImRpZmZlZCIsICJvbGRBZnRlckRpZmYiLCAiYyIsICJsZW5ndGgiLCAicHVzaCIsICJwcmV2UmFmIiwgInJlcXVlc3RBbmltYXRpb25GcmFtZSIsICJhZnRlck5leHRGcmFtZSIsICJjb21taXRRdWV1ZSIsICJzb21lIiwgImZpbHRlciIsICJjYiIsICJvbGRDb21taXQiLCAidW5tb3VudCIsICJvbGRCZWZvcmVVbm1vdW50IiwgImhhc0Vycm9yZWQiLCAicyIsICJIQVNfUkFGIiwgImNhbGxiYWNrIiwgInJhZiIsICJkb25lIiwgImNsZWFyVGltZW91dCIsICJ0aW1lb3V0IiwgImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwgInNldFRpbWVvdXQiLCAiaG9vayIsICJjb21wIiwgImNsZWFudXAiLCAiYXJnc0NoYW5nZWQiLCAib2xkQXJncyIsICJuZXdBcmdzIiwgImFyZyIsICJpbmRleCIsICJpbnZva2VPclJldHVybiIsICJmIiwgIkEiLCAieSIsICJpIiwgImgiLCAiZSIsICJ2IiwgImgiLCAidG9rZW5zIl0KfQo=\n";
export const tracerCss = "/* src/tracer/index.css */\nbody {\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe WPC\",\n    \"Segoe UI\",\n    system-ui,\n    \"Ubuntu\",\n    \"Droid Sans\",\n    sans-serif;\n  background: #fff;\n  margin: 0;\n}\n.render-pass {\n  border-left: 2px solid #ccc;\n  &:hover {\n    border-left-color: #000;\n  }\n}\n.literals li {\n  white-space: pre;\n  font-family:\n    \"SF Mono\",\n    Monaco,\n    Menlo,\n    Consolas,\n    \"Ubuntu Mono\",\n    \"Liberation Mono\",\n    \"DejaVu Sans Mono\",\n    \"Courier New\",\n    monospace;\n}\n.render-flex,\n.render-element {\n  padding-left: 10px;\n}\n.node {\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  margin: 3px 10px;\n  padding: 3px 10px;\n  border-radius: 4px;\n  width: fit-content;\n  &.new-in-epoch {\n    box-shadow: 0 0 3px 2px #ff0000;\n  }\n  &.before-epoch {\n    pointer-events: none;\n    filter: grayscale(1);\n    color: #777 !important;\n    .node {\n      color: #777 !important;\n    }\n  }\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n.node-content {\n  font-weight: bold;\n}\n.node-children {\n  margin-left: 20px;\n  border-left: 2px dashed rgba(255, 255, 255, 0.5);\n  padding-left: 10px;\n}\n.node-toggler {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  .indicator {\n    font-size: 0.7em;\n  }\n}\n.node-text {\n  width: 400px;\n  &:focus,\n  &:focus-within {\n    outline: 1px solid orange;\n    .node-content {\n      white-space: normal;\n    }\n  }\n  .node-content {\n    font-weight: normal;\n    font-size: 0.8em;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n}\n.node-stats {\n  font-family:\n    \"SF Mono\",\n    Monaco,\n    Menlo,\n    Consolas,\n    \"Ubuntu Mono\",\n    \"Liberation Mono\",\n    \"DejaVu Sans Mono\",\n    \"Courier New\",\n    monospace;\n  font-size: 0.8em;\n}\n.control-description {\n  padding: 10px;\n  p {\n    font-size: 0.9em;\n    max-width: 500px;\n    margin-top: 0;\n  }\n}\n.controls {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: sticky;\n  top: 0;\n  padding: 10px;\n  background: #fff;\n  border-bottom: 1px solid #ccc;\n  z-index: 1;\n}\n.controls-slider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.controls-stats {\n  display: flex;\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n  margin-top: 0;\n}\n.controls-scoreby {\n  display: flex;\n  gap: 10px;\n}\n.tabs {\n  display: flex;\n  border-bottom: 1px solid #ccc;\n  margin-bottom: 10px;\n}\n.tab {\n  padding: 10px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  border-bottom: none;\n}\n.tab.active {\n  border-color: #ccc;\n  border-bottom: 1px solid #fff;\n  background-color: #f9f9f9;\n}\n.tab-content {\n  display: none;\n}\n.tab-content.active {\n  display: block;\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3RyYWNlci9pbmRleC5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImJvZHkge1xyXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBXUEMnLCAnU2Vnb2UgVUknLCBzeXN0ZW0tdWksICdVYnVudHUnLCAnRHJvaWQgU2FucycsIHNhbnMtc2VyaWY7XHJcbiAgYmFja2dyb3VuZDogI2ZmZjtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi8qKiBPbGQgZmxleCBkaXNwbGF5ICovXHJcbi5yZW5kZXItcGFzcyB7XHJcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjY2NjO1xyXG5cclxuICAmOmhvdmVyIHtcclxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjMDAwO1xyXG4gIH1cclxufVxyXG5cclxuLmxpdGVyYWxzIGxpIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlO1xyXG4gIGZvbnQtZmFtaWx5OiBcIlNGIE1vbm9cIiwgTW9uYWNvLCBNZW5sbywgQ29uc29sYXMsIFwiVWJ1bnR1IE1vbm9cIiwgXCJMaWJlcmF0aW9uIE1vbm9cIiwgXCJEZWphVnUgU2FucyBNb25vXCIsIFwiQ291cmllciBOZXdcIiwgbW9ub3NwYWNlO1xyXG59XHJcblxyXG4ucmVuZGVyLWZsZXgsIC5yZW5kZXItZWxlbWVudCB7XHJcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG59XHJcblxyXG4vKiogVFNYIENvbXBvbmVudHMgKi9cclxuXHJcbi5ub2RlIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XHJcbiAgbWFyZ2luOiAzcHggMTBweDtcclxuICBwYWRkaW5nOiAzcHggMTBweDtcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG5cclxuICAmLm5ldy1pbi1lcG9jaCB7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgM3B4IDJweCAjZmYwMDAwO1xyXG4gIH1cclxuXHJcbiAgJi5iZWZvcmUtZXBvY2gge1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxKTtcclxuICAgIGNvbG9yOiAjNzc3ICFpbXBvcnRhbnQ7XHJcblxyXG4gICAgLm5vZGUge1xyXG4gICAgICBjb2xvcjogIzc3NyAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJjpsYXN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS1jb250ZW50IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLm5vZGUtY2hpbGRyZW4ge1xyXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gIGJvcmRlci1sZWZ0OiAycHggZGFzaGVkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbn1cclxuXHJcbi5ub2RlLXRvZ2dsZXIge1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAuaW5kaWNhdG9yIHtcclxuICAgIGZvbnQtc2l6ZTogMC43ZW07XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS10ZXh0IHtcclxuICB3aWR0aDogNDAwcHg7XHJcblxyXG4gICY6Zm9jdXMsICY6Zm9jdXMtd2l0aGluIHtcclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCBvcmFuZ2U7XHJcblxyXG4gICAgLm5vZGUtY29udGVudCB7XHJcbiAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAubm9kZS1jb250ZW50IHtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBmb250LXNpemU6IDAuOGVtO1xyXG5cclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG59XHJcblxyXG4ubm9kZS1zdGF0cyB7XHJcbiAgZm9udC1mYW1pbHk6IFwiU0YgTW9ub1wiLCBNb25hY28sIE1lbmxvLCBDb25zb2xhcywgXCJVYnVudHUgTW9ub1wiLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBcIkRlamFWdSBTYW5zIE1vbm9cIiwgXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2U7XHJcbiAgZm9udC1zaXplOiAwLjhlbTtcclxufVxyXG5cclxuLmNvbnRyb2wtZGVzY3JpcHRpb24ge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcblxyXG4gIHAge1xyXG4gICAgZm9udC1zaXplOiAwLjllbTtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gIH1cclxufVxyXG5cclxuLmNvbnRyb2xzIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgZ2FwOiAxMHB4O1xyXG4gIHBvc2l0aW9uOiBzdGlja3k7XHJcbiAgdG9wOiAwO1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgYmFja2dyb3VuZDogI2ZmZjtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcclxuICB6LWluZGV4OiAxO1xyXG59XHJcblxyXG4uY29udHJvbHMtc2xpZGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgZ2FwOiAxMHB4O1xyXG59XHJcblxyXG4uY29udHJvbHMtc3RhdHMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZ2FwOiAyMHB4O1xyXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxuICBtYXJnaW4tdG9wOiAwO1xyXG59XHJcblxyXG4uY29udHJvbHMtc2NvcmVieSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBnYXA6IDEwcHg7XHJcbn1cclxuXHJcblxyXG4udGFicyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG4udGFiIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICBib3JkZXItYm90dG9tOiBub25lO1xyXG59XHJcblxyXG4udGFiLmFjdGl2ZSB7XHJcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XHJcbn1cclxuXHJcbi50YWItY29udGVudCB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLnRhYi1jb250ZW50LmFjdGl2ZSB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBO0FBQ0U7QUFBQSxJQUFhLGFBQWE7QUFBQSxJQUFFLGtCQUFrQjtBQUFBLElBQUUsV0FBVztBQUFBLElBQUUsVUFBVTtBQUFBLElBQUUsU0FBUztBQUFBLElBQUUsUUFBUTtBQUFBLElBQUUsWUFBWTtBQUFBLElBQUU7QUFDNUcsY0FBWTtBQUNaLFVBQVE7QUFDVjtBQUdBLENBQUM7QUFDQyxlQUFhLElBQUksTUFBTTtBQUV2QixHQUFDO0FBQ0MsdUJBQW1CO0FBQ3JCO0FBQ0Y7QUFFQSxDQUFDLFNBQVM7QUFDUixlQUFhO0FBQ2I7QUFBQSxJQUFhLFNBQVM7QUFBQSxJQUFFLE1BQU07QUFBQSxJQUFFLEtBQUs7QUFBQSxJQUFFLFFBQVE7QUFBQSxJQUFFLGFBQWE7QUFBQSxJQUFFLGlCQUFpQjtBQUFBLElBQUUsa0JBQWtCO0FBQUEsSUFBRSxhQUFhO0FBQUEsSUFBRTtBQUN4SDtBQUVBLENBQUM7QUFBYSxDQUFDO0FBQ2IsZ0JBQWM7QUFDaEI7QUFJQSxDQUFDO0FBQ0MsVUFBUSxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUN0QyxVQUFRLElBQUk7QUFDWixXQUFTLElBQUk7QUFDYixpQkFBZTtBQUNmLFNBQU87QUFFUCxHQUFDLENBQUM7QUFDQSxnQkFBWSxFQUFFLEVBQUUsSUFBSSxJQUFJO0FBQzFCO0FBRUEsR0FBQyxDQUFDO0FBQ0Esb0JBQWdCO0FBQ2hCLFlBQVEsVUFBVTtBQUNsQixXQUFPO0FBRVAsS0FoQkg7QUFpQkssYUFBTztBQUNUO0FBQ0Y7QUFFQSxHQUFDO0FBQ0MsbUJBQWU7QUFDakI7QUFDRjtBQUVBLENBQUM7QUFDQyxlQUFhO0FBQ2Y7QUFFQSxDQUFDO0FBQ0MsZUFBYTtBQUNiLGVBQWEsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDNUMsZ0JBQWM7QUFDaEI7QUFFQSxDQUFDO0FBQ0MsVUFBUTtBQUNSLFdBQVM7QUFDVCxlQUFhO0FBQ2IsbUJBQWlCO0FBRWpCLEdBQUM7QUFDQyxlQUFXO0FBQ2I7QUFDRjtBQUVBLENBQUM7QUFDQyxTQUFPO0FBRVAsR0FBQztBQUFBLEVBQVEsQ0FBQztBQUNSLGFBQVMsSUFBSSxNQUFNO0FBRW5CLEtBM0JIO0FBNEJLLG1CQUFhO0FBQ2Y7QUFDRjtBQUVBLEdBaENEO0FBaUNHLGlCQUFhO0FBQ2IsZUFBVztBQUVYLGlCQUFhO0FBQ2IsbUJBQWU7QUFDZixjQUFVO0FBQ1o7QUFDRjtBQUVBLENBQUM7QUFDQztBQUFBLElBQWEsU0FBUztBQUFBLElBQUUsTUFBTTtBQUFBLElBQUUsS0FBSztBQUFBLElBQUUsUUFBUTtBQUFBLElBQUUsYUFBYTtBQUFBLElBQUUsaUJBQWlCO0FBQUEsSUFBRSxrQkFBa0I7QUFBQSxJQUFFLGFBQWE7QUFBQSxJQUFFO0FBQ3RILGFBQVc7QUFDYjtBQUVBLENBQUM7QUFDQyxXQUFTO0FBRVQ7QUFDRSxlQUFXO0FBQ1gsZUFBVztBQUNYLGdCQUFZO0FBQ2Q7QUFDRjtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1Qsa0JBQWdCO0FBQ2hCLE9BQUs7QUFDTCxZQUFVO0FBQ1YsT0FBSztBQUNMLFdBQVM7QUFDVCxjQUFZO0FBQ1osaUJBQWUsSUFBSSxNQUFNO0FBQ3pCLFdBQVM7QUFDWDtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1QsZUFBYTtBQUNiLE9BQUs7QUFDUDtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1QsT0FBSztBQUNMLGNBQVk7QUFDWixXQUFTO0FBQ1QsY0FBWTtBQUNkO0FBRUEsQ0FBQztBQUNDLFdBQVM7QUFDVCxPQUFLO0FBQ1A7QUFHQSxDQUFDO0FBQ0MsV0FBUztBQUNULGlCQUFlLElBQUksTUFBTTtBQUN6QixpQkFBZTtBQUNqQjtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1QsVUFBUTtBQUNSLFVBQVEsSUFBSSxNQUFNO0FBQ2xCLGlCQUFlO0FBQ2pCO0FBRUEsQ0FQQyxHQU9HLENBQUM7QUFDSCxnQkFBYztBQUNkLGlCQUFlLElBQUksTUFBTTtBQUN6QixvQkFBa0I7QUFDcEI7QUFFQSxDQUFDO0FBQ0MsV0FBUztBQUNYO0FBRUEsQ0FKQyxXQUlXLENBVlA7QUFXSCxXQUFTO0FBQ1g7IiwKICAibmFtZXMiOiBbXQp9Cg== */\n";